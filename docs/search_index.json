[["index.html", "AlberdiLab | Martin-Bideguren et al. 2024 Study title to be added Chapter 1 Introduction 1.1 Prepare the R environment", " AlberdiLab | Martin-Bideguren et al. 2024 Study title to be added Garazi Martin-Bideguren1, Ostaizka Aizpurua2, Javier Abalos3, Fabien Aubret4, Guillem Pérez i de Lanuza5, Tom Sarraude6, Nathalie Feiner7, Tobias Uller8, Aoife Leonard9 and Antton Alberdi10 Last update: 2024-08-05 Chapter 1 Introduction This webbook contains all the code used for data analysis in study of the population-level metagenomic data of Podarcis muralis lizards across elevational gradients in various mountain ranges of the Pyrenees. 1.1 Prepare the R environment 1.1.1 Environment To reproduce all the analyses locally, clone this repository in your computer using: RStudio &gt; New Project &gt; Version Control &gt; Git And indicating the following git repository: https://github.com/alberdilab/elevational_hologenomics.git Once the R project has been created, follow the instructions and code chunks shown in this webbook. 1.1.2 Libraries The following R packages are required for the data analysis. # Base library(R.utils) library(knitr) library(tidyverse) library(devtools) library(tinytable) # For tree handling library(ape) library(phyloseq) library(phytools) # For plotting library(ggplot2) library(ggrepel) library(ggpubr) library(ggnewscale) library(gridExtra) library(ggtreeExtra) library(ggtree) library(ggh4x) library(UpSetR) # For statistics library(spaa) library(vegan) library(Rtsne) library(geiger) library(hilldiv2) library(distillR) library(broom.mixed) library(Hmsc) library(corrplot) University of Copenhagen, garazi.bideguren@sund.ku.dk↩︎ University of Copenhagen, ostaizka.aizpurua@sund.ku.dk↩︎ University of Valencia, jal4@uv.es↩︎ Centre National de la Recherche Scientifique, faubret@gmail.com↩︎ University of Valencia, guillem.perez-lanuza@uv.es↩︎ Centre National de la Recherche Scientifique, t.sarraude@gmail.com↩︎ University of Lund, nathalie.feiner@biol.lu.se↩︎ University of Lund, tobias.uller@biol.lu.se↩︎ Aarhus University, aoife.leonard@sund.ku.dk↩︎ University of Copenhagen, antton.alberdi@sund.ku.dk↩︎ "],["prepare-data.html", "Chapter 2 Prepare data 2.1 Load data 2.2 Create working objects 2.3 Prepare color scheme 2.4 Wrap working objects", " Chapter 2 Prepare data 2.1 Load data Load the original data files outputted by the bioinformatic pipeline. 2.1.1 Sample metadata sample_metadata &lt;- read.csv(&quot;data/Pyrenees_metadata_all_v2.csv&quot;,sep=&quot;,&quot;,header=T)%&gt;% filter(EHI_number != &quot;EHI00102&quot;) %&gt;% filter(EHI_number != &quot;EHI00182&quot;) %&gt;% filter(EHI_number !=&quot;EHI00435&quot;) %&gt;% filter(EHI_number !=&quot;EHI00126&quot;) #genome not P.muralis 2.1.2 Read counts read_counts &lt;- read_tsv(&quot;data/DMB0113_counts.tsv&quot;) %&gt;% rename(genome = 1) %&gt;% select(-EHI00102, -EHI00182,-EHI00435,-EHI00126) #remove samples 2.1.3 Genome taxonomy genome_metadata &lt;- read_tsv(&quot;data/DMB0113_mag_info.tsv&quot;) %&gt;% rename(length=mag_size) 2.1.4 Genome base hits genome_coverage &lt;- read_tsv(&quot;data/DMB0113_coverage.tsv&quot;) %&gt;% rename(genome = 1) %&gt;% select(-EHI00102, -EHI00182,-EHI00435,-EHI00126) %&gt;% #remove samples semi_join(genome_metadata, by = &quot;genome&quot;) 2.1.5 Genome tree genome_tree &lt;- read_tree(&quot;data/DMB0113.tree&quot;) genome_tree$tip.label &lt;- str_replace_all(genome_tree$tip.label,&quot;&#39;&quot;, &quot;&quot;) #remove single quotes in MAG names genome_tree &lt;- keep.tip(genome_tree, tip=genome_metadata$genome) # keep only MAG tips 2.1.6 Genome annotations Distill annotations already into GIFTs genome_gifts_raw=&quot;data/GIFTs.tsv&quot; genome_gifts &lt;- read.table(genome_gifts_raw,header=T, sep=&quot;\\t&quot;, row.names=1) 2.2 Create working objects Transform the original data files into working objects for downstream analyses. 2.2.1 Filter reads by coverage read_counts &lt;- read_counts %&gt;% semi_join(genome_metadata, by = &quot;genome&quot;) min_coverage=0.3 read_counts_filt &lt;- genome_coverage %&gt;% mutate(across(where(is.numeric), ~ ifelse(. &gt; min_coverage, 1, 0))) %&gt;% mutate(across(-1, ~ . * read_counts[[cur_column()]])) 2.2.2 Transform reads into genome counts readlength=150 genome_counts &lt;- read_counts %&gt;% mutate(across(where(is.numeric), ~ . / (genome_metadata$length / readlength) )) readlength=150 genome_counts_filt &lt;- read_counts_filt %&gt;% mutate(across(where(is.numeric), ~ . / (genome_metadata$length / readlength) )) 2.3 Prepare color scheme AlberdiLab projects use unified color schemes developed for the Earth Hologenome Initiative, to facilitate figure interpretation. phylum_colors &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, genome_tree$tip.label)) %&gt;% select(phylum, colors) %&gt;% unique() %&gt;% arrange(phylum) %&gt;% pull(colors, name=phylum) 2.4 Wrap working objects All working objects are wrapped into a single Rdata object to facilitate downstream usage. save(sample_metadata, genome_metadata, read_counts, genome_counts, genome_counts_filt, genome_tree, genome_gifts, phylum_colors, file = &quot;data/data.Rdata&quot;) "],["data-summary.html", "Chapter 3 Data summary", " Chapter 3 Data summary load(&quot;data/data.Rdata&quot;) Summary of sampled individuals and analysed faecal samples. #number of samples length(sample_metadata$EHI_number) [1] 105 #number of samples by transect sample_metadata %&gt;% group_by(Transect) %&gt;% summarise(n_samples = length(EHI_number)) %&gt;% tt() tinytable_6zmaurrt0dnnuvoynzhu .table td.tinytable_css_dxiwqa6vohmk6ri2gqgq, .table th.tinytable_css_dxiwqa6vohmk6ri2gqgq { border-bottom: solid 0.1em #d3d8dc; } Transect n_samples Aisa 22 Aran 37 Sentein 19 Tourmalet 27 #number of samples by transect and elevation sample_metadata %&gt;% group_by(Transect, Elevation) %&gt;% summarise(n_samples = length(EHI_number)) %&gt;% tt() tinytable_ig9z7qnfqzcalgjr0atk .table td.tinytable_css_bmb72ppc1u6y59n55s60, .table th.tinytable_css_bmb72ppc1u6y59n55s60 { border-bottom: solid 0.1em #d3d8dc; } Transect Elevation n_samples Aisa 1250 6 Aisa 1450 6 Aisa 1650 4 Aisa 1850 6 Aran 1000 6 Aran 1080 7 Aran 1340 5 Aran 1500 6 Aran 1650 7 Aran 1850 6 Sentein 941 5 Sentein 1260 4 Sentein 1628 5 Sentein 1873 5 Tourmalet 953 5 Tourmalet 1255 4 Tourmalet 1561 4 Tourmalet 1797 4 Tourmalet 2065 2 Tourmalet 2134 3 Tourmalet 2306 5 #n of analysed faecal samples ncol(read_counts) [1] 106 Geographical location of sampled lizards in the Pyrenees. #Summarise for generating map options(dplyr.summarise.inform = FALSE) sample_metadata_summary &lt;- sample_metadata %&gt;% #Group by geography and count samples select(EHI_number, latitude, longitude, Transect) %&gt;% group_by(latitude, longitude, Transect) %&gt;% summarize(count = n()) %&gt;% ungroup() #plotting on map ## Determine the longitude and latitude ranges lon_range &lt;- range(sample_metadata_summary$longitude, na.rm = TRUE) lat_range &lt;- range(sample_metadata_summary$latitude, na.rm = TRUE) sample_metadata_summary %&gt;% ggplot(.) + #render map geom_map( data=map_data(&quot;world&quot;), map = map_data(&quot;world&quot;), aes(long, lat, map_id=region), color = &quot;white&quot;, fill = &quot;#cccccc&quot;, linewidth = 0.2 ) + #render points geom_point( aes(x=longitude,y=latitude, color=Transect), alpha=0.5, shape=16) + #add general plot layout theme_minimal() + theme(legend.position = &quot;right&quot;, axis.title.x=element_blank(), axis.title.y=element_blank() ) + coord_map(&quot;mercator&quot;, xlim = lon_range, ylim = lat_range) "],["data-statistics.html", "Chapter 4 Data statistics 4.1 Sequencing reads statistics 4.2 Sequencing depth 4.3 DNA fractions 4.4 Recovered microbial fraction", " Chapter 4 Data statistics 4.1 Sequencing reads statistics sample_metadata %&gt;% summarise(Total=sum(reads_post_fastp * 150 / 1000000000) %&gt;% round(2), mean=mean(reads_post_fastp * 150 / 1000000000) %&gt;% round(2), sd=sd(reads_post_fastp * 150 / 1000000000) %&gt;% round(2)) %&gt;% unite(&quot;Average&quot;,mean, sd, sep = &quot; ± &quot;, remove = TRUE) %&gt;% tt() tinytable_ikco626d5eg4b5eukmfi .table td.tinytable_css_fug5dee3c9iwanz1lir3, .table th.tinytable_css_fug5dee3c9iwanz1lir3 { border-bottom: solid 0.1em #d3d8dc; } Total Average 652.04 6.21 ± 2.77 4.2 Sequencing depth sequencing_depth &lt;- read_counts %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% colSums() 4.3 DNA fractions sequence_fractions &lt;- read_counts %&gt;% pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;value&quot;) %&gt;% group_by(sample) %&gt;% summarise(mags = sum(value)) %&gt;% left_join(sample_metadata, by = join_by(sample == EHI_number)) %&gt;% select(sample,mags,metagenomic_bases,host_bases,bases_lost_fastp_percent) %&gt;% mutate(mags_bases = mags*146) %&gt;% mutate(lowqual_bases = ((metagenomic_bases+host_bases)/(1-bases_lost_fastp_percent))-(metagenomic_bases+host_bases)) %&gt;% mutate(unmapped_bases = metagenomic_bases - mags_bases) %&gt;% mutate(unmapped_bases = ifelse(unmapped_bases &lt; 0, 0, unmapped_bases)) %&gt;% select(sample, lowqual_bases, host_bases, unmapped_bases, mags_bases) sequence_fractions %&gt;% mutate_at(vars(-sample), ~./1000000000) %&gt;% rename(&quot;Sample&quot;=1, &quot;Low quality&quot;=2, &quot;Mapped to host&quot;=3, &quot;Unmapped&quot;=4, &quot;Mapped to MAGs&quot;=5) %&gt;% tt() tinytable_uipg78vlitrw55k3hosc .table td.tinytable_css_dh5e35q1ty1v8ghcgajk, .table th.tinytable_css_dh5e35q1ty1v8ghcgajk { border-bottom: solid 0.1em #d3d8dc; } Sample Low quality Mapped to host Unmapped Mapped to MAGs EHI00069 1.1441521 0.920532571 2.0517957 4.1058263 EHI00070 0.2348919 0.937599880 0.8332809 1.6364476 EHI00072 0.3717090 0.078319449 0.9507999 4.0430716 EHI00073 0.1504762 0.007300164 0.6458066 1.8453666 EHI00074 0.5700275 0.034671349 1.7906564 5.7526051 EHI00075 0.2702205 0.444390387 0.9599202 2.4896265 EHI00076 0.3350547 0.081391903 1.4172925 3.8389468 EHI00077 0.1353495 0.641770627 0.3885242 1.3947384 EHI00079 0.3377906 2.721037061 0.5653554 0.8084465 EHI00080 0.7291964 1.605187153 2.3611523 2.6883254 EHI00081 0.2184180 0.727448090 0.5615342 1.3358755 EHI00085 0.2300087 0.212261834 0.5665817 1.9281604 EHI00086 0.3471176 0.417593612 1.0770869 1.7440344 EHI00088 0.2278663 0.071769210 0.5556301 3.0141044 EHI00089 0.1751910 0.034915171 0.5162821 1.9576155 EHI00091 0.2622745 0.230039482 0.8255133 2.4924602 EHI00092 0.3917724 0.170842450 1.0255541 4.9181624 EHI00093 0.3725739 0.199633318 1.1938025 2.3137473 EHI00095 0.1768550 0.255990148 0.3449738 1.9242079 EHI00097 0.5249214 0.366551383 0.8028468 2.9685729 EHI00098 0.3176395 0.040047629 1.7271586 3.1498120 EHI00100 0.4386907 2.398470758 0.8228622 4.1093643 EHI00101 0.7257361 0.451928365 4.9291736 1.9943098 EHI00103 0.2036111 0.843529516 0.5714195 1.3395113 EHI00104 0.1769983 0.643701669 0.6807099 1.2574891 EHI00105 0.2711051 0.005694785 0.9087805 2.7311372 EHI00106 1.1082626 1.058626752 1.8709694 2.0746217 EHI00107 0.3818355 0.184257358 1.5836979 3.0592637 EHI00108 0.3420046 0.394171066 0.5356632 2.7441687 EHI00110 0.3648881 0.591747269 0.5588077 2.6145261 EHI00111 0.4392502 0.151954279 1.1992388 3.5773008 EHI00112 0.7134927 0.085183185 1.1328903 3.6469985 EHI00113 0.8620893 0.617092903 1.4939464 7.3254896 EHI00114 0.4127445 0.087174427 2.3985081 4.6641659 EHI00115 0.6290438 0.062352261 2.6081814 3.0085937 EHI00116 0.4130247 0.039596686 0.8559983 4.7270478 EHI00117 0.6850197 0.423816725 1.2454024 7.0782364 EHI00118 0.3963952 0.784391517 0.9049477 3.7006953 EHI00119 0.4448016 0.038727564 1.5277021 4.6761692 EHI00120 0.3549466 0.051038023 0.7165254 3.8122875 EHI00121 0.2487524 1.196143747 0.9172490 1.9448859 EHI00122 0.3967333 0.056247498 1.7140526 5.3880487 EHI00124 0.3101617 0.113171041 1.6986936 3.2732918 EHI00125 0.3008464 0.313488992 1.2381544 3.1620784 EHI00128 0.3688688 0.149336152 1.0558709 2.9648899 EHI00129 0.2827708 0.212726094 0.7352845 2.7738704 EHI00130 0.2917071 0.082344877 1.0170695 2.1151693 EHI00131 0.1940832 0.943415382 0.4863996 1.2048589 EHI00133 0.2569782 0.429506925 0.3484713 3.3747982 EHI00134 0.5620395 1.988142143 1.9520876 3.9427347 EHI00137 0.2948339 0.250489910 1.0341318 2.4844583 EHI00138 0.2673241 0.179238573 0.5826993 2.8578460 EHI00139 0.3001940 0.034225947 0.9413847 2.1426906 EHI00176 0.7041777 0.100761385 0.7196926 2.7465205 EHI00177 0.2555111 0.016053624 0.5228890 2.1639513 EHI00178 0.2415179 0.045338274 1.3634101 2.6038297 EHI00179 0.1816121 0.023148016 0.9401620 2.3926575 EHI00180 0.5363481 0.037200326 0.7786810 2.4699635 EHI00181 0.1978972 0.301399301 0.4733087 2.4456488 EHI00422 0.1660426 0.058188268 0.4631427 2.3301737 EHI00426 0.6048076 0.374841259 1.6091057 5.6754435 EHI00428 0.4361908 0.354862015 0.9866519 3.7380622 EHI00433 0.6941201 0.730117194 1.6017157 3.7066518 EHI00438 0.2938182 0.100587490 0.8490354 4.7546269 EHI00441 0.5217550 0.202212815 2.3199030 6.8309541 EHI00451 0.4696437 0.318898071 1.2315115 5.0794188 EHI00456 0.5747753 0.097152439 0.6337192 4.7496272 EHI00458 0.5541280 0.326249839 1.7364884 4.9185106 EHI00462 0.5139086 0.330809687 1.3870295 4.8485639 EHI00464 0.5604449 0.962080506 1.5487451 5.0533364 EHI00465 0.1355889 0.041795770 0.7088416 1.4262076 EHI00467 0.4291035 0.854761759 1.6444666 3.7590494 EHI00470 0.6625583 1.679223689 1.8675738 8.1840405 EHI00472 0.3619652 0.586418138 1.8074071 3.3732380 EHI00473 0.4841385 0.477433785 1.2481742 4.8043613 EHI00477 0.4782444 0.087653441 2.7186490 3.7317223 EHI00479 0.8395454 0.074374376 1.9936025 12.8156007 EHI00480 0.7475415 0.793212202 3.1481051 4.3553735 EHI00481 0.5040521 0.094726409 1.3739735 5.3792865 EHI00483 0.4545170 1.532171008 0.8653232 4.7402692 EHI00484 0.3037426 0.269250378 1.3870200 5.2563238 EHI00488 0.4900356 2.212642337 2.0850126 4.3632065 EHI00490 0.6234248 0.180662818 3.5993286 7.8297890 EHI00493 0.4026458 2.030328521 2.7098633 2.4780854 EHI00496 0.4536382 0.415085470 1.7045368 6.1699650 EHI00499 3.5142773 2.204637514 3.4291586 3.2083353 EHI00504 0.5335873 2.167943278 1.2709452 4.9663386 EHI00506 0.7953759 0.639271744 1.7418071 8.0883653 EHI00507 0.4077748 0.136492692 1.5474048 5.5083429 EHI00512 0.6299478 8.067540048 0.5964127 1.3433168 EHI00514 0.4590217 0.336676348 1.5023882 6.2571308 EHI00518 0.4082296 0.012341521 1.0122951 5.8379043 EHI00524 0.4918121 1.320091255 2.0577845 4.8996823 EHI00525 0.3238390 0.105964164 1.1420157 5.0531429 EHI00527 0.5623443 0.128178226 2.3107744 7.6106934 EHI00529 0.3350620 0.129930230 1.3102065 5.1130080 EHI00536 0.4725239 0.010876654 1.2534820 7.7176039 EHI00537 0.3665586 0.089579032 2.4631156 1.4492223 EHI00538 0.4501201 2.638414328 0.6397030 3.1637601 EHI00541 0.7086242 0.152318595 1.4153324 6.8350770 EHI00547 1.0225445 2.648359289 7.0526142 6.1760904 EHI00566 0.5706734 0.218664855 1.7237625 7.3779017 EHI00567 0.4565067 0.133011864 1.9051503 4.4466414 EHI00568 0.5246686 0.219110833 1.7989251 3.5919103 EHI00569 0.6859077 0.169999886 2.6761990 6.7957645 sequence_fractions %&gt;% pivot_longer(!sample, names_to = &quot;fraction&quot;, values_to = &quot;value&quot;) %&gt;% mutate(value = value / 1000000000) %&gt;% mutate(fraction = factor(fraction, levels = c(&quot;lowqual_bases&quot;,&quot;host_bases&quot;,&quot;unmapped_bases&quot;,&quot;mags_bases&quot;))) %&gt;% ggplot(., aes(x = sample, y = value, fill=fraction)) + geom_bar(position=&quot;stack&quot;, stat = &quot;identity&quot;) + scale_fill_manual(name=&quot;Sequence type&quot;, breaks=c(&quot;lowqual_bases&quot;,&quot;host_bases&quot;,&quot;unmapped_bases&quot;,&quot;mags_bases&quot;), labels=c(&quot;Low quality&quot;,&quot;Mapped to host&quot;,&quot;Unmapped&quot;,&quot;Mapped to MAGs&quot;), values=c(&quot;#CCCCCC&quot;, &quot;#bcdee1&quot;, &quot;#d8b8a3&quot;,&quot;#93655c&quot;))+ labs(x = &quot;Samples&quot;, y = &quot;Amount of data (GB)&quot;) + theme_classic() + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1, size=6),legend.position = &quot;bottom&quot;) 4.4 Recovered microbial fraction singlem_table &lt;- sequence_fractions %&gt;% mutate(mags_proportion = round((mags_bases / (mags_bases + unmapped_bases))*100,2)) %&gt;% left_join(sample_metadata, by = join_by(sample == EHI_number)) %&gt;% mutate(singlem_proportion = round(singlem_fraction*100,2)) %&gt;% select(sample,mags_proportion,singlem_proportion) %&gt;% mutate(mags_proportion = ifelse(singlem_proportion == 0, 0, mags_proportion)) %&gt;% #convert zeros to NA mutate(singlem_proportion = ifelse(singlem_proportion == 0, NA, singlem_proportion)) %&gt;% #convert zeros to NA mutate(singlem_proportion = ifelse(singlem_proportion &lt; mags_proportion, NA, singlem_proportion)) %&gt;% #if singlem is smaller, then NA, to simplify plot mutate(singlem_proportion = ifelse(singlem_proportion &gt; 100, 100, singlem_proportion)) #simplify singlem_table %&gt;% pivot_longer(!sample, names_to = &quot;proportion&quot;, values_to = &quot;value&quot;) %&gt;% left_join(sample_metadata, by = join_by(sample == EHI_number)) %&gt;% mutate(proportion = factor(proportion, levels = c(&quot;mags_proportion&quot;,&quot;singlem_proportion&quot;))) %&gt;% ggplot(., aes(x = value, y = sample, color=proportion)) + geom_line(aes(group = sample), color = &quot;#f8a538&quot;) + geom_point() + scale_color_manual(name=&quot;Proportion&quot;, breaks=c(&quot;mags_proportion&quot;,&quot;singlem_proportion&quot;), labels=c(&quot;Recovered&quot;,&quot;Estimated&quot;), values=c(&quot;#52e1e8&quot;, &quot;#876b53&quot;))+ facet_nested(species + sample_type ~ ., scales=&quot;free&quot;,space=&quot;free&quot;)+ theme_classic() + labs(y = &quot;Samples&quot;, x = &quot;Prokaryotic fraction (%)&quot;) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1, size=6), legend.position = &quot;right&quot;, strip.background.y=element_rect(color = NA, fill= &quot;#f4f4f4&quot;)) "],["mag-catalogue.html", "Chapter 5 MAG catalogue 5.1 Genome phylogeny 5.2 Genome quality 5.3 Functional overview 5.4 Functional ordination 5.5 MAGs shared across transects", " Chapter 5 MAG catalogue load(&quot;data/data.Rdata&quot;) 5.1 Genome phylogeny # Generate the phylum color heatmap phylum_heatmap &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, genome_tree$tip.label)) %&gt;% select(genome,phylum) %&gt;% mutate(phylum = factor(phylum, levels = unique(phylum))) %&gt;% column_to_rownames(var = &quot;genome&quot;) # Generate basal tree circular_tree &lt;- force.ultrametric(genome_tree, method=&quot;extend&quot;) %&gt;% # extend to ultrametric for the sake of visualisation ggtree(., layout=&quot;fan&quot;, open.angle=10, size=0.5) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** # Add phylum ring circular_tree &lt;- gheatmap(circular_tree, phylum_heatmap, offset=0.55, width=0.1, colnames=FALSE) + scale_fill_manual(values=phylum_colors) + geom_tiplab2(size=1, hjust=-0.1) + theme(legend.position = &quot;none&quot;, plot.margin = margin(0, 0, 0, 0), panel.margin = margin(0, 0, 0, 0)) # Flush color scale to enable a new color scheme in the next ring circular_tree &lt;- circular_tree + new_scale_fill() # Add completeness ring circular_tree &lt;- circular_tree + new_scale_fill() + scale_fill_gradient(low = &quot;#d1f4ba&quot;, high = &quot;#f4baba&quot;) + geom_fruit( data=genome_metadata, geom=geom_bar, mapping = aes(x=completeness, y=genome, fill=contamination), offset = 0.55, orientation=&quot;y&quot;, stat=&quot;identity&quot;) # Add genome-size ring circular_tree &lt;- circular_tree + new_scale_fill() + scale_fill_manual(values = &quot;#cccccc&quot;) + geom_fruit( data=genome_metadata, geom=geom_bar, mapping = aes(x=length, y=genome), offset = 0.05, orientation=&quot;y&quot;, stat=&quot;identity&quot;) # Add text circular_tree &lt;- circular_tree + annotate(&#39;text&#39;, x=3.4, y=0, label=&#39; Phylum&#39;, family=&#39;arial&#39;, size=3.5) + annotate(&#39;text&#39;, x=4.3, y=0, label=&#39; Genome quality&#39;, family=&#39;arial&#39;,size=3.5)+ annotate(&#39;text&#39;, x=4.8, y=0, label=&#39; Genome size&#39;, family=&#39;arial&#39;, size=3.5) #Plot circular tree circular_tree %&gt;% open_tree(30) %&gt;% rotate_tree(90) 5.2 Genome quality genome_metadata %&gt;% summarise(completeness_mean=mean(completeness) %&gt;% round(2) %&gt;% as.character(), completeness_sd=sd(completeness) %&gt;% round(2) %&gt;% as.character(), contamination_mean=mean(contamination) %&gt;% round(2), contamination_sd=sd(contamination) %&gt;% round(2)) %&gt;% unite(&quot;Completeness&quot;,completeness_mean, completeness_sd, sep = &quot; ± &quot;, remove = TRUE) %&gt;% unite(&quot;Contamination&quot;,contamination_mean, contamination_sd, sep = &quot; ± &quot;, remove = TRUE) %&gt;% tt() tinytable_pjvrb64bvgqgdlgjek4j .table td.tinytable_css_hfokwr953e744w05u0h3, .table th.tinytable_css_hfokwr953e744w05u0h3 { border-bottom: solid 0.1em #d3d8dc; } Completeness Contamination 79.99 ± 15.48 2.19 ± 1.94 #Generate quality biplot genome_biplot &lt;- genome_metadata %&gt;% select(c(genome,domain,phylum,completeness,contamination,length)) %&gt;% arrange(match(genome, rev(genome_tree$tip.label))) %&gt;% #sort MAGs according to phylogenetic tree ggplot(aes(x=completeness,y=contamination,size=length,color=phylum)) + geom_point(alpha=0.7) + ylim(c(10,0)) + scale_color_manual(values=phylum_colors) + labs(y= &quot;Contamination&quot;, x = &quot;Completeness&quot;) + theme_classic() + theme(legend.position = &quot;none&quot;) #Generate contamination boxplot genome_contamination &lt;- genome_metadata %&gt;% ggplot(aes(y=contamination)) + ylim(c(10,0)) + geom_boxplot(colour = &quot;#999999&quot;, fill=&quot;#cccccc&quot;) + theme_void() + theme(legend.position = &quot;none&quot;, axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank(), plot.margin = unit(c(0, 0, 0.40, 0),&quot;inches&quot;)) #add bottom-margin (top, right, bottom, left) #Generate completeness boxplot genome_completeness &lt;- genome_metadata %&gt;% ggplot(aes(x=completeness)) + xlim(c(50,100)) + geom_boxplot(colour = &quot;#999999&quot;, fill=&quot;#cccccc&quot;) + theme_void() + theme(legend.position = &quot;none&quot;, axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank(), plot.margin = unit(c(0, 0, 0, 0.50),&quot;inches&quot;)) #add left-margin (top, right, bottom, left) #Render composite figure grid.arrange(grobs = list(genome_completeness,genome_biplot,genome_contamination), layout_matrix = rbind(c(1,1,1,1,1,1,1,1,1,1,1,4), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3))) 5.3 Functional overview # Aggregate basal GIFT into elements function_table &lt;- genome_gifts %&gt;% to.elements(., GIFT_db) # Generate basal tree function_tree &lt;- force.ultrametric(genome_tree, method=&quot;extend&quot;) %&gt;% ggtree(., size = 0.3) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** #Add phylum colors next to the tree tips function_tree &lt;- gheatmap(function_tree, phylum_heatmap, offset=0, width=0.1, colnames=FALSE) + scale_fill_manual(values=phylum_colors) + labs(fill=&quot;Phylum&quot;) #Reset fill scale to use a different colour profile in the heatmap function_tree &lt;- function_tree + new_scale_fill() #Add functions heatmap function_tree &lt;- gheatmap(function_tree, function_table, offset=0.5, width=3.5, colnames=FALSE) + vexpand(.08) + coord_cartesian(clip = &quot;off&quot;) + scale_fill_gradient(low = &quot;#f4f4f4&quot;, high = &quot;steelblue&quot;, na.value=&quot;white&quot;) + labs(fill=&quot;GIFT&quot;) #Reset fill scale to use a different colour profile in the heatmap function_tree &lt;- function_tree + new_scale_fill() # Add completeness barplots function_tree &lt;- function_tree + geom_fruit(data=genome_metadata, geom=geom_bar, grid.params=list(axis=&quot;x&quot;, text.size=2, nbreak = 1), axis.params=list(vline=TRUE), mapping = aes(x=length, y=genome, fill=completeness), offset = 3.8, orientation=&quot;y&quot;, stat=&quot;identity&quot;) + scale_fill_gradient(low = &quot;#cf8888&quot;, high = &quot;#a2cc87&quot;) + labs(fill=&quot;Genome\\ncompleteness&quot;) function_tree 5.4 Functional ordination # Generate the tSNE ordination tSNE_function &lt;- Rtsne(X=function_table, dims = 2, check_duplicates = FALSE) # Plot the ordination function_ordination &lt;- tSNE_function$Y %&gt;% as.data.frame() %&gt;% mutate(genome=rownames(function_table)) %&gt;% inner_join(genome_metadata, by=&quot;genome&quot;) %&gt;% rename(tSNE1=&quot;V1&quot;, tSNE2=&quot;V2&quot;) %&gt;% select(genome,phylum,tSNE1,tSNE2, length) %&gt;% ggplot(aes(x = tSNE1, y = tSNE2, color = phylum, size=length))+ geom_point(shape=16, alpha=0.7) + scale_color_manual(values=phylum_colors) + theme_minimal() + labs(color=&quot;Phylum&quot;, size=&quot;Genome size&quot;) + guides(color = guide_legend(override.aes = list(size = 5))) # enlarge Phylum dots in legend function_ordination 5.5 MAGs shared across transects genome_counts_rel &lt;- genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% column_to_rownames(., &quot;genome&quot;) genome_counts_rel_pa=1*(genome_counts_rel&gt;0) table_upset_analysis_cont=t(aggregate(t(genome_counts_rel_pa),by=list(sample_metadata$Transect),FUN=sum)[,-1]) colnames(table_upset_analysis_cont)=levels(as.factor(sample_metadata$Transect)) table_upset_analysis=(table_upset_analysis_cont&gt;0)*1 table_upset_analysis=data.frame(table_upset_analysis) table_upset_analysis=apply(table_upset_analysis,2,as.integer) rownames(table_upset_analysis) &lt;- rownames(genome_counts_rel_pa) locationcolors=c(&quot;#e5bd5b&quot;, &quot;#6b7398&quot;,&quot;#e2815a&quot;, &quot;#876b96&quot;) upset(as.data.frame(table_upset_analysis), keep.order = T, sets = rev(c(&quot;Aisa&quot;,&quot;Aran&quot;,&quot;Sentein&quot;,&quot;Tourmalet&quot;)), sets.bar.color= rev(locationcolors), mb.ratio = c(0.55, 0.45), order.by = &quot;freq&quot;) "],["community-composition.html", "Chapter 6 Community composition 6.1 Taxonomy overview 6.2 Taxonomy boxplot", " Chapter 6 Community composition load(&quot;data/data.Rdata&quot;) 6.1 Taxonomy overview 6.1.1 Stacked barplot genome_counts_filt_met&lt;-genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS normalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% #reduce to minimum number of columns left_join(., genome_metadata, by = join_by(genome == genome)) %&gt;% #append genome metadata left_join(., sample_metadata, by = join_by(sample == EHI_number)) %&gt;% #append sample metadata filter(count &gt; 0) #filter 0 counts genome_counts_filt_met$Elevation&lt;-as.factor(genome_counts_filt_met$Elevation) # Create an interaction variable for elevation and sample genome_counts_filt_met$interaction_var &lt;- interaction(genome_counts_filt_met$sample, genome_counts_filt_met$Elevation) # Plot stacked barplot ggplot(genome_counts_filt_met, aes(x=interaction_var,y=count,fill=phylum, group=phylum))+ #grouping enables keeping the same sorting of taxonomic units geom_bar(stat=&quot;identity&quot;, colour=&quot;white&quot;, linewidth=0.1)+ #plot stacked bars with white borders scale_fill_manual(values=phylum_colors) + labs(y = &quot;Relative abundance&quot;, x=&quot;Elevation (m)&quot;) + guides(fill = guide_legend(ncol = 3)) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), panel.background = element_blank(), panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(linewidth = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), legend.position = &quot;top&quot;, legend.title = element_blank(), legend.text = element_text(size=7))+ scale_x_discrete(labels = function(x) gsub(&quot;.*\\\\.&quot;, &quot;&quot;, x)) + facet_wrap(~Transect, scales = &quot;free&quot;, labeller = as_labeller(function(label) gsub(&quot;.*\\\\.&quot;, &quot;&quot;, label))) #only show elevation label 6.1.1.1 Number of bacteria phyla [1] 16 6.1.1.2 Bacteria phyla in Aisa transect phylum_summary_aisa &lt;- genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS normalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% left_join(sample_metadata, by = join_by(sample == EHI_number)) %&gt;% left_join(genome_metadata, by = join_by(genome == genome)) %&gt;% group_by(sample,phylum) %&gt;% summarise(relabun=sum(count)) %&gt;% left_join(sample_metadata, by = join_by(sample == EHI_number)) %&gt;% filter(Transect==&quot;Aisa&quot;)%&gt;% filter(relabun &gt; 0) # Number of bacterial phyla Aisa length(unique(phylum_summary_aisa$phylum)) [1] 13 # Bacteria phyla phylum_summary_aisa %&gt;% group_by(phylum) %&gt;% summarise(total_mean=mean(relabun*100, na.rm=TRUE), total_sd=sd(relabun*100, na.rm=TRUE)) %&gt;% mutate(total=str_c(round(total_mean,2),&quot;±&quot;,round(total_sd,2))) %&gt;% arrange(-total_mean) %&gt;% dplyr::select(phylum,total) %&gt;% tt() tinytable_r17a5h6b94krox3g06n8 .table td.tinytable_css_xn3kankv7c86c03qu6fk, .table th.tinytable_css_xn3kankv7c86c03qu6fk { border-bottom: solid 0.1em #d3d8dc; } phylum total p__Bacillota_A 42.18±15.99 p__Bacteroidota 39.09±17.57 p__Pseudomonadota 5.27±6.75 p__Bacillota 3.99±3.67 p__Verrucomicrobiota 3.53±3.26 p__Campylobacterota 3.29±3.44 p__Desulfobacterota 2.48±1.93 p__Fusobacteriota 1.35±1.33 p__Bacillota_C 1.29±1.53 p__Cyanobacteriota 0.82±0.49 p__Chlamydiota 0.7±0.63 p__Bacillota_B 0.53±0.41 p__Actinomycetota 0.18±0.09 6.1.1.3 Bacteria phyla in Aran transect phylum_summary_aran &lt;- genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS normalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% left_join(sample_metadata, by = join_by(sample == EHI_number)) %&gt;% left_join(genome_metadata, by = join_by(genome == genome)) %&gt;% group_by(sample,phylum) %&gt;% summarise(relabun=sum(count)) %&gt;% left_join(sample_metadata, by = join_by(sample == EHI_number)) %&gt;% filter(Transect==&quot;Aran&quot;)%&gt;% filter(relabun &gt; 0) # Number of bacterial phyla Aran length(unique(phylum_summary_aran$phylum)) [1] 14 # Bacteria phyla phylum_summary_aran %&gt;% group_by(phylum) %&gt;% summarise(total_mean=mean(relabun*100, na.rm=TRUE), total_sd=sd(relabun*100, na.rm=TRUE)) %&gt;% mutate(total=str_c(round(total_mean,2),&quot;±&quot;,round(total_sd,2))) %&gt;% arrange(-total_mean) %&gt;% dplyr::select(phylum,total) %&gt;% tt() tinytable_4ns4yt5d6j7cnfxnskdg .table td.tinytable_css_14rlwntjhpeswhkdojoo, .table th.tinytable_css_14rlwntjhpeswhkdojoo { border-bottom: solid 0.1em #d3d8dc; } phylum total p__Bacillota_A 41.7±16.74 p__Bacteroidota 36.85±14.71 p__Pseudomonadota 7.27±11.02 p__Campylobacterota 5.5±8.27 p__Bacillota 4.64±5.26 p__Fusobacteriota 4.01±8.68 p__Desulfobacterota 2.75±2.22 p__Verrucomicrobiota 2.38±3.15 p__Spirochaetota 1.22±1.19 p__Bacillota_C 1.14±1.18 p__Cyanobacteriota 0.72±0.54 p__Deferribacterota NA p__Bacillota_B 0.44±0.45 p__Actinomycetota 0.3±0.26 6.1.1.4 Bacteria phyla in Sentein transect phylum_summary_sentein &lt;- genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS normalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% left_join(sample_metadata, by = join_by(sample == EHI_number)) %&gt;% left_join(genome_metadata, by = join_by(genome == genome)) %&gt;% group_by(sample,phylum) %&gt;% summarise(relabun=sum(count)) %&gt;% left_join(sample_metadata, by = join_by(sample == EHI_number)) %&gt;% filter(Transect==&quot;Sentein&quot;)%&gt;% filter(relabun &gt; 0.) # Number of bacterial phyla Sentein length(unique(phylum_summary_sentein$phylum)) [1] 15 # Bacteria phyla phylum_summary_sentein %&gt;% group_by(phylum) %&gt;% summarise(total_mean=mean(relabun*100, na.rm=TRUE), total_sd=sd(relabun*100, na.rm=TRUE)) %&gt;% mutate(total=str_c(round(total_mean,2),&quot;±&quot;,round(total_sd,2))) %&gt;% arrange(-total_mean) %&gt;% dplyr::select(phylum,total) %&gt;% tt() tinytable_ly1q62y0v05bd2qf31hh .table td.tinytable_css_bst95jqykdlyzj2ezd6c, .table th.tinytable_css_bst95jqykdlyzj2ezd6c { border-bottom: solid 0.1em #d3d8dc; } phylum total p__Bacteroidota 40.72±14.71 p__Bacillota_A 34.82±14.88 p__Bacillota 6.17±10.94 p__Pseudomonadota 5.19±5.3 p__Campylobacterota 4.8±5.42 p__Desulfobacterota 4.77±8.22 p__Spirochaetota 4.76±5.8 p__Chlamydiota 3.19±3.26 p__Fusobacteriota 2.17±5.62 p__Verrucomicrobiota 1.34±1.49 p__Cyanobacteriota 0.78±0.37 p__Actinomycetota 0.77±1.29 p__Bacillota_C 0.61±0.51 p__Bacillota_B 0.16±0.07 p__Deferribacterota NA 6.1.1.5 Bacteria phyla in Tourmalet transect phylum_summary_tourmalet &lt;- genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS normalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% left_join(sample_metadata, by = join_by(sample == EHI_number)) %&gt;% left_join(genome_metadata, by = join_by(genome == genome)) %&gt;% group_by(sample,phylum) %&gt;% summarise(relabun=sum(count)) %&gt;% left_join(sample_metadata, by = join_by(sample == EHI_number)) %&gt;% filter(Transect==&quot;Tourmalet&quot;) # Number of bacterial phyla Tourmalet length(unique(phylum_summary_tourmalet$phylum)) [1] 16 # Bacteria phyla phylum_summary_tourmalet %&gt;% group_by(phylum) %&gt;% summarise(total_mean=mean(relabun*100, na.rm=TRUE), total_sd=sd(relabun*100, na.rm=TRUE)) %&gt;% mutate(total=str_c(round(total_mean,2),&quot;±&quot;,round(total_sd,2))) %&gt;% arrange(-total_mean) %&gt;% dplyr::select(phylum,total) %&gt;% tt() tinytable_lmpjxry17lz21ino26pe .table td.tinytable_css_7f4ka6olj7yag99907wv, .table th.tinytable_css_7f4ka6olj7yag99907wv { border-bottom: solid 0.1em #d3d8dc; } phylum total p__Bacillota_A 41.87±15.42 p__Bacteroidota 39.29±15.9 p__Bacillota 5.87±5.94 p__Pseudomonadota 5.3±5.15 p__Campylobacterota 2.32±2.71 p__Desulfobacterota 1.58±2.02 p__Verrucomicrobiota 0.94±1.13 p__Bacillota_C 0.83±0.53 p__Cyanobacteriota 0.53±0.82 p__Fusobacteriota 0.4±0.81 p__Actinomycetota 0.39±0.73 p__Spirochaetota 0.23±0.51 p__Deferribacterota 0.16±0.51 p__Bacillota_B 0.16±0.23 p__Chlamydiota 0.11±0.53 p__Synergistota 0.03±0.16 6.1.2 Phylum relative abundances phylum_summary &lt;- genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS normalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% left_join(sample_metadata, by = join_by(sample == EHI_number)) %&gt;% left_join(genome_metadata, by = join_by(genome == genome)) %&gt;% group_by(sample,phylum) %&gt;% summarise(relabun=sum(count)) phylum_summary %&gt;% group_by(phylum) %&gt;% summarise(total_mean=mean(relabun*100, na.rm=T), total_sd=sd(relabun*100, na.rm=T)) %&gt;% mutate(total=str_c(round(total_mean,2),&quot;±&quot;,round(total_sd,2))) %&gt;% arrange(-total_mean) %&gt;% dplyr::select(phylum,total) %&gt;% tt() tinytable_6b6rcfbby7hh1l1nda4p .table td.tinytable_css_jev59ii7g6opdf8j57bf, .table th.tinytable_css_jev59ii7g6opdf8j57bf { border-bottom: solid 0.1em #d3d8dc; } phylum total p__Bacillota_A 40.6±15.93 p__Bacteroidota 38.3±15.88 p__Pseudomonadota 5.83±7.87 p__Bacillota 4.59±6.37 p__Campylobacterota 3.47±5.63 p__Desulfobacterota 2.68±4.05 p__Verrucomicrobiota 1.53±2.43 p__Bacillota_C 0.95±1.05 p__Fusobacteriota 0.91±3.7 p__Cyanobacteriota 0.4±0.6 p__Spirochaetota 0.22±0.97 p__Bacillota_B 0.19±0.32 p__Actinomycetota 0.17±0.52 p__Chlamydiota 0.1±0.61 p__Deferribacterota 0.05±0.27 p__Synergistota 0.01±0.08 phylum_arrange &lt;- phylum_summary %&gt;% group_by(phylum) %&gt;% summarise(mean=mean(relabun)) %&gt;% arrange(-mean) %&gt;% select(phylum) %&gt;% pull() phylum_summary %&gt;% filter(phylum %in% phylum_arrange) %&gt;% mutate(phylum=factor(phylum,levels=rev(phylum_arrange))) %&gt;% ggplot(aes(x=relabun, y=phylum, group=phylum, color=phylum)) + scale_color_manual(values=phylum_colors[rev(phylum_arrange)]) + geom_jitter(alpha=0.5) + theme_minimal() 6.2 Taxonomy boxplot 6.2.1 Family family_summary &lt;- genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS normalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% #reduce to minimum number of columns left_join(sample_metadata, by = join_by(sample == EHI_number)) %&gt;% #append sample metadata left_join(., genome_metadata, by = join_by(genome == genome)) %&gt;% #append genome metadata group_by(sample,family) %&gt;% summarise(relabun=sum(count)) family_summary %&gt;% group_by(family) %&gt;% summarise(mean=mean(relabun),sd=sd(relabun)) %&gt;% arrange(-mean) %&gt;% tt() tinytable_gjduwvhhxmv6uu4x9i88 .table td.tinytable_css_togaitob5dzufd743tnk, .table th.tinytable_css_togaitob5dzufd743tnk { border-bottom: solid 0.1em #d3d8dc; } family mean sd f__Lachnospiraceae 2.798160e-01 0.1323151296 f__Bacteroidaceae 2.132576e-01 0.1045524501 f__Tannerellaceae 1.122881e-01 0.0756060991 f__ 6.556348e-02 0.0820773598 f__Helicobacteraceae 3.474580e-02 0.0562678198 f__Marinifilaceae 3.441228e-02 0.0255200299 f__UBA3700 2.777694e-02 0.0330290932 f__Desulfovibrionaceae 2.680077e-02 0.0404627923 f__Ruminococcaceae 2.435712e-02 0.0226880677 f__Rikenellaceae 1.900710e-02 0.0176572117 f__Erysipelotrichaceae 1.767814e-02 0.0269603016 f__Oscillospiraceae 1.696763e-02 0.0140960977 f__Coprobacillaceae 1.273032e-02 0.0336927310 f__Mycoplasmoidaceae 1.210259e-02 0.0270262454 f__Enterobacteriaceae 1.077111e-02 0.0651262303 f__Fusobacteriaceae 9.053249e-03 0.0370456782 f__Akkermansiaceae 8.677367e-03 0.0108836065 f__CAG-239 7.003283e-03 0.0098019806 f__LL51 6.656864e-03 0.0216352391 f__Anaerotignaceae 6.551732e-03 0.0074061779 f__UBA3830 5.185462e-03 0.0171469663 f__Gastranaerophilaceae 4.003188e-03 0.0059975426 f__Muribaculaceae 3.991492e-03 0.0409006227 f__Butyricicoccaceae 3.919222e-03 0.0050520985 f__CAG-274 3.051617e-03 0.0060828463 f__Acutalibacteraceae 2.723615e-03 0.0047471119 f__Anaerovoracaceae 2.683446e-03 0.0040557355 f__Pumilibacteraceae 2.544525e-03 0.0041701010 f__UBA1997 2.383785e-03 0.0080270055 f__CAG-508 2.324078e-03 0.0063109845 f__Brevinemataceae 2.191263e-03 0.0097068603 f__Peptococcaceae 1.937490e-03 0.0031961496 f__Rhodocyclaceae 1.936615e-03 0.0194735479 f__DTU072 1.792884e-03 0.0055918788 f__UBA660 1.742458e-03 0.0054664441 f__MGBC116941 1.714356e-03 0.0090980913 f__Massilibacillaceae 1.502892e-03 0.0024528334 f__Eggerthellaceae 1.377525e-03 0.0037174906 f__Enterococcaceae 8.454990e-04 0.0070848098 f__CALTSX01 5.198677e-04 0.0053270584 f__Chlamydiaceae 5.170637e-04 0.0030492819 f__Mucispirillaceae 4.593259e-04 0.0026630822 f__CALVMC01 4.496143e-04 0.0018583730 f__Clostridiaceae 4.212744e-04 0.0029132915 f__Acidaminococcaceae 4.004438e-04 0.0015777220 f__UBA1242 3.719350e-04 0.0014704441 f__RUG11792 3.717143e-04 0.0019425248 f__CAG-465 3.497207e-04 0.0015695529 f__Microbacteriaceae 3.199134e-04 0.0026999464 f__CAG-288 2.985206e-04 0.0017514912 f__Streptococcaceae 2.479473e-04 0.0018438849 f__Anaplasmataceae 2.435113e-04 0.0021508694 f__Hepatoplasmataceae 2.362221e-04 0.0024205565 f__Aeromonadaceae 2.327082e-04 0.0022486997 f__Peptostreptococcaceae 1.412306e-04 0.0014471826 f__Rhodobacteraceae 1.371859e-04 0.0014057373 f__Xanthomonadaceae 9.245878e-05 0.0009474206 f__Synergistaceae 7.840493e-05 0.0008034115 f__Lactobacillaceae 4.203166e-05 0.0004306963 f__Turicibacteraceae 0.000000e+00 0.0000000000 family_arrange &lt;- family_summary %&gt;% group_by(family) %&gt;% summarise(mean=sum(relabun)) %&gt;% arrange(-mean) %&gt;% select(family) %&gt;% pull() family_summary %&gt;% left_join(genome_metadata %&gt;% select(family,phylum) %&gt;% unique(),by=join_by(family==family)) %&gt;% left_join(sample_metadata,by=join_by(sample==EHI_number)) %&gt;% filter(family %in% family_arrange[1:20]) %&gt;% mutate(family=factor(family,levels=rev(family_arrange[1:20]))) %&gt;% filter(relabun &gt; 0) %&gt;% ggplot(aes(x=relabun, y=family, group=family, color=phylum)) + scale_color_manual(values=phylum_colors[-8]) + geom_jitter(alpha=0.5) + theme_minimal() + labs(y=&quot;Family&quot;, x=&quot;Relative abundance&quot;, color=&quot;Phylum&quot;) 6.2.2 Genus genus_summary &lt;- genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS normalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% #reduce to minimum number of columns left_join(sample_metadata, by = join_by(sample == EHI_number)) %&gt;% #append sample metadata left_join(genome_metadata, by = join_by(genome == genome)) %&gt;% #append genome metadata group_by(sample,genus) %&gt;% summarise(relabun=sum(count)) %&gt;% filter(genus != &quot;g__&quot;) genus_summary %&gt;% group_by(genus) %&gt;% summarise(mean=mean(relabun),sd=sd(relabun)) %&gt;% arrange(-mean) %&gt;% tt() tinytable_6oenxu73vo4qu6gdu2f0 .table td.tinytable_css_r7w7intllud627371zia, .table th.tinytable_css_r7w7intllud627371zia { border-bottom: solid 0.1em #d3d8dc; } genus mean sd g__Bacteroides 1.725925e-01 0.0994470682 g__Parabacteroides 1.103381e-01 0.0767310570 g__Roseburia 5.077999e-02 0.0743624266 g__Phocaeicola 3.874581e-02 0.0435882803 g__JAAYNV01 3.526845e-02 0.0735025649 g__Odoribacter 3.376557e-02 0.0254845145 g__Helicobacter_J 2.983823e-02 0.0400574428 g__CAG-95 1.659217e-02 0.0240471187 g__Alistipes 1.555908e-02 0.0156740595 g__Kineothrix 1.544351e-02 0.0584815409 g__MGBC136627 1.451743e-02 0.0230914933 g__Mycoplasmoides 1.139564e-02 0.0269054026 g__Hungatella_A 1.113992e-02 0.0670243947 g__Anaerotruncus 1.006956e-02 0.0112599653 g__Velocimicrobium 9.687390e-03 0.0159382742 g__Enterocloster 9.506772e-03 0.0098451213 g__Fusobacterium_A 9.053249e-03 0.0370456782 g__Acetatifactor 8.989245e-03 0.0139417426 g__Akkermansia 8.677367e-03 0.0108836065 g__Clostridium_Q 7.770136e-03 0.0138182274 g__Bilophila 7.347777e-03 0.0088824113 g__Lawsonia 7.130440e-03 0.0356135290 g__Intestinimonas 6.565049e-03 0.0061282758 g__Lacrimispora 6.397950e-03 0.0078443852 g__Lachnotalea 5.679000e-03 0.0086820363 g__Desulfovibrio 5.604601e-03 0.0085133819 g__MGBC140009 5.533083e-03 0.0134005650 g__Extibacter 5.301402e-03 0.0438086011 g__Coprobacillus 5.255707e-03 0.0160178991 g__Ventrimonas 5.038137e-03 0.0083320432 g__NHYM01 4.907573e-03 0.0427691471 g__Dielma 4.863951e-03 0.0065480876 g__Eisenbergiella 4.698317e-03 0.0069699563 g__CHH4-2 4.463440e-03 0.0044701587 g__RGIG4733 4.252340e-03 0.0103379868 g__Negativibacillus 4.038946e-03 0.0054742770 g__Thomasclavelia 3.858196e-03 0.0117540652 g__Hungatella 3.440712e-03 0.0046402483 g__C-19 3.334625e-03 0.0097460323 g__Citrobacter 3.199667e-03 0.0207814167 g__UMGS1251 2.883830e-03 0.0066485409 g__Oscillibacter 2.697945e-03 0.0038453712 g__CAZU01 2.687821e-03 0.0062923086 g__Breznakia 2.569391e-03 0.0076690515 g__Copromonas 2.559264e-03 0.0037548588 g__Mailhella 2.486840e-03 0.0034349591 g__Pseudoflavonifractor 2.349829e-03 0.0028250595 g__Intestinibacillus 2.290036e-03 0.0027696754 g__Escherichia 2.232632e-03 0.0160096591 g__Brevinema 2.191263e-03 0.0097068603 g__MGBC165282 2.146060e-03 0.0051869977 g__Rikenella 2.123615e-03 0.0033608364 g__Morganella 2.019952e-03 0.0206983454 g__Robinsoniella 2.000942e-03 0.0198167695 g__Parabacteroides_B 1.950084e-03 0.0064473560 g__Hafnia 1.939718e-03 0.0112340944 g__Fluviibacter 1.936615e-03 0.0194735479 g__JAIHAL01 1.909337e-03 0.0043937983 g__CAJLXD01 1.809579e-03 0.0041385093 g__Marseille-P3106 1.729807e-03 0.0025326958 g__UBA866 1.535703e-03 0.0026149730 g__MGBC116941 1.433278e-03 0.0090996222 g__Duncaniella 1.426611e-03 0.0146184139 g__Stoquefichus 1.418761e-03 0.0046100976 g__Limenecus 1.393591e-03 0.0029887106 g__JAAYQI01 1.271605e-03 0.0020016472 g__RGIG6463 1.268390e-03 0.0028982477 g__Lawsonibacter 1.177407e-03 0.0016547788 g__Scatousia 1.174334e-03 0.0033329854 g__MGBC101980 1.147280e-03 0.0043856608 g__Hespellia 1.102861e-03 0.0080033094 g__Clostridium_AQ 1.075206e-03 0.0036972777 g__Tidjanibacter 1.062223e-03 0.0029392145 g__Fournierella 1.021882e-03 0.0022586979 g__Eggerthella 9.946416e-04 0.0031801193 g__OM05-12 9.566920e-04 0.0022952664 g__CALXRO01 9.555497e-04 0.0060396607 g__CALURL01 9.088777e-04 0.0021653921 g__Harryflintia 8.906013e-04 0.0020436518 g__MGBC133411 8.872215e-04 0.0021982622 g__Scatacola_A 8.685187e-04 0.0028129788 g__JALFVM01 8.392923e-04 0.0020111922 g__Bacteroides_G 8.358400e-04 0.0024999742 g__Ventrisoma 8.334289e-04 0.0015664780 g__CAG-269 8.185801e-04 0.0029513181 g__IOR16 8.132853e-04 0.0024147185 g__CAG-873 7.794020e-04 0.0079864937 g__Buttiauxella 7.562352e-04 0.0062186311 g__14-2 7.242943e-04 0.0014229865 g__Ureaplasma 7.069544e-04 0.0022811697 g__Scatocola 6.903112e-04 0.0024144468 g__Dysosmobacter 6.880800e-04 0.0012817741 g__Muricomes 6.843281e-04 0.0023723812 g__Anaerovorax 6.779999e-04 0.0017521412 g__UBA7185 6.690992e-04 0.0018509746 g__Butyricimonas 6.467068e-04 0.0016133034 g__MGBC131033 6.443020e-04 0.0015998136 g__Evtepia 6.309865e-04 0.0010453519 g__CAJMNU01 6.281598e-04 0.0008908563 g__Beduini 5.914594e-04 0.0013148807 g__Muribaculum 5.550053e-04 0.0056871120 g__Scandinavium 5.392506e-04 0.0034848792 g__Lactonifactor 5.340135e-04 0.0013169750 g__CALTSX01 5.198677e-04 0.0053270584 g__CAG-485 5.128011e-04 0.0052546481 g__Merdicola 5.109908e-04 0.0018183944 g__Ventrenecus 4.954074e-04 0.0024443063 g__UMGS1202 4.885966e-04 0.0016971062 g__Copranaerobaculum 4.827706e-04 0.0029167211 g__NSJ-61 4.574747e-04 0.0014044413 g__Faecimonas 4.467204e-04 0.0017621834 g__RGIG8482 4.415175e-04 0.0020991286 g__Faecivivens 4.313538e-04 0.0008927244 g__RGIG9287 4.228193e-04 0.0021002237 g__Sarcina 4.212744e-04 0.0029132915 g__Blautia_A 4.144742e-04 0.0010034450 g__Scatenecus 4.103021e-04 0.0026534948 g__Phascolarctobacterium 4.004438e-04 0.0015777220 g__Raoultibacter 3.828831e-04 0.0011609168 g__Caccovivens 3.719350e-04 0.0014704441 g__CAJTFG01 3.690163e-04 0.0010223015 g__HGM11386 3.642876e-04 0.0016060882 g__CAG-465 3.497207e-04 0.0015695529 g__Amedibacillus 3.457091e-04 0.0023834921 g__Enterococcus_A 3.276668e-04 0.0023252026 g__UMGS2016 3.212305e-04 0.0012912770 g__Emergencia 3.205926e-04 0.0009702487 g__Holdemania 3.098282e-04 0.0010287045 g__Blautia 3.095400e-04 0.0011077317 g__Protoclostridium 3.067429e-04 0.0010837140 g__Fimivivens 3.043536e-04 0.0008104254 g__RGIG7389 2.985465e-04 0.0005848732 g__CAG-345 2.985206e-04 0.0017514912 g__UBA7173 2.963722e-04 0.0030369115 g__Bariatricus 2.928468e-04 0.0008379528 g__Agathobaculum 2.787287e-04 0.0016389968 g__CALXDZ01 2.660973e-04 0.0006132220 g__UBA940 2.621830e-04 0.0009075589 g__Microbacterium 2.563077e-04 0.0026263723 g__Aminipila 2.506050e-04 0.0007479203 g__Lactococcus 2.479473e-04 0.0018438849 g__Wolbachia 2.435113e-04 0.0021508694 g__Paramuribaculum 2.432436e-04 0.0024925056 g__Hepatoplasma 2.362221e-04 0.0024205565 g__Aeromonas 2.327082e-04 0.0022486997 g__WRHT01 2.186196e-04 0.0006955370 g__Zhenpiania 2.116559e-04 0.0012708329 g__UBA5026 2.112884e-04 0.0009778887 g__UMGS1663 1.999591e-04 0.0007286034 g__MGBC107952 1.752651e-04 0.0009887232 g__CALXEL01 1.725652e-04 0.0013728689 g__CAG-273 1.482564e-04 0.0007864691 g__Clostridioides 1.412306e-04 0.0014471826 g__Paracoccus 1.371859e-04 0.0014057373 g__JAAWBF01 1.286984e-04 0.0006144643 g__JAFLTL01 1.270703e-04 0.0013020827 g__Bacteroides_H 1.267213e-04 0.0012985068 g__RUG12867 9.254620e-05 0.0006129332 g__Stenotrophomonas 9.245878e-05 0.0009474206 g__Rahnella 8.365618e-05 0.0008059384 g__Lumbricidophila 6.360575e-05 0.0006517650 g__UBA3263 5.098641e-05 0.0005224553 g__Fructobacillus 4.203166e-05 0.0004306963 g__Clostridium 0.000000e+00 0.0000000000 g__Turicibacter 0.000000e+00 0.0000000000 genus_arrange &lt;- genus_summary %&gt;% group_by(genus) %&gt;% summarise(mean=sum(relabun)) %&gt;% filter(genus != &quot;g__&quot;)%&gt;% arrange(-mean) %&gt;% select(genus) %&gt;% mutate(genus= sub(&quot;^g__&quot;, &quot;&quot;, genus)) %&gt;% pull() genus_summary %&gt;% left_join(genome_metadata %&gt;% select(genus,phylum) %&gt;% unique(),by=join_by(genus==genus)) %&gt;% left_join(sample_metadata,by=join_by(sample==EHI_number)) %&gt;% mutate(genus= sub(&quot;^g__&quot;, &quot;&quot;, genus)) %&gt;% filter(genus %in% genus_arrange[1:20]) %&gt;% mutate(genus=factor(genus,levels=rev(genus_arrange[1:20]))) %&gt;% filter(relabun &gt; 0) %&gt;% ggplot(aes(x=relabun, y=genus, group=genus, color=phylum)) + scale_color_manual(values=phylum_colors) + geom_jitter(alpha=0.5) + theme_minimal() + labs(y=&quot;Genus&quot;, x=&quot;Relative abundance&quot;, color=&quot;Phylum&quot;) "],["diversity-analyses.html", "Chapter 7 Diversity analyses 7.1 Alpha diversity 7.2 Beta diversity", " Chapter 7 Diversity analyses load(&quot;data/data.Rdata&quot;) 7.1 Alpha diversity # Calculate Hill numbers richness &lt;- genome_counts_filt %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 0) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(richness = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) neutral &lt;- genome_counts_filt %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 1) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(neutral = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) phylogenetic &lt;- genome_counts_filt %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 1, tree = genome_tree) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(phylogenetic = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) # Aggregate basal GIFT into elements #Get list of present MAGs present_MAGs &lt;- genome_counts_filt %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% filter(rowSums(.[, -1]) != 0) %&gt;% rownames() #Align KEGG annotations with present MAGs and remove all-zero and all-one traits present_MAGs &lt;- present_MAGs[present_MAGs %in% rownames(genome_gifts)] genome_gifts_filt &lt;- genome_gifts[present_MAGs,] %&gt;% select_if(~!all(. == 0)) %&gt;% #remove all-zero modules select_if(~!all(. == 1)) #remove all-one modules #Filter count table to only contain present MAGs after KEGG filtering genome_counts_filt_filt &lt;- genome_counts_filt %&gt;% column_to_rownames(var = &quot;genome&quot;) genome_counts_filt_filt &lt;- genome_counts_filt_filt[present_MAGs,] dist &lt;- genome_gifts_filt %&gt;% to.elements(., GIFT_db) %&gt;% traits2dist(., method = &quot;gower&quot;) functional &lt;- genome_counts_filt_filt %&gt;% #column_to_rownames(var = &quot;genome&quot;) %&gt;% #dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 1, dist = dist) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(functional = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) %&gt;% mutate(functional = if_else(is.nan(functional), 1, functional)) # Merge all metrics alpha_div &lt;- richness %&gt;% full_join(neutral, by = join_by(sample == sample)) %&gt;% full_join(phylogenetic, by = join_by(sample == sample)) %&gt;% full_join(functional, by = join_by(sample == sample)) alpha_div %&gt;% pivot_longer(-sample, names_to = &quot;alpha&quot;, values_to = &quot;value&quot;) %&gt;% left_join(sample_metadata, by = join_by(sample == EHI_number)) %&gt;% group_by(alpha)%&gt;% summarise( Aisa_mean=mean(value[Transect==&quot;Aisa&quot;], na.rm=T), Aisa_sd=sd(value[Transect==&quot;Aisa&quot;], na.rm=T), Aran_mean=mean(value[Transect==&quot;Aran&quot;], na.rm=T), Aran_sd=sd(value[Transect==&quot;Aran&quot;], na.rm=T), Sentein_mean=mean(value[Transect==&quot;Sentein&quot;], na.rm=T), Sentein_sd=sd(value[Transect==&quot;Sentein&quot;], na.rm=T), Tourmalet_mean=mean(value[Transect==&quot;Tourmalet&quot;], na.rm=T), Tourmalet_sd=sd(value[Transect==&quot;Tourmalet&quot;], na.rm=T))%&gt;% mutate( Aisa=str_c(round(Aisa_mean,2),&quot;±&quot;,round(Aisa_sd,2)), Aran=str_c(round(Aran_mean,2),&quot;±&quot;,round(Aran_sd,2)), Sentein=str_c(round(Sentein_mean,2),&quot;±&quot;,round(Sentein_sd,2)), Tourmalet=str_c(round(Tourmalet_mean,2),&quot;±&quot;,round(Tourmalet_sd,2))) %&gt;% arrange(-Aisa_mean) %&gt;% dplyr::select(alpha,Aisa,Aran,Sentein,Tourmalet) %&gt;% tt() tinytable_rxkydepas6z4i96htmjx .table td.tinytable_css_cikbay9rg3h9v0ui6dmr, .table th.tinytable_css_cikbay9rg3h9v0ui6dmr { border-bottom: solid 0.1em #d3d8dc; } alpha Aisa Aran Sentein Tourmalet richness 198.77±65.73 153.32±72.26 257.32±71.08 245.04±68.73 neutral 87.81±36.55 71.13±36.69 110.98±45.84 101.5±43.7 phylogenetic 4.98±1.13 4.81±1.12 5.41±0.86 5.29±0.9 functional 1.5±0.05 1.5±0.06 1.52±0.03 1.5±0.04 alpha_div %&gt;% pivot_longer(-sample, names_to = &quot;metric&quot;, values_to = &quot;value&quot;) %&gt;% left_join(., sample_metadata, by = join_by(sample == EHI_number)) %&gt;% mutate(metric=factor(metric,levels=c(&quot;richness&quot;,&quot;neutral&quot;,&quot;phylogenetic&quot;,&quot;functional&quot;))) %&gt;% ggplot(aes(y = value, x = Transect, group=Transect, color=Transect, fill=Transect)) + geom_boxplot(outlier.shape = NA) + geom_jitter(alpha=0.5) + scale_color_manual(name=&quot;Transect&quot;, breaks=c(&quot;Aisa&quot;,&quot;Aran&quot;,&quot;Sentein&quot;,&quot;Tourmalet&quot;), labels=c(&quot;Aisa&quot;,&quot;Aran&quot;,&quot;Sentein&quot;,&quot;Tourmalet&quot;), values=c(&quot;#e5bd5b&quot;, &quot;#6b7398&quot;,&quot;#e2815a&quot;, &quot;#876b96&quot;)) + scale_fill_manual(name=&quot;Transect&quot;, breaks=c(&quot;Aisa&quot;,&quot;Aran&quot;,&quot;Sentein&quot;,&quot;Tourmalet&quot;), labels=c(&quot;Aisa&quot;,&quot;Aran&quot;,&quot;Sentein&quot;,&quot;Tourmalet&quot;), values=c(&quot;#e5bd5b50&quot;, &quot;#6b739850&quot;,&quot;#e2815a50&quot;, &quot;#876b9650&quot;)) + facet_wrap(. ~ metric, scales = &quot;free&quot;, ncol=4) + coord_cartesian(xlim = c(1, NA)) + stat_compare_means(size=2) + theme_classic() + theme( strip.background = element_blank(), panel.grid.minor.x = element_line(size = .1, color = &quot;grey&quot;), axis.text.x = element_text(angle = 45, hjust = 1) ) + ylab(&quot;Alpha diversity&quot;) 7.1.1 Regression plots 7.1.1.1 Richness diversity columns &lt;- c(&quot;richness&quot;,&quot;neutral&quot;,&quot;phylo&quot;,&quot;func&quot;,&quot;mapped&quot;,&quot;total&quot;) alpha_div %&gt;% select(sample,richness) %&gt;% pivot_longer(-sample, names_to = &quot;data&quot;, values_to = &quot;value&quot;) %&gt;% mutate(data = factor(data, levels = columns)) %&gt;% left_join(sample_metadata, by = join_by(sample == EHI_number)) %&gt;% ggplot(aes(x = Elevation, y = value)) + geom_point() + geom_smooth(method = lm) + facet_wrap(~ factor(Transect))+ labs(x = &quot;Elevation (m)&quot;) 7.1.1.2 Neutral diversity alpha_div %&gt;% select(sample,neutral) %&gt;% pivot_longer(-sample, names_to = &quot;data&quot;, values_to = &quot;value&quot;) %&gt;% mutate(data = factor(data, levels = columns)) %&gt;% left_join(sample_metadata, by = join_by(sample == EHI_number)) %&gt;% ggplot(aes(x = Elevation, y = value)) + geom_point() + geom_smooth(method = lm) + facet_wrap(~ factor(Transect))+ labs(x = &quot;Elevation (m)&quot;) 7.1.1.3 Phylogenetic diversity alpha_div %&gt;% select(sample,phylogenetic) %&gt;% pivot_longer(-sample, names_to = &quot;data&quot;, values_to = &quot;value&quot;) %&gt;% mutate(data = factor(data, levels = columns)) %&gt;% left_join(sample_metadata, by = join_by(sample == EHI_number)) %&gt;% ggplot(aes(x = Elevation, y = value)) + geom_point() + geom_smooth(method = lm) + facet_wrap(~ factor(Transect))+ labs(x = &quot;Elevation (m)&quot;) 7.1.1.4 Functional diversities alpha_div %&gt;% select(sample,functional) %&gt;% pivot_longer(-sample, names_to = &quot;data&quot;, values_to = &quot;value&quot;) %&gt;% mutate(data = factor(data, levels = columns)) %&gt;% left_join(sample_metadata, by = join_by(sample == EHI_number)) %&gt;% ggplot(aes(x = Elevation, y = value)) + geom_point() + geom_smooth(method = lm) + facet_wrap(~ factor(Transect))+ labs(x = &quot;Elevation (m)&quot;) 7.1.2 Mixed models 7.1.2.1 Richness diversity richness_cor&lt;-alpha_div %&gt;% left_join(sample_metadata, by = join_by(sample == EHI_number)) %&gt;% lmerTest::lmer(richness ~ log(sequencing_depth) + Elevation*Transect + (1 | Sampling_point), data = ., REML = FALSE) %&gt;% broom.mixed::tidy() %&gt;% tt() tinytable_1mfx4gdsbcnyarxel5ar .table td.tinytable_css_v3que28lozndyw4p0t8n, .table th.tinytable_css_v3que28lozndyw4p0t8n { border-bottom: solid 0.1em #d3d8dc; } effect group term estimate std.error statistic df p.value fixed NA (Intercept) -1.556876e+03 213.86817441 -7.279608 102.67218 6.967323e-11 fixed NA log(sequencing_depth) 1.089104e+02 11.22012642 9.706700 101.19457 3.904741e-16 fixed NA Elevation -5.945361e-02 0.05333190 -1.114785 19.97815 2.781739e-01 fixed NA TransectAran -1.456675e+02 95.32890330 -1.528052 19.77139 1.423407e-01 fixed NA TransectSentein -1.282416e+02 98.14650386 -1.306634 20.96734 2.054881e-01 fixed NA TransectTourmalet -1.937802e+02 91.46019166 -2.118739 20.50091 4.650671e-02 fixed NA Elevation:TransectAran 9.264522e-02 0.06209640 1.491958 19.59034 1.516391e-01 fixed NA Elevation:TransectSentein 1.120611e-01 0.06399044 1.751216 21.21597 9.435497e-02 fixed NA Elevation:TransectTourmalet 1.204621e-01 0.05764375 2.089769 20.55707 4.926134e-02 ran_pars Sampling_point sd__(Intercept) 1.411515e+01 NA NA NA NA ran_pars Residual sd__Observation 4.636663e+01 NA NA NA NA 7.1.2.2 Neutral diversity neutral_cor&lt;-alpha_div %&gt;% left_join(sample_metadata, by = join_by(sample == EHI_number)) %&gt;% lmerTest::lmer(neutral ~ log(sequencing_depth) + Elevation*Transect + (1|Sampling_point), data = ., REML = FALSE) %&gt;% broom.mixed::tidy() %&gt;% tt() tinytable_oaatuu0ksxd33y7uk2rg .table td.tinytable_css_zd4jys4pn5ixt0b1jnch, .table th.tinytable_css_zd4jys4pn5ixt0b1jnch { border-bottom: solid 0.1em #d3d8dc; } effect group term estimate std.error statistic df p.value fixed NA (Intercept) -503.46092882 155.88510189 -3.229692 102.94139 1.663714e-03 fixed NA log(sequencing_depth) 38.53316355 8.30102716 4.641975 102.38427 1.026312e-05 fixed NA Elevation -0.04029799 0.03545720 -1.136525 17.82419 2.707869e-01 fixed NA TransectAran -69.54734931 63.33417863 -1.098101 17.59583 2.869598e-01 fixed NA TransectSentein -73.46205358 65.46915017 -1.122087 19.00703 2.758013e-01 fixed NA TransectTourmalet -97.07019202 60.91625317 -1.593502 18.45946 1.280264e-01 fixed NA Elevation:TransectAran 0.04308459 0.04122860 1.045017 17.37945 3.103332e-01 fixed NA Elevation:TransectSentein 0.05934449 0.04271777 1.389222 19.28043 1.806027e-01 fixed NA Elevation:TransectTourmalet 0.05957175 0.03839934 1.551374 18.50873 1.377430e-01 ran_pars Sampling_point sd__(Intercept) 6.64785214 NA NA NA NA ran_pars Residual sd__Observation 34.74128890 NA NA NA NA 7.1.2.3 Phylogenetic diversity phylo_cor&lt;-alpha_div %&gt;% left_join(sample_metadata, by = join_by(sample == EHI_number)) %&gt;% lmerTest::lmer(phylogenetic ~ log(sequencing_depth) + Elevation*Transect + (1 | Sampling_point), data = ., REML = FALSE) %&gt;% broom.mixed::tidy() %&gt;% tt() tinytable_bgd6wf9whpft59izzfob .table td.tinytable_css_rgfxtrhpym8kyfm41riy, .table th.tinytable_css_rgfxtrhpym8kyfm41riy { border-bottom: solid 0.1em #d3d8dc; } effect group term estimate std.error statistic df p.value fixed NA (Intercept) 7.9723798522 4.1857148123 1.9046639 103.16183 0.05960912 fixed NA log(sequencing_depth) -0.0638680767 0.2249894059 -0.2838715 103.46820 0.77707614 fixed NA Elevation -0.0012366705 0.0008881157 -1.3924655 18.17137 0.18058793 fixed NA TransectAran -0.7649418524 1.5853816744 -0.4824970 17.90442 0.63529916 fixed NA TransectSentein -1.7363345713 1.6449704378 -1.0555415 19.63947 0.30399034 fixed NA TransectTourmalet -3.2228577094 1.5284405960 -2.1085921 18.97101 0.04850288 fixed NA Elevation:TransectAran 0.0002832543 0.0010313958 0.2746320 17.63476 0.78679044 fixed NA Elevation:TransectSentein 0.0014224302 0.0010740261 1.3243907 19.95532 0.20034248 fixed NA Elevation:TransectTourmalet 0.0022220955 0.0009635780 2.3060877 19.01432 0.03253476 ran_pars Sampling_point sd__(Intercept) 0.0488567254 NA NA NA NA ran_pars Residual sd__Observation 0.9517063007 NA NA NA NA 7.1.2.4 Functional diversities func_cor&lt;-alpha_div %&gt;% left_join(sample_metadata, by = join_by(sample == EHI_number)) %&gt;% lmerTest::lmer(functional ~ log(sequencing_depth) + Elevation*Transect + (1 | Sampling_point), data = ., REML = FALSE) %&gt;% broom.mixed::tidy() %&gt;% tt() tinytable_j8yg2mncak46j1yeqn76 .table td.tinytable_css_l2uc02mys5ptj7c9j1s5, .table th.tinytable_css_l2uc02mys5ptj7c9j1s5 { border-bottom: solid 0.1em #d3d8dc; } effect group term estimate std.error statistic df p.value fixed NA (Intercept) 1.604632e+00 2.146120e-01 7.47689687 105 2.400124e-11 fixed NA log(sequencing_depth) -5.072130e-03 1.154428e-02 -0.43936293 105 6.613015e-01 fixed NA Elevation -1.096272e-05 4.526467e-05 -0.24219152 105 8.091042e-01 fixed NA TransectAran 2.877083e-02 8.079764e-02 0.35608504 105 7.224913e-01 fixed NA TransectSentein -5.637786e-03 8.386423e-02 -0.06722516 105 9.465303e-01 fixed NA TransectTourmalet -6.778434e-02 7.791307e-02 -0.86999962 105 3.862852e-01 fixed NA Elevation:TransectAran -2.198663e-05 5.256109e-05 -0.41830623 105 6.765775e-01 fixed NA Elevation:TransectSentein 1.445851e-05 5.475949e-05 0.26403659 105 7.922692e-01 fixed NA Elevation:TransectTourmalet 4.317958e-05 4.911932e-05 0.87907520 105 3.813678e-01 ran_pars Sampling_point sd__(Intercept) 0.000000e+00 NA NA NA NA ran_pars Residual sd__Observation 4.887921e-02 NA NA NA NA 7.2 Beta diversity beta_q0n &lt;- genome_counts_filt %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% hillpair(., q = 0) beta_q1n &lt;- genome_counts_filt %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% hillpair(., q = 1) beta_q1p &lt;- genome_counts_filt %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% hillpair(., q = 1, tree = genome_tree) beta_q1f &lt;- genome_counts_filt_filt %&gt;% #column_to_rownames(., &quot;genome&quot;) %&gt;% hillpair(., q = 1, dist = dist) "],["hmsc-set-up.html", "Chapter 8 HMSC set-up 8.1 Load data 8.2 Subsetting 8.3 Define formulas of the Hmsc model 8.4 Define and Hmsc models 8.5 Define MCMC 8.6 Generate Hmsc executables 8.7 Fit Hmsc models (in Mjolnir HPC) 8.8 Assess chain convergence", " Chapter 8 HMSC set-up 8.1 Load data load(&quot;data/data.Rdata&quot;) 8.2 Subsetting # Subset by prevalence (present in more than 5 samples) selected_genomes1 &lt;- genome_counts %&gt;% filter(rowSums(across(starts_with(&quot;EHI&quot;)) != 0) &gt;= 5) %&gt;% select(genome) %&gt;% pull() # Subset by minimum representation of 1% relative abundance in 5 samples selected_genomes2 &lt;- genome_counts %&gt;% filter(genome %in% selected_genomes1) %&gt;% column_to_rownames(var=&quot;genome&quot;) %&gt;% tss() %&gt;% as.data.frame() %&gt;% filter(rowSums(across(starts_with(&quot;EHI&quot;)) &gt;= 0.01) &gt;= 5) %&gt;% rownames() # Subset genome metadata genome_metadata_subset &lt;- genome_metadata %&gt;% filter(genome %in% selected_genomes2) # Random effects data (study design) StudyDesign &lt;- sample_metadata %&gt;% select(EHI_number,Sampling_point,Transect, Elevation) %&gt;% mutate(Sampling_point = factor(Sampling_point)) %&gt;% mutate(Transect = factor(Transect)) %&gt;% mutate(Elevation = factor(Elevation)) %&gt;% column_to_rownames(&quot;EHI_number&quot;) # Genome count table (quantitative community data) YData &lt;- read_counts %&gt;% filter(genome %in% selected_genomes2) %&gt;% #subset genomes mutate(across(where(is.numeric), ~ . +1 )) %&gt;% #add +1 pseudocount to remove zeros mutate(across(where(is.numeric), ~ . / (genome_metadata_subset$length / 150) )) %&gt;% #transform to genome counts mutate(across(where(is.numeric), ~ log(.) )) %&gt;% #log-transform column_to_rownames(&quot;genome&quot;) %&gt;% select(all_of(row.names(StudyDesign))) %&gt;% #filter only faecal samples as.data.frame() %&gt;% t() # transpose # Fixed effects data (explanatory variables) XData &lt;- sample_metadata %&gt;% select(EHI_number,Elevation,Tree_cover, Anthropization_cover) %&gt;% mutate(logseqdepth=read_counts %&gt;% #total log-sequencing depth select(all_of(row.names(StudyDesign))) %&gt;% colSums() %&gt;% log() ) %&gt;% column_to_rownames(&quot;EHI_number&quot;) # Genome trait data elements_table_hmsc &lt;- genome_gifts_filt %&gt;% to.elements(., GIFT_db) %&gt;% as.data.frame() elements_table_hmsc&lt;-rownames_to_column(elements_table_hmsc,var = &quot;genome&quot;) TrData &lt;- elements_table_hmsc %&gt;% filter(genome %in% selected_genomes2) %&gt;% #subset genomes arrange(match(genome, colnames(YData))) %&gt;% column_to_rownames(var=&quot;genome&quot;) %&gt;% to.functions(.,GIFT_db) %&gt;% as.data.frame() TrFormula=~B01+B02+B03+B04+B06+B07+B08+B09+B10+D01+D02+D03+D05+D06+D07+D08+D09+S01+S02+S03 # Genome phylogeny PData &lt;- genome_tree 8.3 Define formulas of the Hmsc model # Fixed effects formula XFormula1 = ~Elevation + Tree_cover + Anthropization_cover + logseqdepth # Study design rL.sampling_point = HmscRandomLevel(units = levels(StudyDesign$Sampling_point)) rL.transect = HmscRandomLevel(units = levels(StudyDesign$Transect)) 8.4 Define and Hmsc models #Define models model1 = Hmsc(Y=YData, XData = XData, XFormula = XFormula1, studyDesign = StudyDesign, TrData = TrData, TrFormula=TrFormula, phyloTree = PData, ranLevels = list(&quot;Sampling_point&quot;=rL.sampling_point, &quot;Transect&quot;=rL.transect), distr = &quot;normal&quot;, YScale = TRUE) #Save list of models as an R object. model_list = list(model1=model1) if (!dir.exists(&quot;hmsc&quot;)){dir.create(&quot;hmsc&quot;)} save(model_list, file = &quot;hmsc/hmsc.Rdata&quot;) Upload hmsc/hmsc.Rdata to the HPC respecting the directory structure. 8.5 Define MCMC # How often to sample the MCMC MCMC_samples_list = 250 # The number of MCMC steps between each recording sample MCMC_thin_list = c(1, 10) # The number of MCMC chains to use nChains = 4 8.6 Generate Hmsc executables The next chunk generates shell files for every combination of model, MCMC samples and MCMM thinning, ready to be launched as SLURM jobs. modelchains &lt;- expand.grid(model = names(model_list), sample = MCMC_samples_list, thin = MCMC_thin_list) if (!dir.exists(&quot;hmsc&quot;)){dir.create(&quot;hmsc&quot;)} for(i in c(1:nrow(modelchains))){ modelname=as.character(modelchains[i,1]) sample=modelchains[i,2] thin=modelchains[i,3] executablename &lt;- paste0(&quot;hmsc/exe_&quot;,modelname,&quot;_&quot;,sample,&quot;_&quot;,thin,&quot;.sh&quot;) fitname &lt;- paste0(&quot;hmsc/fit_&quot;,modelname,&quot;_&quot;,sample,&quot;_&quot;,thin,&quot;.Rdata&quot;) convname &lt;- paste0(&quot;hmsc/conv_&quot;,modelname,&quot;_&quot;,sample,&quot;_&quot;,thin,&quot;.Rdata&quot;) model &lt;- paste0(&#39;model_list$&#39;,modelname) psrf.beta.name &lt;- paste0(&quot;psrf.beta.&quot;,modelname,&quot;_&quot;,sample,&quot;_&quot;,thin) psrf.gamma.name &lt;- paste0(&quot;psrf.gamma.&quot;,modelname,&quot;_&quot;,sample,&quot;_&quot;,thin) psrf.rho.name &lt;- paste0(&quot;psrf.rho.&quot;,modelname,&quot;_&quot;,sample,&quot;_&quot;,thin) jobname &lt;- paste0(&quot;hmsc_&quot;,modelname,&quot;_&quot;,sample,&quot;_&quot;,thin) minutes &lt;- round(sample * thin * (ncol(YData)/500), 0) code &lt;- sprintf(&quot;#!/bin/bash #SBATCH --job-name=%s # Job name #SBATCH --nodes=1 #SBATCH --ntasks=4 # Run on 4 CPUs #SBATCH --mail-user=garazi.bideguren@sund.ku.dk #SBATCH --mem=800gb # Job memory request #SBATCH --time=%d # In minutes # Activate conda environment module load mamba/1.3.1 source activate /maps/projects/mjolnir1/people/dlz554/hmsc_env # Run R script Rscript -e &#39; library(tidyverse) library(Hmsc) # Load formulas and data load(\\&quot;hmsc/hmsc.Rdata\\&quot;) # Declare placeholders modelname = \\&quot;%s\\&quot; model = %s fitname = \\&quot;%s\\&quot; convname = \\&quot;%s\\&quot; sample = %d thin = %d nchains = %d # Run model fitting m = sampleMcmc(hM = model, samples = sample, thin = thin, adaptNf=rep(ceiling(0.4*sample*thin),model$nr), transient = ceiling(0.5*sample*thin), nChains = nchains, nParallel = nchains) # Assess chain convergence mpost = convertToCodaObject(m, spNamesNumbers = c(T,F), covNamesNumbers = c(T,F), Beta = TRUE, Gamma = TRUE, V = FALSE, Sigma = FALSE, Rho = TRUE, Eta = FALSE, Lambda = FALSE, Alpha = FALSE, Omega = FALSE, Psi = FALSE, Delta = FALSE) # Convert to CODA object # Fixed effects assign(paste0(\\&quot;psrf.beta.\\&quot;, modelname,\\&quot;_\\&quot;,sample,\\&quot;_\\&quot;,thin), gelman.diag(mpost$Beta,multivariate=FALSE)$psrf) # Traits assign(paste0(\\&quot;psrf.gamma.\\&quot;, modelname,\\&quot;_\\&quot;,sample,\\&quot;_\\&quot;,thin), gelman.diag(mpost$Gamma,multivariate=FALSE)$psrf) # Phylogeny assign(paste0(\\&quot;psrf.rho.\\&quot;, modelname,\\&quot;_\\&quot;,sample,\\&quot;_\\&quot;,thin), gelman.diag(mpost$Rho,multivariate=FALSE)$psrf) # Write convergence data save(%s, %s, %s, file=convname) # Save model fit object save(m, file=fitname) &#39; &quot;, jobname, minutes, modelname, model, fitname, convname, sample, thin, nChains, psrf.beta.name, psrf.gamma.name, psrf.rho.name) writeLines(code, executablename) } Upload the produced hmsc/exe_XXXXX.sh files to the HPC respecting the directory structure. 8.7 Fit Hmsc models (in Mjolnir HPC) Launch the SLURM jobs by using: # Submit all .sh files in the hmsc folder for jobfile in hmsc/exe_*.sh; do sbatch &quot;$jobfile&quot; done #Or launch them one by one only the ones you want to launch sbatch hmsc/exe_model1_250_1.sh sbatch hmsc/exe_model1_250_10.sh 8.8 Assess chain convergence Convergence diagnostic values substantially above 1 indicate lack of convergence. Values below 1.1 are considered good enough # Load all conv file available in the hmsc folder file_paths &lt;-list.files(path = &quot;hmsc_bookdown&quot;, pattern = &quot;^conv_&quot;, full.names = TRUE, include.dirs = TRUE) for (file_path in file_paths) { load(file_path, verbose = TRUE) # Remove .GlobalEnv argument and specify verbose for each load operation } Loading objects: psrf.beta.model1_250_1 psrf.gamma.model1_250_1 psrf.rho.model1_250_1 Loading objects: psrf.beta.model1_250_10 psrf.gamma.model1_250_10 psrf.rho.model1_250_10 # Create a merged psrf.beta (genome) plot ls() %&gt;% grep(&quot;^psrf\\\\.beta&quot;, ., value = TRUE) %&gt;% map_dfr(~ { mat &lt;- get(.x) data.frame(modelchain = .x, as.data.frame(mat, , stringsAsFactors = FALSE)) %&gt;% rownames_to_column(var=&quot;parameter&quot;) %&gt;% mutate(model = str_split(modelchain, &quot;_&quot;) %&gt;% map_chr(1) %&gt;% gsub(&quot;psrf.beta.&quot;,&quot;&quot;,.)) %&gt;% mutate(sample = str_split(modelchain, &quot;_&quot;)[[1]][2]) %&gt;% #extract sample info from model name mutate(thin = str_split(modelchain, &quot;_&quot;)[[1]][3]) #extract thin info from model name }) %&gt;% ggplot(.,aes(x=reorder(modelchain,-Point.est.,fun=function(x) {quantile(x, probs = 0.9)}),y=Point.est.)) + geom_violin(fill=&quot;#b8d9e3&quot;, color=&quot;#328da8&quot;) + geom_jitter(alpha=0.3,size=0.2, color=&quot;#a8babf&quot;) + stat_summary(fun=function(x) {quantile(x, probs = 0.9)}, geom=&quot;crossbar&quot;, width=0.2, color=&quot;orange&quot;) + geom_hline(yintercept=1.1, linetype=&quot;dashed&quot;, color = &quot;red&quot;) + ylim(0.9,2)+ labs(x=&quot;Model chains&quot;,y=&quot;Parameter estimates&quot;)+ theme_classic()+ theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) "],["hmsc-analysis.html", "Chapter 9 HMSC analysis 9.1 Load data 9.2 Compute variance partitioning 9.3 Elevation predictions 9.4 Functional predictions", " Chapter 9 HMSC analysis 9.1 Load data load(&quot;data/data.Rdata&quot;) 9.2 Compute variance partitioning # Select modelchain of interest load(&quot;hmsc_bookdown/fit_model1_250_10.Rdata&quot;) varpart=computeVariancePartitioning(m) # Compute variance partitioning varpart=computeVariancePartitioning(m) varpart$vals %&gt;% as.data.frame() %&gt;% rownames_to_column(var=&quot;variable&quot;) %&gt;% pivot_longer(!variable, names_to = &quot;genome&quot;, values_to = &quot;value&quot;) %&gt;% mutate(variable=factor(variable, levels=c(&quot;Elevation&quot;,&quot;Tree_cover&quot;, &quot;Anthropization_cover&quot;, &quot;logseqdepth&quot;,&quot;Random: Sampling_point&quot;, &quot;Random: Transect&quot;))) %&gt;% group_by(variable) %&gt;% summarise(mean=mean(value)*100,sd=sd(value)*100) %&gt;% tt() tinytable_xle2ka259zg8ovfkioaj .table td.tinytable_css_0zz4qq5x75eqf8lbkywf, .table th.tinytable_css_0zz4qq5x75eqf8lbkywf { border-bottom: solid 0.1em #d3d8dc; } variable mean sd Elevation 13.690604 10.655348 Tree_cover 8.543097 5.210723 Anthropization_cover 12.322244 6.369957 logseqdepth 21.619303 13.494332 Random: Sampling_point 27.126206 17.220611 Random: Transect 16.698545 12.732231 # Basal tree varpart_tree &lt;- genome_tree %&gt;% keep.tip(., tip=m$spNames) #Varpart table varpart_table &lt;- varpart$vals %&gt;% as.data.frame() %&gt;% rownames_to_column(var=&quot;variable&quot;) %&gt;% pivot_longer(!variable, names_to = &quot;genome&quot;, values_to = &quot;value&quot;) %&gt;% mutate(variable=factor(variable, levels=rev(c(&quot;Elevation&quot;,&quot;Tree_cover&quot;,&quot;Anthropization_cover&quot;, &quot;logseqdepth&quot;,&quot;Random: Sampling_point&quot;, &quot;Random: Transect&quot;)))) %&gt;% mutate(genome=factor(genome, levels=rev(varpart_tree$tip.label))) #Phylums phylum_colors &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% filter(genome %in% varpart_tree$tip.label) %&gt;% arrange(match(genome, varpart_tree$tip.label)) %&gt;% mutate(phylum = factor(phylum, levels = unique(phylum))) %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% select(phylum) colors_alphabetic &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% filter(genome %in% varpart_tree$tip.label) %&gt;% arrange(match(genome, varpart_tree$tip.label)) %&gt;% select(phylum, colors) %&gt;% unique() %&gt;% arrange(phylum) %&gt;% select(colors) %&gt;% pull() # Basal ggtree varpart_tree &lt;- varpart_tree %&gt;% force.ultrametric(.,method=&quot;extend&quot;) %&gt;% ggtree(., size = 0.3) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** # Add phylum colors next to the tree tips varpart_tree &lt;- gheatmap(varpart_tree, phylum_colors, offset=-0.2, width=0.1, colnames=FALSE) + scale_fill_manual(values=colors_alphabetic)+ labs(fill=&quot;Phylum&quot;) #Reset fill scale to use a different colour profile in the heatmap varpart_tree &lt;- varpart_tree + new_scale_fill() # Add variance stacked barplot vertical_tree &lt;- varpart_tree + scale_fill_manual(values=c(&quot;#34738f&quot;,&quot;#cccccc&quot;,&quot;#ed8a45&quot;,&quot;#b2b530&quot;,&quot;#be3e2b&quot;,&quot;#83bb90&quot;,&quot;#f6de6c&quot;, &quot;#122f3d&quot;))+ geom_fruit( data=varpart_table, geom=geom_bar, mapping = aes(x=value, y=genome, fill=variable, group=variable), pwidth = 2, offset = 0.05, width= 1, orientation=&quot;y&quot;, stat=&quot;identity&quot;, color = &quot;white&quot;, size=0.1)+ labs(fill=&quot;Variable&quot;) vertical_tree # Select desired support threshold support=0.9 negsupport=1-support # Basal tree postestimates_tree &lt;- genome_tree %&gt;% keep.tip(., tip=m$spNames) #plotBeta(hM=m, post=getPostEstimate(hM=m, parName=&quot;Beta&quot;), param = &quot;Support&quot;, plotTree = TRUE, covNamesNumbers=c(1,0)) # Posterior estimate table post_beta &lt;- getPostEstimate(hM=m, parName=&quot;Beta&quot;)$support %&gt;% as.data.frame() %&gt;% mutate(variable=m$covNames) %&gt;% pivot_longer(!variable, names_to = &quot;genome&quot;, values_to = &quot;value&quot;) %&gt;% mutate(genome=factor(genome, levels=rev(postestimates_tree$tip.label))) %&gt;% mutate(value = case_when( value &gt;= support ~ &quot;Positive&quot;, value &lt;= negsupport ~ &quot;Negative&quot;, TRUE ~ &quot;Neutral&quot;)) %&gt;% mutate(value=factor(value, levels=c(&quot;Positive&quot;,&quot;Neutral&quot;,&quot;Negative&quot;))) %&gt;% pivot_wider(names_from = variable, values_from = value) %&gt;% rename(intercept=2, Elevation=3, Tree_cover=4, Anthropization_cover=5, logseqdepth=6 ) %&gt;% select(genome,intercept,Elevation,Tree_cover,Anthropization_cover,logseqdepth) %&gt;% column_to_rownames(var=&quot;genome&quot;) #Phylums phylum_colors &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% filter(genome %in% postestimates_tree$tip.label) %&gt;% arrange(match(genome, postestimates_tree$tip.label)) %&gt;% mutate(phylum = factor(phylum, levels = unique(phylum))) %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% select(phylum) colors_alphabetic &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% filter(genome %in% postestimates_tree$tip.label) %&gt;% arrange(match(genome, postestimates_tree$tip.label)) %&gt;% select(phylum, colors) %&gt;% unique() %&gt;% arrange(phylum) %&gt;% select(colors) %&gt;% pull() # Basal ggtree postestimates_tree &lt;- postestimates_tree %&gt;% force.ultrametric(.,method=&quot;extend&quot;) %&gt;% ggtree(., size = 0.3) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** #Add phylum colors next to the tree tips postestimates_tree &lt;- gheatmap(postestimates_tree, phylum_colors, offset=-0.2, width=0.1, colnames=FALSE) + scale_fill_manual(values=colors_alphabetic)+ labs(fill=&quot;Phylum&quot;) #Reset fill scale to use a different colour profile in the heatmap postestimates_tree &lt;- postestimates_tree + new_scale_fill() # Add posterior significant heatmap postestimates_tree &lt;- gheatmap(postestimates_tree, post_beta, offset=0, width=0.5, colnames=TRUE, colnames_position=&quot;top&quot;,colnames_angle=90, colnames_offset_y=1, hjust=0) + scale_fill_manual(values=c(&quot;#be3e2b&quot;,&quot;#f4f4f4&quot;,&quot;#b2b530&quot;))+ labs(fill=&quot;Trend&quot;) postestimates_tree + vexpand(.25, 1) # expand top #Compute the residual correlation matrix OmegaCor = computeAssociations(m) # Reference tree (for sorting genomes) genome_tree_subset &lt;- genome_tree %&gt;% keep.tip(., tip=m$spNames) #Co-occurrence matrix at the animal level supportLevel = 0.95 toPlot = ((OmegaCor[[1]]$support&gt;supportLevel) + (OmegaCor[[1]]$support&lt;(1-supportLevel))&gt;0)*OmegaCor[[1]]$mean matrix &lt;- toPlot %&gt;% as.data.frame() %&gt;% rownames_to_column(var=&quot;genome1&quot;) %&gt;% pivot_longer(!genome1, names_to = &quot;genome2&quot;, values_to = &quot;cor&quot;) %&gt;% mutate(genome1= factor(genome1, levels=genome_tree_subset$tip.label)) %&gt;% mutate(genome2= factor(genome2, levels=genome_tree_subset$tip.label)) %&gt;% ggplot(aes(x = genome1, y = genome2, fill = cor)) + geom_tile() + scale_fill_gradient2(low = &quot;#be3e2b&quot;, mid = &quot;#f4f4f4&quot;, high = &quot;#b2b530&quot;)+ theme_void() vtree_top &lt;- genome_tree_subset %&gt;% force.ultrametric(.,method=&quot;extend&quot;) %&gt;% ggtree(layout = &quot;rectangular&quot;) + layout_dendrogram() + # Ensure correct layout coord_flip() *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** vtree_left &lt;- genome_tree_subset %&gt;% force.ultrametric(.,method=&quot;extend&quot;) %&gt;% ggtree(.) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** #create composite figure grid.arrange(grobs = list(vtree_top,matrix,vtree_left), layout_matrix = rbind(c(4,1,1,1,1,1,1,1,1,1,1,1), c(3,2,2,2,2,2,2,2,2,2,2,2), c(3,2,2,2,2,2,2,2,2,2,2,2), c(3,2,2,2,2,2,2,2,2,2,2,2), c(3,2,2,2,2,2,2,2,2,2,2,2), c(3,2,2,2,2,2,2,2,2,2,2,2), c(3,2,2,2,2,2,2,2,2,2,2,2), c(3,2,2,2,2,2,2,2,2,2,2,2), c(3,2,2,2,2,2,2,2,2,2,2,2), c(3,2,2,2,2,2,2,2,2,2,2,2), c(3,2,2,2,2,2,2,2,2,2,2,2), c(3,2,2,2,2,2,2,2,2,2,2,2))) 9.3 Elevation predictions gradient = seq(940, 2350, by = 100) gradientlength = length(gradient) #Treatment-specific gradient predictions pred_elevation &lt;- constructGradient(m, focalVariable = &quot;Elevation&quot;, non.focalVariables = list(logseqdepth=list(1),Tree_cover=list(1), Anthropization_cover=list(1)), ngrid=gradientlength) %&gt;% predict(m, Gradient = ., expected = TRUE) %&gt;% do.call(rbind,.) %&gt;% as.data.frame() %&gt;% mutate(elevation=rep(gradient,1000)) %&gt;% pivot_longer(-c(elevation), names_to = &quot;genome&quot;, values_to = &quot;value&quot;) 9.3.1 Responses to elevation # Select desired support threshold support=0.9 negsupport=1-support #Get phylum colors from the EHI standard phylum_colors &lt;- genome_metadata %&gt;% left_join(read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;), by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, genome_tree$tip.label)) %&gt;% select(phylum, colors) %&gt;% unique() %&gt;% arrange(phylum) %&gt;% #slice(2:5) %&gt;% select(colors) %&gt;% pull() getPostEstimate(hM=m, parName=&quot;Beta&quot;)$support %&gt;% as.data.frame() %&gt;% mutate(variable=m$covNames) %&gt;% pivot_longer(!variable, names_to = &quot;genome&quot;, values_to = &quot;value&quot;) %&gt;% mutate(trend = case_when( value &gt;= support ~ &quot;Positive&quot;, value &lt;= negsupport ~ &quot;Negative&quot;, TRUE ~ &quot;Neutral&quot;)) %&gt;% filter(variable==&quot;Elevation&quot;) %&gt;% select(genome,trend) %&gt;% left_join(pred_elevation, by=join_by(genome==genome)) %&gt;% group_by(genome, trend, elevation) %&gt;% summarize(value = mean(value, na.rm = TRUE)) %&gt;% left_join(genome_metadata, by=join_by(genome == genome)) %&gt;% ggplot(aes(x=elevation, y=value, group=genome, color=phylum, linetype=trend)) + geom_line() + scale_linetype_manual(values=c(&quot;solid&quot;,&quot;dashed&quot;,&quot;solid&quot;)) + scale_color_manual(values=phylum_colors) + facet_grid(fct_rev(trend) ~ phylum) + labs(y=&quot;Genome abundance (log)&quot;,x=&quot;Elevation&quot;) + theme(legend.position = &quot;none&quot;) + theme_minimal() + theme(legend.position = &quot;none&quot;, axis.text.x = element_text(angle = 45, hjust = 0.8,), axis.line.x = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), ) 9.4 Functional predictions 9.4.1 Element level elements_table &lt;- genome_gifts_filt %&gt;% to.elements(., GIFT_db) %&gt;% as.data.frame() community_elements &lt;- pred_elevation %&gt;% group_by(elevation, genome) %&gt;% mutate(row_id = row_number()) %&gt;% pivot_wider(names_from = genome, values_from = value) %&gt;% ungroup() %&gt;% group_split(row_id) %&gt;% as.list() %&gt;% lapply(., FUN = function(x){x %&gt;% select(-row_id) %&gt;% column_to_rownames(var = &quot;elevation&quot;) %&gt;% as.data.frame() %&gt;% exp() %&gt;% t() %&gt;% tss() %&gt;% to.community(elements_table,.,GIFT_db) %&gt;% as.data.frame() %&gt;% rownames_to_column(var=&quot;elevation&quot;) }) calculate_slope &lt;- function(x) { lm_fit &lt;- lm(unlist(x) ~ seq_along(unlist(x))) coef(lm_fit)[2] } element_predictions &lt;- map_dfc(community_elements, function(mat) { mat %&gt;% column_to_rownames(var = &quot;elevation&quot;) %&gt;% t() %&gt;% as.data.frame() %&gt;% rowwise() %&gt;% mutate(slope = calculate_slope(c_across(everything()))) %&gt;% select(slope) }) %&gt;% t() %&gt;% as.data.frame() %&gt;% set_names(colnames(community_elements[[1]])[-1]) %&gt;% rownames_to_column(var=&quot;iteration&quot;) %&gt;% pivot_longer(!iteration, names_to=&quot;trait&quot;,values_to=&quot;value&quot;) %&gt;% group_by(trait) %&gt;% summarise(mean=mean(value), p1 = quantile(value, probs = 0.1), p9 = quantile(value, probs = 0.9), positive_support = sum(value &gt; 0)/1000, negative_support = sum(value &lt; 0)/1000) %&gt;% arrange(-positive_support) # Positively associated p0&lt;-positive_filtered&lt;-element_predictions %&gt;% filter(mean &gt;0) %&gt;% arrange(-positive_support) %&gt;% filter(positive_support&gt;=0.9) if (nrow(positive_filtered) &gt; 0) { positive_filtered %&gt;% tt() |&gt; style_tt( i = which(element_predictions$positive_support &lt; 0.9 &amp; element_predictions$negative_support &lt; 0.1), background = &quot;#E5D5B1&quot;) |&gt; style_tt( i = which(element_predictions$negative_support &gt; 0.9 &amp; element_predictions$positive_support &lt; 0.1), background = &quot;#B7BCCE&quot;) } #Negatively associated p1&lt;-negative_filtered&lt;-element_predictions %&gt;% filter(mean &lt;0) %&gt;% arrange(-negative_support) %&gt;% filter(negative_support&gt;=0.9) if (nrow(negative_filtered) &gt; 0) { negative_filtered %&gt;% tt() |&gt; style_tt( i = which(element_predictions$positive_support &lt; 0.9 &amp; element_predictions$negative_support &lt; 0.1), background = &quot;#E5D5B1&quot;) |&gt; style_tt( i = which(element_predictions$negative_support &gt; 0.9 &amp; element_predictions$positive_support &lt; 0.1), background = &quot;#B7BCCE&quot;) } # Positively associated p0 %&gt;% tt() tinytable_6p0pcdc5i4ves1lo0zwp .table td.tinytable_css_ful4tlqvujavws0u4g7w, .table th.tinytable_css_ful4tlqvujavws0u4g7w { border-bottom: solid 0.1em #d3d8dc; } trait mean p1 p9 positive_support negative_support D0613 0.034264683 0.0113319085 0.060146258 0.971 0.029 B0106 0.017715307 0.0039875628 0.033388901 0.966 0.034 D0609 0.014654471 0.0028010131 0.027577745 0.962 0.038 D0205 0.008600377 0.0020467751 0.015207831 0.953 0.047 D0207 0.031552241 0.0069001701 0.067737031 0.949 0.051 B0802 0.037714918 0.0086104696 0.071624679 0.947 0.053 D0304 0.014938085 0.0035430830 0.027059303 0.945 0.055 B0214 0.019893750 0.0026561423 0.037824383 0.931 0.069 B0217 0.013929202 0.0015844388 0.028027942 0.925 0.075 D0817 0.004336948 0.0003403666 0.008888889 0.919 0.081 #Negatively associated p1%&gt;% tt() tinytable_afwa8a07r3na4ny94809 .table td.tinytable_css_l1cvkhth6rdvehcx1znd, .table th.tinytable_css_l1cvkhth6rdvehcx1znd { border-bottom: solid 0.1em #d3d8dc; } trait mean p1 p9 positive_support negative_support B0208 -0.0344477317 -0.0618098460 -1.039294e-02 0.016 0.984 S0104 -0.0209740208 -0.0337504690 -8.006082e-03 0.022 0.978 D0805 -0.0004581602 -0.0009344457 -6.018417e-05 0.035 0.965 B0710 -0.0061948836 -0.0108430396 -1.870104e-03 0.037 0.963 B0310 -0.0028164249 -0.0048520436 -8.904523e-04 0.043 0.957 B1029 -0.0003677198 -0.0007876956 -4.280235e-05 0.045 0.955 D0604 -0.0252076749 -0.0512963980 -5.101516e-03 0.050 0.950 D0903 -0.0047866601 -0.0089646580 -1.108197e-03 0.050 0.950 B0218 -0.0116625901 -0.0223161257 -2.061981e-03 0.053 0.947 B0703 -0.0192156802 -0.0373477215 -2.861509e-03 0.059 0.941 D0206 -0.0197688096 -0.0392643553 -3.454538e-03 0.061 0.939 D0701 -0.0051397234 -0.0101283806 -6.650890e-04 0.068 0.932 D0509 -0.0151983776 -0.0301644940 -2.157025e-03 0.070 0.930 D0103 -0.0058062776 -0.0111387262 -5.611137e-04 0.073 0.927 B0903 -0.0040583726 -0.0082299820 -3.182127e-04 0.078 0.922 B0711 -0.0116387135 -0.0239457783 -1.087371e-03 0.079 0.921 D0307 -0.0106690266 -0.0219998777 -7.160822e-04 0.083 0.917 B0702 -0.0164229499 -0.0340972191 -1.406339e-03 0.085 0.915 D0508 -0.0025923862 -0.0054092788 -1.884571e-04 0.089 0.911 D0908 -0.0351466114 -0.0789647021 -1.049356e-03 0.091 0.909 D0912 -0.0009892400 -0.0020007917 -1.425600e-05 0.092 0.908 B0303 -0.0072114512 -0.0152002291 -7.612867e-05 0.097 0.903 #Positively associated positive &lt;- element_predictions %&gt;% filter(mean &gt;0) %&gt;% arrange(mean) %&gt;% filter(positive_support&gt;=0.9) %&gt;% select(-negative_support) %&gt;% rename(support=positive_support) #Negatively associated negative &lt;- element_predictions %&gt;% filter(mean &lt;0) %&gt;% arrange(mean) %&gt;% filter(negative_support&gt;=0.9) %&gt;% select(-positive_support) %&gt;% rename(support=negative_support) all_elements &lt;- bind_rows(positive,negative) %&gt;% left_join(GIFT_db,by=join_by(trait==Code_element)) %&gt;% mutate(trait=factor(trait,levels=c(rev(positive$trait),rev(negative$trait)))) %&gt;% mutate(Code_function=factor(Code_function)) %&gt;% mutate(element_legend=str_c(trait,&quot; - &quot;,Element)) %&gt;% mutate(function_legend=str_c(Code_function,&quot; - &quot;,Function)) %&gt;% select(trait,mean,p1,p9,element_legend,function_legend) %&gt;% unique() gift_colors &lt;- read_tsv(&quot;data/gift_colors.tsv&quot;) %&gt;% mutate(legend=str_c(Code_function,&quot; - &quot;,Function)) %&gt;% filter(legend %in% all_elements$function_legend) all_elements %&gt;% ggplot(aes(x=mean, y=fct_reorder(element_legend, mean), xmin=p1, xmax=p9, color=function_legend)) + geom_point() + geom_errorbar() + xlim(c(-0.15,0.15)) + geom_vline(xintercept=0) + scale_color_manual(values = gift_colors$Color) + theme_minimal() + labs(x=&quot;Regression coefficient&quot;,y=&quot;Functional trait&quot;) community_elements %&gt;% bind_rows() %&gt;% pivot_longer(-elevation, names_to = &quot;trait&quot;, values_to = &quot;value&quot;) %&gt;% filter(trait %in% positive$trait) %&gt;% mutate(trait=factor(trait, levels=positive$trait)) %&gt;% mutate(elevation=as.numeric(elevation)) %&gt;% ggplot(aes(x=elevation, y=value)) + geom_smooth(method = lm, formula = y ~ x, se = TRUE) + #geom_smooth(method = lm, formula = y ~ splines::bs(x, 3), se = TRUE) + facet_wrap(~trait, ncol=5, scales=&quot;free&quot;) + theme_minimal() + labs(x=&quot;Elevation&quot;,y=&quot;Metabolic Capacity Index&quot;) 9.4.1.1 GIFT test visualization # Aggregate bundle-level GIFTs into the compound level genome_counts_filt_filt &lt;- tibble::rownames_to_column(genome_counts_filt_filt, var = &quot;genome&quot;) GIFTs_elements_filtered &lt;- elements_table[rownames(elements_table) %in% genome_counts_filt_filt$genome, ] GIFTs_elements_filtered &lt;- as.data.frame(GIFTs_elements_filtered) %&gt;% select_if(~ !is.numeric(.) || sum(.) != 0) # Get community-weighed average GIFTs per sample GIFTs_elements_community &lt;- to.community(GIFTs_elements_filtered, genome_counts_filt_filt %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% tss(), GIFT_db) GIFTs_elements_community %&gt;% as.data.frame() %&gt;% rownames_to_column(var=&quot;sample&quot;) %&gt;% pivot_longer(!sample,names_to=&quot;trait&quot;,values_to=&quot;gift&quot;) %&gt;% left_join(sample_metadata, by = join_by(sample == EHI_number)) %&gt;% mutate(functionid = substr(trait, 1, 3)) %&gt;% mutate(trait = case_when( trait %in% GIFT_db$Code_element ~ GIFT_db$Element[match(trait, GIFT_db$Code_element)], TRUE ~ trait )) %&gt;% mutate(functionid = case_when( functionid %in% GIFT_db$Code_function ~ GIFT_db$Function[match(functionid, GIFT_db$Code_function)], TRUE ~ functionid )) %&gt;% mutate(trait=factor(trait,levels=unique(GIFT_db$Element))) %&gt;% mutate(functionid=factor(functionid,levels=unique(GIFT_db$Function))) %&gt;% ggplot(aes(x=sample,y=trait,fill=gift)) + geom_tile(colour=&quot;white&quot;, linewidth=0.2)+ scale_fill_gradientn(colours=rev(c(&quot;#d53e4f&quot;, &quot;#f46d43&quot;, &quot;#fdae61&quot;, &quot;#fee08b&quot;, &quot;#e6f598&quot;, &quot;#abdda4&quot;, &quot;#ddf1da&quot;)))+ facet_grid(functionid ~ Elevation, scales=&quot;free&quot;,space=&quot;free&quot;) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), strip.text.y = element_text(angle = 0)) + labs(y=&quot;Traits&quot;,x=&quot;Samples&quot;,fill=&quot;GIFT&quot;) 9.4.2 Functional level functions_table &lt;- elements_table %&gt;% to.functions(., GIFT_db) %&gt;% as.data.frame() community_functions &lt;- pred_elevation %&gt;% group_by(elevation, genome) %&gt;% mutate(row_id = row_number()) %&gt;% pivot_wider(names_from = genome, values_from = value) %&gt;% ungroup() %&gt;% group_split(row_id) %&gt;% as.list() %&gt;% lapply(., FUN = function(x){x %&gt;% select(-row_id) %&gt;% column_to_rownames(var = &quot;elevation&quot;) %&gt;% as.data.frame() %&gt;% exp() %&gt;% t() %&gt;% tss() %&gt;% to.community(functions_table,.,GIFT_db) %&gt;% as.data.frame() %&gt;% rownames_to_column(var=&quot;elevation&quot;) }) #max-min option calculate_slope &lt;- function(x) { lm_fit &lt;- lm(unlist(x) ~ seq_along(unlist(x))) coef(lm_fit)[2] } function_predictions &lt;- map_dfc(community_functions, function(mat) { mat %&gt;% column_to_rownames(var = &quot;elevation&quot;) %&gt;% t() %&gt;% as.data.frame() %&gt;% rowwise() %&gt;% mutate(slope = calculate_slope(c_across(everything()))) %&gt;% select(slope) }) %&gt;% t() %&gt;% as.data.frame() %&gt;% set_names(colnames(community_functions[[1]])[-1]) %&gt;% rownames_to_column(var=&quot;iteration&quot;) %&gt;% pivot_longer(!iteration, names_to=&quot;trait&quot;,values_to=&quot;value&quot;) %&gt;% group_by(trait) %&gt;% summarise(mean=mean(value), p1 = quantile(value, probs = 0.1), p9 = quantile(value, probs = 0.9), positive_support = sum(value &gt; 0)/1000, negative_support = sum(value &lt; 0)/1000) %&gt;% arrange(-positive_support) # Positively associated p2&lt;-function_predictions %&gt;% filter(mean &gt;0) %&gt;% arrange(-positive_support) %&gt;% filter(positive_support&gt;=0.9) %&gt;% tt() |&gt; style_tt( i = which(function_predictions$positive_support &lt; 0.9 &amp; function_predictions$negative_support &lt; 0.1), background = &quot;#E5D5B1&quot;) |&gt; style_tt( i = which(function_predictions$negative_support &gt; 0.9 &amp; function_predictions$positive_support &lt; 0.1), background = &quot;#B7BCCE&quot;) # Negatively associated (there isn&#39;t) #function_predictions %&gt;% #filter(mean &lt;0) %&gt;% #arrange(-negative_support) %&gt;% #filter(negative_support&gt;=0.9) %&gt;% #tt() |&gt; #style_tt( #i = which(function_predictions$positive_support &lt; 0.9 &amp; function_predictions$negative_support &lt; 0.1), #background = &quot;#E5D5B1&quot;) |&gt; #style_tt( #i = which(function_predictions$negative_support &gt; 0.9 &amp; function_predictions$positive_support &lt; 0.1), #background = &quot;#B7BCCE&quot;) # Positively associated p2 %&gt;% tt() tinytable_dvx9hohu1sdr9nb0nak9 .table td.tinytable_css_g9pz5btaqhenh5r7g7jw, .table th.tinytable_css_g9pz5btaqhenh5r7g7jw { border-bottom: solid 0.1em #d3d8dc; } trait mean p1 p9 positive_support negative_support S03 0.026906176 0.0104593848 0.044524683 0.973 0.027 B04 0.018264988 0.0051591436 0.033137776 0.970 0.030 D03 0.010497822 0.0021459296 0.019986199 0.943 0.057 D06 0.003285998 0.0004532722 0.006338923 0.933 0.067 B07 0.012228797 0.0004053295 0.024691062 0.906 0.094 #Negatively associated (there isn&#39;t) all_functions &lt;- function_predictions %&gt;% left_join(GIFT_db,by=join_by(trait==Code_function)) %&gt;% mutate(trait=factor(trait)) %&gt;% mutate(function_legend=str_c(trait,&quot; - &quot;,Function)) %&gt;% select(trait,mean,p1,p9,function_legend) %&gt;% unique() gift_colors &lt;- read_tsv(&quot;data/gift_colors.tsv&quot;) %&gt;% mutate(legend=str_c(Code_function,&quot; - &quot;,Function)) %&gt;% filter(legend %in% all_functions$function_legend) all_functions %&gt;% ggplot(aes(x=mean, y=fct_reorder(function_legend, mean), xmin=p1, xmax=p9, color=function_legend)) + geom_point() + geom_errorbar() + xlim(c(-0.05,0.06)) + geom_vline(xintercept=0) + scale_color_manual(values = gift_colors$Color) + theme_minimal() + labs(x=&quot;Regression coefficient&quot;,y=&quot;Functional trait&quot;) + guides(col = guide_legend(ncol = 1)) community_functions %&gt;% bind_rows() %&gt;% pivot_longer(-elevation, names_to = &quot;trait&quot;, values_to = &quot;value&quot;) %&gt;% filter(trait %in% function_predictions$trait) %&gt;% mutate(trait=factor(trait, levels=function_predictions$trait)) %&gt;% mutate(elevation=as.numeric(elevation)) %&gt;% ggplot(aes(x=elevation, y=value)) + geom_smooth(method = lm, formula = y ~ x, se = TRUE) + #geom_smooth(method = lm, formula = y ~ splines::bs(x, 3), se = TRUE) + facet_wrap(~trait, ncol=5, scales=&quot;free&quot;) + theme_minimal() + labs(x=&quot;Elevation&quot;,y=&quot;Metabolic Capacity Index&quot;) 9.4.2.1 GIFT test visualization # Aggregate element-level GIFTs into the function level GIFTs_functions &lt;- to.functions(GIFTs_elements_filtered, GIFT_db) functions &lt;- GIFTs_functions %&gt;% as.data.frame() # Get community-weighed average GIFTs per sample GIFTs_functions_community &lt;- to.community(GIFTs_functions, genome_counts_filt_filt %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% tss(), GIFT_db) GIFTs_functions_community %&gt;% as.data.frame() %&gt;% rownames_to_column(var=&quot;sample&quot;) %&gt;% pivot_longer(!sample,names_to=&quot;trait&quot;,values_to=&quot;gift&quot;) %&gt;% left_join(sample_metadata, by = join_by(sample == EHI_number)) %&gt;% ggplot(aes(x=trait,y=sample,fill=gift)) + geom_tile(colour=&quot;white&quot;, size=0.2)+ scale_fill_gradientn(colours=rev(c(&quot;#d53e4f&quot;, &quot;#f46d43&quot;, &quot;#fdae61&quot;, &quot;#fee08b&quot;, &quot;#e6f598&quot;, &quot;#abdda4&quot;, &quot;#ddf1da&quot;)))+ facet_grid(Elevation ~ ., scales=&quot;free&quot;,space=&quot;free&quot;) 9.4.3 Domain level domains_table &lt;- functions_table %&gt;% to.domains(., GIFT_db) %&gt;% as.data.frame() community_domains &lt;- pred_elevation %&gt;% group_by(elevation, genome) %&gt;% mutate(row_id = row_number()) %&gt;% pivot_wider(names_from = genome, values_from = value) %&gt;% ungroup() %&gt;% group_split(row_id) %&gt;% as.list() %&gt;% lapply(., FUN = function(x){x %&gt;% select(-row_id) %&gt;% column_to_rownames(var = &quot;elevation&quot;) %&gt;% as.data.frame() %&gt;% exp() %&gt;% t() %&gt;% tss() %&gt;% to.community(domains_table,.,GIFT_db) %&gt;% as.data.frame() %&gt;% rownames_to_column(var=&quot;elevation&quot;) }) #max-min option calculate_slope &lt;- function(x) { lm_fit &lt;- lm(unlist(x) ~ seq_along(unlist(x))) coef(lm_fit)[2] } domain_predictions &lt;- map_dfc(community_domains, function(mat) { mat %&gt;% column_to_rownames(var = &quot;elevation&quot;) %&gt;% t() %&gt;% as.data.frame() %&gt;% rowwise() %&gt;% mutate(slope = calculate_slope(c_across(everything()))) %&gt;% select(slope) }) %&gt;% t() %&gt;% as.data.frame() %&gt;% set_names(colnames(community_domains[[1]])[-1]) %&gt;% rownames_to_column(var=&quot;iteration&quot;) %&gt;% pivot_longer(!iteration, names_to=&quot;trait&quot;,values_to=&quot;value&quot;) %&gt;% group_by(trait) %&gt;% summarise(mean=mean(value), p1 = quantile(value, probs = 0.1), p9 = quantile(value, probs = 0.9), positive_support = sum(value &gt; 0)/1000, negative_support = sum(value &lt; 0)/1000) %&gt;% arrange(-positive_support) # Positively associated p3&lt;-positive_filtered&lt;-domain_predictions %&gt;% filter(mean &gt;0) %&gt;% arrange(-positive_support) %&gt;% filter(positive_support&gt;=0.9) if (nrow(positive_filtered) &gt; 0) { positive_filtered %&gt;% tt() |&gt; style_tt( i = which(domain_predictions$positive_support &lt; 0.9 &amp; domain_predictions$negative_support &lt; 0.1), background = &quot;#E5D5B1&quot;) |&gt; style_tt( i = which(domain_predictions$negative_support &gt; 0.9 &amp; domain_predictions$positive_support &lt; 0.1), background = &quot;#B7BCCE&quot;) } # Negatively associated (there isn&#39;t) #domain_predictions %&gt;% #filter(mean &lt;0) %&gt;% #arrange(-negative_support) %&gt;% #filter(negative_support&gt;=0.9) %&gt;% #tt() |&gt; #style_tt( #i = which(domain_predictions$positive_support &lt; 0.9 &amp; domain_predictions$negative_support &lt; 0.1), #background = &quot;#E5D5B1&quot;) |&gt; #style_tt( #i = which(domain_predictions$negative_support &gt; 0.9 &amp; domain_predictions$positive_support &lt; 0.1), #background = &quot;#B7BCCE&quot;) # Positively associated p3 %&gt;% tt() tinytable_tnmky9me80v64a2htnu9 .table td.tinytable_css_jd00cj377m8t9h0jyv1i, .table th.tinytable_css_jd00cj377m8t9h0jyv1i { border-bottom: solid 0.1em #d3d8dc; } trait mean p1 p9 positive_support negative_support Overall 0.006863701 0.0003939157 0.01509651 0.917 0.083 # Negatively associated (there isn&#39;t) all_domains &lt;- domain_predictions %&gt;% left_join(GIFT_db,by=join_by(trait==Code_function)) %&gt;% mutate(trait=factor(trait)) %&gt;% mutate(function_legend=str_c(trait,&quot; - &quot;,Function)) %&gt;% select(trait,mean,p1,p9) %&gt;% unique() all_domains %&gt;% ggplot(aes(x=mean, y=fct_reorder(trait, mean), xmin=p1, xmax=p9, color=trait)) + geom_point() + geom_errorbar() + xlim(c(-0.02,0.03)) + geom_vline(xintercept=0) + theme_minimal() + labs(x=&quot;Regression coefficient&quot;,y=&quot;Domain level&quot;) + guides(col = guide_legend(ncol = 1)) community_domains %&gt;% bind_rows() %&gt;% pivot_longer(-elevation, names_to = &quot;trait&quot;, values_to = &quot;value&quot;) %&gt;% filter(trait %in% domain_predictions$trait) %&gt;% mutate(trait=factor(trait, levels=domain_predictions$trait)) %&gt;% mutate(elevation=as.numeric(elevation)) %&gt;% ggplot(aes(x=elevation, y=value)) + geom_smooth(method = lm, formula = y ~ x, se = TRUE) + #geom_smooth(method = lm, formula = y ~ splines::bs(x, 3), se = TRUE) + facet_wrap(~trait, ncol=5, scales=&quot;free&quot;) + theme_minimal() + labs(x=&quot;Elevation&quot;,y=&quot;Metabolic Capacity Index&quot;) 9.4.3.1 GIFT test visualization # Aggregate function-level GIFTs into overall Biosynthesis, Degradation and Structural GIFTs GIFTs_domains &lt;- to.domains(GIFTs_functions, GIFT_db) domains &lt;- GIFTs_domains %&gt;% as.data.frame() # Get community-weighed average GIFTs per sample GIFTs_domains_community &lt;- to.community(GIFTs_domains, genome_counts_filt_filt %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% tss(), GIFT_db) GIFTs_domains_community %&gt;% as.data.frame() %&gt;% rownames_to_column(var=&quot;sample&quot;) %&gt;% pivot_longer(!sample,names_to=&quot;trait&quot;,values_to=&quot;gift&quot;) %&gt;% left_join(sample_metadata, by = join_by(sample == EHI_number)) %&gt;% ggplot(aes(x=trait,y=sample,fill=gift)) + geom_tile(colour=&quot;white&quot;, size=0.2)+ scale_fill_gradientn(colours=rev(c(&quot;#d53e4f&quot;, &quot;#f46d43&quot;, &quot;#fdae61&quot;, &quot;#fee08b&quot;, &quot;#e6f598&quot;, &quot;#abdda4&quot;, &quot;#ddf1da&quot;)))+ facet_grid(Elevation ~ ., scales=&quot;free&quot;,space=&quot;free&quot;) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
