[["index.html", "AlberdiLab | Martin-Bideguren et al. 2025 Study title to be added Chapter 1 Introduction 1.1 Prepare the R environment", " AlberdiLab | Martin-Bideguren et al. 2025 Study title to be added Garazi Martin-Bideguren1, Ostaizka Aizpurua2, Javier Abalos3, Fabien Aubret4, Guillem Pérez i de Lanuza5, Tom Sarraude6, Nathalie Feiner7, Tobias Uller8, Aoife Leonard9 and Antton Alberdi10 Last update: 2025-03-21 Chapter 1 Introduction This webbook contains all the code used for data analysis in study of the population-level metagenomic data of Podarcis muralis lizards across elevational gradients in various mountain ranges of the Pyrenees. 1.1 Prepare the R environment 1.1.1 Environment To reproduce all the analyses locally, clone this repository in your computer using: RStudio &gt; New Project &gt; Version Control &gt; Git And indicating the following git repository: https://github.com/alberdilab/elevational_hologenomics.git Once the R project has been created, follow the instructions and code chunks shown in this webbook. 1.1.2 Libraries The following R packages are required for the data analysis. # Base library(R.utils) library(knitr) library(tidyverse) library(devtools) library(tinytable) library(broom.mixed) library(rmarkdown) # For tree handling library(ape) library(phyloseq) library(phytools) # For plotting library(ggplot2) library(ggrepel) library(ggpubr) library(ggnewscale) library(gridExtra) library(ggtreeExtra) library(ggtree) library(ggh4x) library(UpSetR) library(mapproj) library(ggpmisc) library(aplot) # For statistics library(spaa) library(vegan) library(Rtsne) library(geiger) library(hilldiv2) library(distillR) library(Hmsc) library(corrplot) library(pairwiseAdonis) library(nlme) library(lme4) library(emmeans) University of Copenhagen, garazi.bideguren@sund.ku.dk↩︎ University of Copenhagen, ostaizka.aizpurua@sund.ku.dk↩︎ University of Valencia, jal4@uv.es↩︎ Centre National de la Recherche Scientifique, faubret@gmail.com↩︎ University of Valencia, guillem.perez-lanuza@uv.es↩︎ Centre National de la Recherche Scientifique, t.sarraude@gmail.com↩︎ University of Lund, nathalie.feiner@biol.lu.se↩︎ University of Lund, tobias.uller@biol.lu.se↩︎ Aarhus University, aoife.leonard@sund.ku.dk↩︎ University of Copenhagen, antton.alberdi@sund.ku.dk↩︎ "],["prepare-data.html", "Chapter 2 Prepare data 2.1 Load data 2.2 Create working objects 2.3 Prepare color scheme 2.4 Wrap working objects", " Chapter 2 Prepare data 2.1 Load data Load the original data files outputted by the bioinformatic pipeline. 2.1.1 Sample metadata sample_metadata &lt;- read.csv(&quot;data/Pyrenees_metadata_all_v2.csv&quot;,sep=&quot;,&quot;,header=T)%&gt;% filter(EHI_number != &quot;EHI00102&quot;) %&gt;% filter(EHI_number != &quot;EHI00182&quot;) %&gt;% filter(EHI_number !=&quot;EHI00435&quot;) %&gt;% filter(EHI_number !=&quot;EHI00126&quot;) #genome not P.muralis 2.1.2 Read counts read_counts &lt;- read_tsv(&quot;data/DMB0113_counts.tsv&quot;) %&gt;% rename(genome = 1) %&gt;% select(-EHI00102, -EHI00182,-EHI00435,-EHI00126) #remove samples 2.1.3 Genome taxonomy genome_metadata &lt;- read_tsv(&quot;data/DMB0113_mag_info.tsv&quot;) %&gt;% rename(length=mag_size) 2.1.4 Genome base hits genome_coverage &lt;- read_tsv(&quot;data/DMB0113_coverage.tsv&quot;) %&gt;% rename(genome = 1) %&gt;% select(-EHI00102, -EHI00182,-EHI00435,-EHI00126) %&gt;% #remove samples semi_join(genome_metadata, by = &quot;genome&quot;) 2.1.5 Genome tree genome_tree &lt;- read_tree(&quot;data/DMB0113.tree&quot;) genome_tree$tip.label &lt;- str_replace_all(genome_tree$tip.label,&quot;&#39;&quot;, &quot;&quot;) #remove single quotes in MAG names genome_tree &lt;- keep.tip(genome_tree, tip=genome_metadata$genome) # keep only MAG tips 2.1.6 Genome annotations Distill annotations already into GIFTs genome_gifts_raw=&quot;data/GIFTs.tsv&quot; genome_gifts &lt;- read.table(genome_gifts_raw,header=T, sep=&quot;\\t&quot;, row.names=1) 2.2 Create working objects Transform the original data files into working objects for downstream analyses. 2.2.1 Filter reads by coverage read_counts &lt;- read_counts %&gt;% semi_join(genome_metadata, by = &quot;genome&quot;) min_coverage=0.3 read_counts_filt &lt;- genome_coverage %&gt;% mutate(across(where(is.numeric), ~ ifelse(. &gt; min_coverage, 1, 0))) %&gt;% mutate(across(-1, ~ . * read_counts[[cur_column()]])) 2.2.2 Transform reads into genome counts readlength=150 genome_counts &lt;- read_counts %&gt;% mutate(across(where(is.numeric), ~ . / (genome_metadata$length / readlength) )) readlength=150 genome_counts_filt &lt;- read_counts_filt %&gt;% mutate(across(where(is.numeric), ~ . / (genome_metadata$length / readlength) )) 2.3 Prepare color scheme AlberdiLab projects use unified color schemes developed for the Earth Hologenome Initiative, to facilitate figure interpretation. phylum_colors &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, genome_tree$tip.label)) %&gt;% select(phylum, colors) %&gt;% unique() %&gt;% arrange(phylum) %&gt;% pull(colors, name=phylum) 2.4 Wrap working objects All working objects are wrapped into a single Rdata object to facilitate downstream usage. save(sample_metadata, genome_metadata, read_counts, genome_counts, genome_counts_filt, genome_tree, genome_gifts, phylum_colors, file = &quot;data/data.Rdata&quot;) "],["data-summary.html", "Chapter 3 Data summary", " Chapter 3 Data summary load(&quot;data/data.Rdata&quot;) Summary of sampled individuals and analysed faecal samples. #number of samples length(sample_metadata$EHI_number) [1] 105 #number of samples by transect sample_metadata %&gt;% group_by(Transect) %&gt;% summarise(n_samples = length(EHI_number)) %&gt;% tt() .table td.tinytable_css_kqo5k86y39dbg18t4rt8, .table th.tinytable_css_kqo5k86y39dbg18t4rt8 { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; } .table td.tinytable_css_5qswu62p30hmd3bl84wm, .table th.tinytable_css_5qswu62p30hmd3bl84wm { border-bottom: solid #d3d8dc 0.1em; } Transect n_samples Aisa 22 Aran 37 Sentein 19 Tourmalet 27 #number of samples by transect and elevation sample_metadata %&gt;% group_by(Transect, Elevation) %&gt;% summarise(n_samples = length(EHI_number)) %&gt;% tt() .table td.tinytable_css_n8knv0bo8hgfrxjhd8gb, .table th.tinytable_css_n8knv0bo8hgfrxjhd8gb { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; } .table td.tinytable_css_4jqpl2wi9qyb91s125ww, .table th.tinytable_css_4jqpl2wi9qyb91s125ww { border-bottom: solid #d3d8dc 0.1em; } Transect Elevation n_samples Aisa 1250 6 Aisa 1450 6 Aisa 1650 4 Aisa 1850 6 Aran 1000 6 Aran 1080 7 Aran 1340 5 Aran 1500 6 Aran 1650 7 Aran 1850 6 Sentein 941 5 Sentein 1260 4 Sentein 1628 5 Sentein 1873 5 Tourmalet 953 5 Tourmalet 1255 4 Tourmalet 1561 4 Tourmalet 1797 4 Tourmalet 2065 2 Tourmalet 2134 3 Tourmalet 2306 5 #n of analysed faecal samples ncol(read_counts) [1] 106 Geographical location of sampled lizards in the Pyrenees. #Summarise for generating map options(dplyr.summarise.inform = FALSE) sample_metadata_summary &lt;- sample_metadata %&gt;% #Group by geography and count samples select(EHI_number, latitude, longitude, Transect) %&gt;% group_by(latitude, longitude, Transect) %&gt;% summarize(count = n()) %&gt;% ungroup() #plotting on map ## Determine the longitude and latitude ranges lon_range &lt;- range(sample_metadata_summary$longitude, na.rm = TRUE) lat_range &lt;- range(sample_metadata_summary$latitude, na.rm = TRUE) sample_metadata_summary %&gt;% ggplot(.) + #render map geom_map( data=map_data(&quot;world&quot;), map = map_data(&quot;world&quot;), aes(long, lat, map_id=region), color = &quot;white&quot;, fill = &quot;#cccccc&quot;, linewidth = 0.2 ) + #render points geom_point( aes(x=longitude,y=latitude, color=Transect), alpha=0.5, shape=16) + #add general plot layout theme_minimal() + theme(legend.position = &quot;right&quot;, axis.title.x=element_blank(), axis.title.y=element_blank() ) + coord_map(&quot;mercator&quot;, xlim = lon_range, ylim = lat_range) "],["data-statistics.html", "Chapter 4 Data statistics 4.1 Sequencing reads statistics 4.2 Sequencing depth 4.3 DNA fractions 4.4 Recovered microbial fraction", " Chapter 4 Data statistics 4.1 Sequencing reads statistics sample_metadata %&gt;% summarise(Total=sum(reads_post_fastp * 150 / 1000000000) %&gt;% round(2), mean=mean(reads_post_fastp * 150 / 1000000000) %&gt;% round(2), sd=sd(reads_post_fastp * 150 / 1000000000) %&gt;% round(2)) %&gt;% unite(&quot;Average&quot;,mean, sd, sep = &quot; ± &quot;, remove = TRUE) %&gt;% tt() .table td.tinytable_css_l30evtwl1zkw7lbck7bo, .table th.tinytable_css_l30evtwl1zkw7lbck7bo { border-bottom: solid #d3d8dc 0.1em; } .table td.tinytable_css_4c91w8g75gwhk6n4kpaq, .table th.tinytable_css_4c91w8g75gwhk6n4kpaq { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; } Total Average 652.04 6.21 ± 2.77 4.2 Sequencing depth sequencing_depth &lt;- read_counts %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% colSums() 4.3 DNA fractions sequence_fractions &lt;- read_counts %&gt;% pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;value&quot;) %&gt;% group_by(sample) %&gt;% summarise(mags = sum(value)) %&gt;% left_join(sample_metadata, by = join_by(sample == EHI_number)) %&gt;% select(sample,mags,metagenomic_bases,host_bases,bases_lost_fastp_percent) %&gt;% mutate(mags_bases = mags*146) %&gt;% mutate(lowqual_bases = ((metagenomic_bases+host_bases)/(1-bases_lost_fastp_percent))-(metagenomic_bases+host_bases)) %&gt;% mutate(unmapped_bases = metagenomic_bases - mags_bases) %&gt;% mutate(unmapped_bases = ifelse(unmapped_bases &lt; 0, 0, unmapped_bases)) %&gt;% select(sample, lowqual_bases, host_bases, unmapped_bases, mags_bases) sequence_fractions %&gt;% mutate_at(vars(-sample), ~./1000000000) %&gt;% rename(&quot;Sample&quot;=1, &quot;Low quality&quot;=2, &quot;Mapped to host&quot;=3, &quot;Unmapped&quot;=4, &quot;Mapped to MAGs&quot;=5) %&gt;% tt() .table td.tinytable_css_qi67kn3nj2mlkfxi4abf, .table th.tinytable_css_qi67kn3nj2mlkfxi4abf { border-bottom: solid #d3d8dc 0.1em; } .table td.tinytable_css_49q2ujaz677smalw429m, .table th.tinytable_css_49q2ujaz677smalw429m { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; } Sample Low quality Mapped to host Unmapped Mapped to MAGs EHI00069 1.1441521 0.920532571 2.0517957 4.1058263 EHI00070 0.2348919 0.937599880 0.8332809 1.6364476 EHI00072 0.3717090 0.078319449 0.9507999 4.0430716 EHI00073 0.1504762 0.007300164 0.6458066 1.8453666 EHI00074 0.5700275 0.034671349 1.7906564 5.7526051 EHI00075 0.2702205 0.444390387 0.9599202 2.4896265 EHI00076 0.3350547 0.081391903 1.4172925 3.8389468 EHI00077 0.1353495 0.641770627 0.3885242 1.3947384 EHI00079 0.3377906 2.721037061 0.5653554 0.8084465 EHI00080 0.7291964 1.605187153 2.3611523 2.6883254 EHI00081 0.2184180 0.727448090 0.5615342 1.3358755 EHI00085 0.2300087 0.212261834 0.5665817 1.9281604 EHI00086 0.3471176 0.417593612 1.0770869 1.7440344 EHI00088 0.2278663 0.071769210 0.5556301 3.0141044 EHI00089 0.1751910 0.034915171 0.5162821 1.9576155 EHI00091 0.2622745 0.230039482 0.8255133 2.4924602 EHI00092 0.3917724 0.170842450 1.0255541 4.9181624 EHI00093 0.3725739 0.199633318 1.1938025 2.3137473 EHI00095 0.1768550 0.255990148 0.3449738 1.9242079 EHI00097 0.5249214 0.366551383 0.8028468 2.9685729 EHI00098 0.3176395 0.040047629 1.7271586 3.1498120 EHI00100 0.4386907 2.398470758 0.8228622 4.1093643 EHI00101 0.7257361 0.451928365 4.9291736 1.9943098 EHI00103 0.2036111 0.843529516 0.5714195 1.3395113 EHI00104 0.1769983 0.643701669 0.6807099 1.2574891 EHI00105 0.2711051 0.005694785 0.9087805 2.7311372 EHI00106 1.1082626 1.058626752 1.8709694 2.0746217 EHI00107 0.3818355 0.184257358 1.5836979 3.0592637 EHI00108 0.3420046 0.394171066 0.5356632 2.7441687 EHI00110 0.3648881 0.591747269 0.5588077 2.6145261 EHI00111 0.4392502 0.151954279 1.1992388 3.5773008 EHI00112 0.7134927 0.085183185 1.1328903 3.6469985 EHI00113 0.8620893 0.617092903 1.4939464 7.3254896 EHI00114 0.4127445 0.087174427 2.3985081 4.6641659 EHI00115 0.6290438 0.062352261 2.6081814 3.0085937 EHI00116 0.4130247 0.039596686 0.8559983 4.7270478 EHI00117 0.6850197 0.423816725 1.2454024 7.0782364 EHI00118 0.3963952 0.784391517 0.9049477 3.7006953 EHI00119 0.4448016 0.038727564 1.5277021 4.6761692 EHI00120 0.3549466 0.051038023 0.7165254 3.8122875 EHI00121 0.2487524 1.196143747 0.9172490 1.9448859 EHI00122 0.3967333 0.056247498 1.7140526 5.3880487 EHI00124 0.3101617 0.113171041 1.6986936 3.2732918 EHI00125 0.3008464 0.313488992 1.2381544 3.1620784 EHI00128 0.3688688 0.149336152 1.0558709 2.9648899 EHI00129 0.2827708 0.212726094 0.7352845 2.7738704 EHI00130 0.2917071 0.082344877 1.0170695 2.1151693 EHI00131 0.1940832 0.943415382 0.4863996 1.2048589 EHI00133 0.2569782 0.429506925 0.3484713 3.3747982 EHI00134 0.5620395 1.988142143 1.9520876 3.9427347 EHI00137 0.2948339 0.250489910 1.0341318 2.4844583 EHI00138 0.2673241 0.179238573 0.5826993 2.8578460 EHI00139 0.3001940 0.034225947 0.9413847 2.1426906 EHI00176 0.7041777 0.100761385 0.7196926 2.7465205 EHI00177 0.2555111 0.016053624 0.5228890 2.1639513 EHI00178 0.2415179 0.045338274 1.3634101 2.6038297 EHI00179 0.1816121 0.023148016 0.9401620 2.3926575 EHI00180 0.5363481 0.037200326 0.7786810 2.4699635 EHI00181 0.1978972 0.301399301 0.4733087 2.4456488 EHI00422 0.1660426 0.058188268 0.4631427 2.3301737 EHI00426 0.6048076 0.374841259 1.6091057 5.6754435 EHI00428 0.4361908 0.354862015 0.9866519 3.7380622 EHI00433 0.6941201 0.730117194 1.6017157 3.7066518 EHI00438 0.2938182 0.100587490 0.8490354 4.7546269 EHI00441 0.5217550 0.202212815 2.3199030 6.8309541 EHI00451 0.4696437 0.318898071 1.2315115 5.0794188 EHI00456 0.5747753 0.097152439 0.6337192 4.7496272 EHI00458 0.5541280 0.326249839 1.7364884 4.9185106 EHI00462 0.5139086 0.330809687 1.3870295 4.8485639 EHI00464 0.5604449 0.962080506 1.5487451 5.0533364 EHI00465 0.1355889 0.041795770 0.7088416 1.4262076 EHI00467 0.4291035 0.854761759 1.6444666 3.7590494 EHI00470 0.6625583 1.679223689 1.8675738 8.1840405 EHI00472 0.3619652 0.586418138 1.8074071 3.3732380 EHI00473 0.4841385 0.477433785 1.2481742 4.8043613 EHI00477 0.4782444 0.087653441 2.7186490 3.7317223 EHI00479 0.8395454 0.074374376 1.9936025 12.8156007 EHI00480 0.7475415 0.793212202 3.1481051 4.3553735 EHI00481 0.5040521 0.094726409 1.3739735 5.3792865 EHI00483 0.4545170 1.532171008 0.8653232 4.7402692 EHI00484 0.3037426 0.269250378 1.3870200 5.2563238 EHI00488 0.4900356 2.212642337 2.0850126 4.3632065 EHI00490 0.6234248 0.180662818 3.5993286 7.8297890 EHI00493 0.4026458 2.030328521 2.7098633 2.4780854 EHI00496 0.4536382 0.415085470 1.7045368 6.1699650 EHI00499 3.5142773 2.204637514 3.4291586 3.2083353 EHI00504 0.5335873 2.167943278 1.2709452 4.9663386 EHI00506 0.7953759 0.639271744 1.7418071 8.0883653 EHI00507 0.4077748 0.136492692 1.5474048 5.5083429 EHI00512 0.6299478 8.067540048 0.5964127 1.3433168 EHI00514 0.4590217 0.336676348 1.5023882 6.2571308 EHI00518 0.4082296 0.012341521 1.0122951 5.8379043 EHI00524 0.4918121 1.320091255 2.0577845 4.8996823 EHI00525 0.3238390 0.105964164 1.1420157 5.0531429 EHI00527 0.5623443 0.128178226 2.3107744 7.6106934 EHI00529 0.3350620 0.129930230 1.3102065 5.1130080 EHI00536 0.4725239 0.010876654 1.2534820 7.7176039 EHI00537 0.3665586 0.089579032 2.4631156 1.4492223 EHI00538 0.4501201 2.638414328 0.6397030 3.1637601 EHI00541 0.7086242 0.152318595 1.4153324 6.8350770 EHI00547 1.0225445 2.648359289 7.0526142 6.1760904 EHI00566 0.5706734 0.218664855 1.7237625 7.3779017 EHI00567 0.4565067 0.133011864 1.9051503 4.4466414 EHI00568 0.5246686 0.219110833 1.7989251 3.5919103 EHI00569 0.6859077 0.169999886 2.6761990 6.7957645 sequence_fractions %&gt;% pivot_longer(!sample, names_to = &quot;fraction&quot;, values_to = &quot;value&quot;) %&gt;% mutate(value = value / 1000000000) %&gt;% mutate(fraction = factor(fraction, levels = c(&quot;lowqual_bases&quot;,&quot;host_bases&quot;,&quot;unmapped_bases&quot;,&quot;mags_bases&quot;))) %&gt;% ggplot(., aes(x = sample, y = value, fill=fraction)) + geom_bar(position=&quot;stack&quot;, stat = &quot;identity&quot;) + scale_fill_manual(name=&quot;Sequence type&quot;, breaks=c(&quot;lowqual_bases&quot;,&quot;host_bases&quot;,&quot;unmapped_bases&quot;,&quot;mags_bases&quot;), labels=c(&quot;Low quality&quot;,&quot;Mapped to host&quot;,&quot;Unmapped&quot;,&quot;Mapped to MAGs&quot;), values=c(&quot;#CCCCCC&quot;, &quot;#bcdee1&quot;, &quot;#d8b8a3&quot;,&quot;#93655c&quot;))+ labs(x = &quot;Samples&quot;, y = &quot;Amount of data (GB)&quot;) + theme_classic() + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1, size=6),legend.position = &quot;bottom&quot;) 4.4 Recovered microbial fraction singlem_table &lt;- sequence_fractions %&gt;% mutate(mags_proportion = round((mags_bases / (mags_bases + unmapped_bases))*100,2)) %&gt;% left_join(sample_metadata, by = join_by(sample == EHI_number)) %&gt;% mutate(singlem_proportion = round(singlem_fraction*100,2)) %&gt;% select(sample,mags_proportion,singlem_proportion) %&gt;% mutate(mags_proportion = ifelse(singlem_proportion == 0, 0, mags_proportion)) %&gt;% #convert zeros to NA mutate(singlem_proportion = ifelse(singlem_proportion == 0, NA, singlem_proportion)) %&gt;% #convert zeros to NA mutate(singlem_proportion = ifelse(singlem_proportion &lt; mags_proportion, NA, singlem_proportion)) %&gt;% #if singlem is smaller, then NA, to simplify plot mutate(singlem_proportion = ifelse(singlem_proportion &gt; 100, 100, singlem_proportion)) #simplify singlem_table %&gt;% pivot_longer(!sample, names_to = &quot;proportion&quot;, values_to = &quot;value&quot;) %&gt;% left_join(sample_metadata, by = join_by(sample == EHI_number)) %&gt;% mutate(proportion = factor(proportion, levels = c(&quot;mags_proportion&quot;,&quot;singlem_proportion&quot;))) %&gt;% ggplot(., aes(x = value, y = sample, color=proportion)) + geom_line(aes(group = sample), color = &quot;#f8a538&quot;) + geom_point() + scale_color_manual(name=&quot;Proportion&quot;, breaks=c(&quot;mags_proportion&quot;,&quot;singlem_proportion&quot;), labels=c(&quot;Recovered&quot;,&quot;Estimated&quot;), values=c(&quot;#52e1e8&quot;, &quot;#876b53&quot;))+ facet_nested(species + sample_type ~ ., scales=&quot;free&quot;,space=&quot;free&quot;)+ theme_classic() + labs(y = &quot;Samples&quot;, x = &quot;Prokaryotic fraction (%)&quot;) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1, size=6), legend.position = &quot;right&quot;, strip.background.y=element_rect(color = NA, fill= &quot;#f4f4f4&quot;)) "],["mag-catalogue.html", "Chapter 5 MAG catalogue 5.1 Genome phylogeny 5.2 Genome quality 5.3 Functional overview 5.4 Functional ordination 5.5 MAGs shared across transects", " Chapter 5 MAG catalogue load(&quot;data/data.Rdata&quot;) 5.1 Genome phylogeny # Generate the phylum color heatmap phylum_heatmap &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% mutate(phylum=str_remove_all(phylum, &quot;p__&quot;)) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, genome_tree$tip.label)) %&gt;% dplyr::select(genome,phylum) %&gt;% mutate(phylum = factor(phylum, levels = unique(phylum))) %&gt;% column_to_rownames(var = &quot;genome&quot;) # Generate Aisa heatmap aisa_heatmap &lt;- genome_counts_filt %&gt;% pivot_longer(!genome,names_to=&quot;sample&quot;,values_to=&quot;abundance&quot;) %&gt;% left_join(sample_metadata,by = join_by(sample == EHI_number)) %&gt;% filter(Transect==&quot;Aisa&quot;) %&gt;% group_by(genome) %&gt;% summarise(presence=ifelse(sum(abundance)&gt;0,&quot;present&quot;,&quot;absent&quot;)) %&gt;% column_to_rownames(var=&quot;genome&quot;) # Generate Aran heatmap aran_heatmap &lt;- genome_counts_filt %&gt;% pivot_longer(!genome,names_to=&quot;sample&quot;,values_to=&quot;abundance&quot;) %&gt;% left_join(sample_metadata,by = join_by(sample == EHI_number)) %&gt;% filter(Transect==&quot;Aran&quot;) %&gt;% group_by(genome) %&gt;% summarise(presence=ifelse(sum(abundance)&gt;0,&quot;present&quot;,&quot;absent&quot;)) %&gt;% column_to_rownames(var=&quot;genome&quot;) # Generate Sentein heatmap sentein_heatmap &lt;- genome_counts_filt %&gt;% pivot_longer(!genome,names_to=&quot;sample&quot;,values_to=&quot;abundance&quot;) %&gt;% left_join(sample_metadata,by = join_by(sample == EHI_number)) %&gt;% filter(Transect==&quot;Sentein&quot;) %&gt;% group_by(genome) %&gt;% summarise(presence=ifelse(sum(abundance)&gt;0,&quot;present&quot;,&quot;absent&quot;)) %&gt;% column_to_rownames(var=&quot;genome&quot;) # Generate Tourmalet heatmap tourmalet_heatmap &lt;- genome_counts_filt %&gt;% pivot_longer(!genome,names_to=&quot;sample&quot;,values_to=&quot;abundance&quot;) %&gt;% left_join(sample_metadata,by = join_by(sample == EHI_number)) %&gt;% filter(Transect==&quot;Tourmalet&quot;) %&gt;% group_by(genome) %&gt;% summarise(presence=ifelse(sum(abundance)&gt;0,&quot;present&quot;,&quot;absent&quot;)) %&gt;% column_to_rownames(var=&quot;genome&quot;) # Generate prevalence data prevalence_data &lt;- genome_counts_filt %&gt;% pivot_longer(!genome,names_to=&quot;sample&quot;,values_to=&quot;abundance&quot;) %&gt;% left_join(sample_metadata,by = join_by(sample == EHI_number)) %&gt;% group_by(genome,Transect) %&gt;% summarise(presence=ifelse(sum(abundance)&gt;0,1,0)) %&gt;% group_by(genome) %&gt;% summarise(prevalence=sum(presence)) # Generate basal tree circular_tree &lt;- force.ultrametric(genome_tree, method=&quot;extend&quot;) %&gt;% # extend to ultrametric for the sake of visualisation ggtree(., layout=&quot;fan&quot;, open.angle=10, size=0.5) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** # Add phylum ring circular_tree &lt;- gheatmap(circular_tree, phylum_heatmap, offset=0, width=0.05, colnames=FALSE) + scale_fill_manual(values=phylum_colors) + theme(legend.position = &quot;none&quot;, plot.margin = margin(0, 0, 0, 0), panel.margin = margin(0, 0, 0, 0)) + new_scale_fill() # Add Aisa ring circular_tree &lt;- gheatmap(circular_tree, aisa_heatmap, offset=0.2, width=0.05, colnames=FALSE) + scale_fill_manual(values=c(&quot;#ffffff&quot;,&quot;#e5bd5b&quot;)) + theme(legend.position = &quot;none&quot;, plot.margin = margin(0, 0, 0, 0), panel.margin = margin(0, 0, 0, 0)) + new_scale_fill() # Add Aran ring circular_tree &lt;- gheatmap(circular_tree, aran_heatmap, offset=0.3, width=0.05, colnames=FALSE) + scale_fill_manual(values=c(&quot;#ffffff&quot;,&quot;#6b7398&quot;)) + theme(legend.position = &quot;none&quot;, plot.margin = margin(0, 0, 0, 0), panel.margin = margin(0, 0, 0, 0)) + new_scale_fill() # Add Sentein Verde ring circular_tree &lt;- gheatmap(circular_tree, sentein_heatmap, offset=0.4, width=0.05, colnames=FALSE) + scale_fill_manual(values=c(&quot;#ffffff&quot;,&quot;#e2815a&quot;)) + theme(legend.position = &quot;none&quot;, plot.margin = margin(0, 0, 0, 0), panel.margin = margin(0, 0, 0, 0)) + new_scale_fill() # Add Tourmalet ring circular_tree &lt;- gheatmap(circular_tree, tourmalet_heatmap, offset=0.5, width=0.05, colnames=FALSE) + scale_fill_manual(values=c(&quot;#ffffff&quot;,&quot;#876b96&quot;)) + theme(legend.position = &quot;none&quot;, plot.margin = margin(0, 0, 0, 0), panel.margin = margin(0, 0, 0, 0)) + new_scale_fill() # Add prevalence ring circular_tree &lt;- circular_tree + new_scale_fill() + scale_fill_manual(values = &quot;#cccccc&quot;) + geom_fruit( data=prevalence_data, geom=geom_bar, mapping = aes(x=prevalence, y=genome), offset = 0.4, orientation=&quot;y&quot;, stat=&quot;identity&quot;) # Flush color scale to enable a new color scheme in the next ring circular_tree &lt;- circular_tree + new_scale_fill() # Add completeness ring circular_tree &lt;- circular_tree + new_scale_fill() + scale_fill_gradient(low = &quot;#d1f4ba&quot;, high = &quot;#f4baba&quot;) + geom_fruit( data=genome_metadata, geom=geom_bar, mapping = aes(x=completeness, y=genome, fill=contamination), offset = 0.55, orientation=&quot;y&quot;, stat=&quot;identity&quot;) # Add genome-size ring circular_tree &lt;- circular_tree + new_scale_fill() + scale_fill_manual(values = &quot;#cccccc&quot;) + geom_fruit( data=genome_metadata, geom=geom_bar, mapping = aes(x=length, y=genome), offset = 0.05, orientation=&quot;y&quot;, stat=&quot;identity&quot;) # Add text circular_tree &lt;- circular_tree + annotate(&#39;text&#39;, x=2.8, y=0, label=&#39; Phylum&#39;, family=&#39;arial&#39;, size=3.5) + annotate(&#39;text&#39;, x=3.1, y=0, label=&#39; Location&#39;, family=&#39;arial&#39;, size=3.5) + annotate(&#39;text&#39;, x=3.8, y=0, label=&#39; Location prevalence&#39;, family=&#39;arial&#39;, size=3.5) + annotate(&#39;text&#39;, x=6.0, y=0, label=&#39; Genome quality&#39;, family=&#39;arial&#39;,size=3.5)+ annotate(&#39;text&#39;, x=6.4, y=0, label=&#39; Genome size&#39;, family=&#39;arial&#39;, size=3.5) #Plot circular tree circular_tree %&gt;% open_tree(30) %&gt;% rotate_tree(90) 5.2 Genome quality genome_metadata %&gt;% summarise(completeness_mean=mean(completeness) %&gt;% round(2) %&gt;% as.character(), completeness_sd=sd(completeness) %&gt;% round(2) %&gt;% as.character(), contamination_mean=mean(contamination) %&gt;% round(2), contamination_sd=sd(contamination) %&gt;% round(2)) %&gt;% unite(&quot;Completeness&quot;,completeness_mean, completeness_sd, sep = &quot; ± &quot;, remove = TRUE) %&gt;% unite(&quot;Contamination&quot;,contamination_mean, contamination_sd, sep = &quot; ± &quot;, remove = TRUE) %&gt;% tt() .table td.tinytable_css_b4rpjbeg2j9b7vgny0it, .table th.tinytable_css_b4rpjbeg2j9b7vgny0it { border-bottom: solid #d3d8dc 0.1em; } .table td.tinytable_css_2baaknftp3mn0p0ezvl0, .table th.tinytable_css_2baaknftp3mn0p0ezvl0 { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; } Completeness Contamination 79.99 ± 15.48 2.19 ± 1.94 #Generate quality biplot genome_biplot &lt;- genome_metadata %&gt;% select(c(genome,domain,phylum,completeness,contamination,length)) %&gt;% arrange(match(genome, rev(genome_tree$tip.label))) %&gt;% #sort MAGs according to phylogenetic tree ggplot(aes(x=completeness,y=contamination,size=length,color=phylum)) + geom_point(alpha=0.7) + ylim(c(10,0)) + scale_color_manual(values=phylum_colors) + labs(y= &quot;Contamination&quot;, x = &quot;Completeness&quot;) + theme_classic() + theme(legend.position = &quot;none&quot;) #Generate contamination boxplot genome_contamination &lt;- genome_metadata %&gt;% ggplot(aes(y=contamination)) + ylim(c(10,0)) + geom_boxplot(colour = &quot;#999999&quot;, fill=&quot;#cccccc&quot;) + theme_void() + theme(legend.position = &quot;none&quot;, axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank(), plot.margin = unit(c(0, 0, 0.40, 0),&quot;inches&quot;)) #add bottom-margin (top, right, bottom, left) #Generate completeness boxplot genome_completeness &lt;- genome_metadata %&gt;% ggplot(aes(x=completeness)) + xlim(c(50,100)) + geom_boxplot(colour = &quot;#999999&quot;, fill=&quot;#cccccc&quot;) + theme_void() + theme(legend.position = &quot;none&quot;, axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank(), plot.margin = unit(c(0, 0, 0, 0.50),&quot;inches&quot;)) #add left-margin (top, right, bottom, left) #Render composite figure grid.arrange(grobs = list(genome_completeness,genome_biplot,genome_contamination), layout_matrix = rbind(c(1,1,1,1,1,1,1,1,1,1,1,4), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3))) 5.3 Functional overview # Aggregate basal GIFT into elements function_table &lt;- genome_gifts %&gt;% to.elements(., GIFT_db) # Generate basal tree function_tree &lt;- force.ultrametric(genome_tree, method=&quot;extend&quot;) %&gt;% ggtree(., size = 0.3) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** #Add phylum colors next to the tree tips function_tree &lt;- gheatmap(function_tree, phylum_heatmap, offset=0, width=0.1, colnames=FALSE) + scale_fill_manual(values=phylum_colors) + labs(fill=&quot;Phylum&quot;) #Reset fill scale to use a different colour profile in the heatmap function_tree &lt;- function_tree + new_scale_fill() #Add functions heatmap function_tree &lt;- gheatmap(function_tree, function_table, offset=0.5, width=3.5, colnames=FALSE) + vexpand(.08) + coord_cartesian(clip = &quot;off&quot;) + scale_fill_gradient(low = &quot;#f4f4f4&quot;, high = &quot;steelblue&quot;, na.value=&quot;white&quot;) + labs(fill=&quot;GIFT&quot;) #Reset fill scale to use a different colour profile in the heatmap function_tree &lt;- function_tree + new_scale_fill() # Add completeness barplots function_tree &lt;- function_tree + geom_fruit(data=genome_metadata, geom=geom_bar, grid.params=list(axis=&quot;x&quot;, text.size=2, nbreak = 1), axis.params=list(vline=TRUE), mapping = aes(x=length, y=genome, fill=completeness), offset = 3.8, orientation=&quot;y&quot;, stat=&quot;identity&quot;) + scale_fill_gradient(low = &quot;#cf8888&quot;, high = &quot;#a2cc87&quot;) + labs(fill=&quot;Genome\\ncompleteness&quot;) function_tree 5.4 Functional ordination # Generate the tSNE ordination tSNE_function &lt;- Rtsne(X=function_table, dims = 2, check_duplicates = FALSE) # Plot the ordination function_ordination &lt;- tSNE_function$Y %&gt;% as.data.frame() %&gt;% mutate(genome=rownames(function_table)) %&gt;% inner_join(genome_metadata, by=&quot;genome&quot;) %&gt;% rename(tSNE1=&quot;V1&quot;, tSNE2=&quot;V2&quot;) %&gt;% select(genome,phylum,tSNE1,tSNE2, length) %&gt;% ggplot(aes(x = tSNE1, y = tSNE2, color = phylum, size=length))+ geom_point(shape=16, alpha=0.7) + scale_color_manual(values=phylum_colors) + theme_minimal() + labs(color=&quot;Phylum&quot;, size=&quot;Genome size&quot;) + guides(color = guide_legend(override.aes = list(size = 5))) # enlarge Phylum dots in legend function_ordination 5.5 MAGs shared across transects genome_counts_rel &lt;- genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% column_to_rownames(., &quot;genome&quot;) genome_counts_rel_pa=1*(genome_counts_rel&gt;0) table_upset_analysis_cont=t(aggregate(t(genome_counts_rel_pa),by=list(sample_metadata$Transect),FUN=sum)[,-1]) colnames(table_upset_analysis_cont)=levels(as.factor(sample_metadata$Transect)) table_upset_analysis=(table_upset_analysis_cont&gt;0)*1 table_upset_analysis=data.frame(table_upset_analysis) table_upset_analysis=apply(table_upset_analysis,2,as.integer) rownames(table_upset_analysis) &lt;- rownames(genome_counts_rel_pa) locationcolors=c(&quot;#e5bd5b&quot;, &quot;#6b7398&quot;,&quot;#e2815a&quot;, &quot;#876b96&quot;) upset(as.data.frame(table_upset_analysis), keep.order = T, sets = rev(c(&quot;Aisa&quot;,&quot;Aran&quot;,&quot;Sentein&quot;,&quot;Tourmalet&quot;)), sets.bar.color= rev(locationcolors), mb.ratio = c(0.55, 0.45), order.by = &quot;freq&quot;) "],["community-composition.html", "Chapter 6 Community composition 6.1 Taxonomy overview 6.2 Taxonomy boxplot", " Chapter 6 Community composition load(&quot;data/data.Rdata&quot;) 6.1 Taxonomy overview 6.1.1 Stacked barplot genome_counts_filt_met&lt;-genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS normalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% #reduce to minimum number of columns left_join(., genome_metadata, by = join_by(genome == genome)) %&gt;% #append genome metadata left_join(., sample_metadata, by = join_by(sample == EHI_number)) %&gt;% #append sample metadata filter(count &gt; 0) #filter 0 counts genome_counts_filt_met$Elevation&lt;-as.factor(genome_counts_filt_met$Elevation) # Create an interaction variable for elevation and sample genome_counts_filt_met$interaction_var &lt;- interaction(genome_counts_filt_met$sample, genome_counts_filt_met$Elevation) # Plot stacked barplot ggplot(genome_counts_filt_met, aes(x=interaction_var,y=count,fill=phylum, group=phylum))+ #grouping enables keeping the same sorting of taxonomic units geom_bar(stat=&quot;identity&quot;, colour=&quot;white&quot;, linewidth=0.1)+ #plot stacked bars with white borders scale_fill_manual(values=phylum_colors) + labs(y = &quot;Relative abundance&quot;, x=&quot;Elevation (m)&quot;) + guides(fill = guide_legend(ncol = 3)) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), panel.background = element_blank(), panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(linewidth = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), legend.position = &quot;none&quot;, legend.title = element_blank(), legend.text = element_text(size=7)) + facet_nested(.~Transect+Elevation, scales = &quot;free&quot;) 6.1.1.1 Number of bacteria phyla [1] 16 6.1.1.2 Bacteria phyla in Aisa transect phylum_summary_aisa &lt;- genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS normalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% left_join(sample_metadata, by = join_by(sample == EHI_number)) %&gt;% left_join(genome_metadata, by = join_by(genome == genome)) %&gt;% group_by(sample,phylum) %&gt;% summarise(relabun=sum(count)) %&gt;% left_join(sample_metadata, by = join_by(sample == EHI_number)) %&gt;% filter(Transect==&quot;Aisa&quot;)%&gt;% filter(relabun &gt; 0) # Number of bacterial phyla Aisa length(unique(phylum_summary_aisa$phylum)) [1] 13 # Bacteria phyla phylum_summary_aisa %&gt;% group_by(phylum) %&gt;% summarise(total_mean=mean(relabun*100, na.rm=TRUE), total_sd=sd(relabun*100, na.rm=TRUE)) %&gt;% mutate(total=str_c(round(total_mean,2),&quot;±&quot;,round(total_sd,2))) %&gt;% arrange(-total_mean) %&gt;% dplyr::select(phylum,total) %&gt;% tt() .table td.tinytable_css_t6d3021b9adcl9d7vn9q, .table th.tinytable_css_t6d3021b9adcl9d7vn9q { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; } .table td.tinytable_css_34evcpsfnojh9h6e0ks6, .table th.tinytable_css_34evcpsfnojh9h6e0ks6 { border-bottom: solid #d3d8dc 0.1em; } phylum total p__Bacillota_A 42.18±15.99 p__Bacteroidota 39.09±17.57 p__Pseudomonadota 5.27±6.75 p__Bacillota 3.99±3.67 p__Verrucomicrobiota 3.53±3.26 p__Campylobacterota 3.29±3.44 p__Desulfobacterota 2.48±1.93 p__Fusobacteriota 1.35±1.33 p__Bacillota_C 1.29±1.53 p__Cyanobacteriota 0.82±0.49 p__Chlamydiota 0.7±0.63 p__Bacillota_B 0.53±0.41 p__Actinomycetota 0.18±0.09 6.1.1.3 Bacteria phyla in Aran transect phylum_summary_aran &lt;- genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS normalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% left_join(sample_metadata, by = join_by(sample == EHI_number)) %&gt;% left_join(genome_metadata, by = join_by(genome == genome)) %&gt;% group_by(sample,phylum) %&gt;% summarise(relabun=sum(count)) %&gt;% left_join(sample_metadata, by = join_by(sample == EHI_number)) %&gt;% filter(Transect==&quot;Aran&quot;)%&gt;% filter(relabun &gt; 0) # Number of bacterial phyla Aran length(unique(phylum_summary_aran$phylum)) [1] 14 # Bacteria phyla phylum_summary_aran %&gt;% group_by(phylum) %&gt;% summarise(total_mean=mean(relabun*100, na.rm=TRUE), total_sd=sd(relabun*100, na.rm=TRUE)) %&gt;% mutate(total=str_c(round(total_mean,2),&quot;±&quot;,round(total_sd,2))) %&gt;% arrange(-total_mean) %&gt;% dplyr::select(phylum,total) %&gt;% tt() .table td.tinytable_css_oh0orwfuacz1d3smwhwz, .table th.tinytable_css_oh0orwfuacz1d3smwhwz { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; } .table td.tinytable_css_hgkr45eci6t9eaenzmy5, .table th.tinytable_css_hgkr45eci6t9eaenzmy5 { border-bottom: solid #d3d8dc 0.1em; } phylum total p__Bacillota_A 41.7±16.74 p__Bacteroidota 36.85±14.71 p__Pseudomonadota 7.27±11.02 p__Campylobacterota 5.5±8.27 p__Bacillota 4.64±5.26 p__Fusobacteriota 4.01±8.68 p__Desulfobacterota 2.75±2.22 p__Verrucomicrobiota 2.38±3.15 p__Spirochaetota 1.22±1.19 p__Bacillota_C 1.14±1.18 p__Cyanobacteriota 0.72±0.54 p__Deferribacterota NA p__Bacillota_B 0.44±0.45 p__Actinomycetota 0.3±0.26 6.1.1.4 Bacteria phyla in Sentein transect phylum_summary_sentein &lt;- genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS normalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% left_join(sample_metadata, by = join_by(sample == EHI_number)) %&gt;% left_join(genome_metadata, by = join_by(genome == genome)) %&gt;% group_by(sample,phylum) %&gt;% summarise(relabun=sum(count)) %&gt;% left_join(sample_metadata, by = join_by(sample == EHI_number)) %&gt;% filter(Transect==&quot;Sentein&quot;)%&gt;% filter(relabun &gt; 0.) # Number of bacterial phyla Sentein length(unique(phylum_summary_sentein$phylum)) [1] 15 # Bacteria phyla phylum_summary_sentein %&gt;% group_by(phylum) %&gt;% summarise(total_mean=mean(relabun*100, na.rm=TRUE), total_sd=sd(relabun*100, na.rm=TRUE)) %&gt;% mutate(total=str_c(round(total_mean,2),&quot;±&quot;,round(total_sd,2))) %&gt;% arrange(-total_mean) %&gt;% dplyr::select(phylum,total) %&gt;% tt() .table td.tinytable_css_zrr05nh9twkqrumhp9rn, .table th.tinytable_css_zrr05nh9twkqrumhp9rn { border-bottom: solid #d3d8dc 0.1em; } .table td.tinytable_css_3kbbsvawvz6so4dxr1m1, .table th.tinytable_css_3kbbsvawvz6so4dxr1m1 { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; } phylum total p__Bacteroidota 40.72±14.71 p__Bacillota_A 34.82±14.88 p__Bacillota 6.17±10.94 p__Pseudomonadota 5.19±5.3 p__Campylobacterota 4.8±5.42 p__Desulfobacterota 4.77±8.22 p__Spirochaetota 4.76±5.8 p__Chlamydiota 3.19±3.26 p__Fusobacteriota 2.17±5.62 p__Verrucomicrobiota 1.34±1.49 p__Cyanobacteriota 0.78±0.37 p__Actinomycetota 0.77±1.29 p__Bacillota_C 0.61±0.51 p__Bacillota_B 0.16±0.07 p__Deferribacterota NA 6.1.1.5 Bacteria phyla in Tourmalet transect phylum_summary_tourmalet &lt;- genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS normalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% left_join(sample_metadata, by = join_by(sample == EHI_number)) %&gt;% left_join(genome_metadata, by = join_by(genome == genome)) %&gt;% group_by(sample,phylum) %&gt;% summarise(relabun=sum(count)) %&gt;% left_join(sample_metadata, by = join_by(sample == EHI_number)) %&gt;% filter(Transect==&quot;Tourmalet&quot;) # Number of bacterial phyla Tourmalet length(unique(phylum_summary_tourmalet$phylum)) [1] 16 # Bacteria phyla phylum_summary_tourmalet %&gt;% group_by(phylum) %&gt;% summarise(total_mean=mean(relabun*100, na.rm=TRUE), total_sd=sd(relabun*100, na.rm=TRUE)) %&gt;% mutate(total=str_c(round(total_mean,2),&quot;±&quot;,round(total_sd,2))) %&gt;% arrange(-total_mean) %&gt;% dplyr::select(phylum,total) %&gt;% tt() .table td.tinytable_css_gt7n63kmxxwzr1cug08q, .table th.tinytable_css_gt7n63kmxxwzr1cug08q { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; } .table td.tinytable_css_5z66voeeow4gwp3c12m1, .table th.tinytable_css_5z66voeeow4gwp3c12m1 { border-bottom: solid #d3d8dc 0.1em; } phylum total p__Bacillota_A 41.87±15.42 p__Bacteroidota 39.29±15.9 p__Bacillota 5.87±5.94 p__Pseudomonadota 5.3±5.15 p__Campylobacterota 2.32±2.71 p__Desulfobacterota 1.58±2.02 p__Verrucomicrobiota 0.94±1.13 p__Bacillota_C 0.83±0.53 p__Cyanobacteriota 0.53±0.82 p__Fusobacteriota 0.4±0.81 p__Actinomycetota 0.39±0.73 p__Spirochaetota 0.23±0.51 p__Deferribacterota 0.16±0.51 p__Bacillota_B 0.16±0.23 p__Chlamydiota 0.11±0.53 p__Synergistota 0.03±0.16 6.1.2 Phylum relative abundances phylum_summary &lt;- genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS normalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% left_join(sample_metadata, by = join_by(sample == EHI_number)) %&gt;% left_join(genome_metadata, by = join_by(genome == genome)) %&gt;% group_by(sample,phylum) %&gt;% summarise(relabun=sum(count)) phylum_summary %&gt;% group_by(phylum) %&gt;% summarise(total_mean=mean(relabun*100, na.rm=T), total_sd=sd(relabun*100, na.rm=T)) %&gt;% mutate(total=str_c(round(total_mean,2),&quot;±&quot;,round(total_sd,2))) %&gt;% arrange(-total_mean) %&gt;% dplyr::select(phylum,total) %&gt;% tt() .table td.tinytable_css_t6yobmm6i025fowvepm3, .table th.tinytable_css_t6yobmm6i025fowvepm3 { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; } .table td.tinytable_css_0d02j863tcy3nvoyef83, .table th.tinytable_css_0d02j863tcy3nvoyef83 { border-bottom: solid #d3d8dc 0.1em; } phylum total p__Bacillota_A 40.6±15.93 p__Bacteroidota 38.3±15.88 p__Pseudomonadota 5.83±7.87 p__Bacillota 4.59±6.37 p__Campylobacterota 3.47±5.63 p__Desulfobacterota 2.68±4.05 p__Verrucomicrobiota 1.53±2.43 p__Bacillota_C 0.95±1.05 p__Fusobacteriota 0.91±3.7 p__Cyanobacteriota 0.4±0.6 p__Spirochaetota 0.22±0.97 p__Bacillota_B 0.19±0.32 p__Actinomycetota 0.17±0.52 p__Chlamydiota 0.1±0.61 p__Deferribacterota 0.05±0.27 p__Synergistota 0.01±0.08 phylum_arrange &lt;- phylum_summary %&gt;% group_by(phylum) %&gt;% summarise(mean=mean(relabun)) %&gt;% arrange(-mean) %&gt;% select(phylum) %&gt;% pull() phylum_summary %&gt;% filter(phylum %in% phylum_arrange) %&gt;% mutate(phylum=factor(phylum,levels=rev(phylum_arrange))) %&gt;% ggplot(aes(x=relabun, y=phylum, group=phylum, color=phylum)) + scale_color_manual(values=phylum_colors[rev(phylum_arrange)]) + geom_jitter(alpha=0.5) + theme_minimal() 6.2 Taxonomy boxplot 6.2.1 Family family_summary &lt;- genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS normalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% #reduce to minimum number of columns left_join(sample_metadata, by = join_by(sample == EHI_number)) %&gt;% #append sample metadata left_join(., genome_metadata, by = join_by(genome == genome)) %&gt;% #append genome metadata group_by(sample,family) %&gt;% summarise(relabun=sum(count)) family_summary %&gt;% group_by(family) %&gt;% summarise(mean=mean(relabun),sd=sd(relabun)) %&gt;% arrange(-mean) %&gt;% tt() .table td.tinytable_css_q6tm7do0sz9zdxerosjj, .table th.tinytable_css_q6tm7do0sz9zdxerosjj { border-bottom: solid #d3d8dc 0.1em; } .table td.tinytable_css_nzewpq8s8d4q714udqek, .table th.tinytable_css_nzewpq8s8d4q714udqek { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; } family mean sd f__Lachnospiraceae 2.798160e-01 0.1323151296 f__Bacteroidaceae 2.132576e-01 0.1045524501 f__Tannerellaceae 1.122881e-01 0.0756060991 f__ 6.556348e-02 0.0820773598 f__Helicobacteraceae 3.474580e-02 0.0562678198 f__Marinifilaceae 3.441228e-02 0.0255200299 f__UBA3700 2.777694e-02 0.0330290932 f__Desulfovibrionaceae 2.680077e-02 0.0404627923 f__Ruminococcaceae 2.435712e-02 0.0226880677 f__Rikenellaceae 1.900710e-02 0.0176572117 f__Erysipelotrichaceae 1.767814e-02 0.0269603016 f__Oscillospiraceae 1.696763e-02 0.0140960977 f__Coprobacillaceae 1.273032e-02 0.0336927310 f__Mycoplasmoidaceae 1.210259e-02 0.0270262454 f__Enterobacteriaceae 1.077111e-02 0.0651262303 f__Fusobacteriaceae 9.053249e-03 0.0370456782 f__Akkermansiaceae 8.677367e-03 0.0108836065 f__CAG-239 7.003283e-03 0.0098019806 f__LL51 6.656864e-03 0.0216352391 f__Anaerotignaceae 6.551732e-03 0.0074061779 f__UBA3830 5.185462e-03 0.0171469663 f__Gastranaerophilaceae 4.003188e-03 0.0059975426 f__Muribaculaceae 3.991492e-03 0.0409006227 f__Butyricicoccaceae 3.919222e-03 0.0050520985 f__CAG-274 3.051617e-03 0.0060828463 f__Acutalibacteraceae 2.723615e-03 0.0047471119 f__Anaerovoracaceae 2.683446e-03 0.0040557355 f__Pumilibacteraceae 2.544525e-03 0.0041701010 f__UBA1997 2.383785e-03 0.0080270055 f__CAG-508 2.324078e-03 0.0063109845 f__Brevinemataceae 2.191263e-03 0.0097068603 f__Peptococcaceae 1.937490e-03 0.0031961496 f__Rhodocyclaceae 1.936615e-03 0.0194735479 f__DTU072 1.792884e-03 0.0055918788 f__UBA660 1.742458e-03 0.0054664441 f__MGBC116941 1.714356e-03 0.0090980913 f__Massilibacillaceae 1.502892e-03 0.0024528334 f__Eggerthellaceae 1.377525e-03 0.0037174906 f__Enterococcaceae 8.454990e-04 0.0070848098 f__CALTSX01 5.198677e-04 0.0053270584 f__Chlamydiaceae 5.170637e-04 0.0030492819 f__Mucispirillaceae 4.593259e-04 0.0026630822 f__CALVMC01 4.496143e-04 0.0018583730 f__Clostridiaceae 4.212744e-04 0.0029132915 f__Acidaminococcaceae 4.004438e-04 0.0015777220 f__UBA1242 3.719350e-04 0.0014704441 f__RUG11792 3.717143e-04 0.0019425248 f__CAG-465 3.497207e-04 0.0015695529 f__Microbacteriaceae 3.199134e-04 0.0026999464 f__CAG-288 2.985206e-04 0.0017514912 f__Streptococcaceae 2.479473e-04 0.0018438849 f__Anaplasmataceae 2.435113e-04 0.0021508694 f__Hepatoplasmataceae 2.362221e-04 0.0024205565 f__Aeromonadaceae 2.327082e-04 0.0022486997 f__Peptostreptococcaceae 1.412306e-04 0.0014471826 f__Rhodobacteraceae 1.371859e-04 0.0014057373 f__Xanthomonadaceae 9.245878e-05 0.0009474206 f__Synergistaceae 7.840493e-05 0.0008034115 f__Lactobacillaceae 4.203166e-05 0.0004306963 f__Turicibacteraceae 0.000000e+00 0.0000000000 family_arrange &lt;- family_summary %&gt;% group_by(family) %&gt;% summarise(mean=sum(relabun)) %&gt;% arrange(-mean) %&gt;% select(family) %&gt;% pull() family_summary %&gt;% left_join(genome_metadata %&gt;% select(family,phylum) %&gt;% unique(),by=join_by(family==family)) %&gt;% left_join(sample_metadata,by=join_by(sample==EHI_number)) %&gt;% filter(family %in% family_arrange[1:20]) %&gt;% mutate(family=factor(family,levels=rev(family_arrange[1:20]))) %&gt;% filter(relabun &gt; 0) %&gt;% ggplot(aes(x=relabun, y=family, group=family, color=phylum)) + scale_color_manual(values=phylum_colors[-8]) + geom_jitter(alpha=0.5) + theme_minimal() + labs(y=&quot;Family&quot;, x=&quot;Relative abundance&quot;, color=&quot;Phylum&quot;) 6.2.2 Genus genus_summary &lt;- genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS normalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% #reduce to minimum number of columns left_join(sample_metadata, by = join_by(sample == EHI_number)) %&gt;% #append sample metadata left_join(genome_metadata, by = join_by(genome == genome)) %&gt;% #append genome metadata group_by(sample,genus) %&gt;% summarise(relabun=sum(count)) %&gt;% filter(genus != &quot;g__&quot;) genus_summary %&gt;% group_by(genus) %&gt;% summarise(mean=mean(relabun),sd=sd(relabun)) %&gt;% arrange(-mean) %&gt;% tt() .table td.tinytable_css_o3kmee81yybkvnuwf2wj, .table th.tinytable_css_o3kmee81yybkvnuwf2wj { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; } .table td.tinytable_css_epir3y1i9dx3qg0p38fh, .table th.tinytable_css_epir3y1i9dx3qg0p38fh { border-bottom: solid #d3d8dc 0.1em; } genus mean sd g__Bacteroides 1.725925e-01 0.0994470682 g__Parabacteroides 1.103381e-01 0.0767310570 g__Roseburia 5.077999e-02 0.0743624266 g__Phocaeicola 3.874581e-02 0.0435882803 g__JAAYNV01 3.526845e-02 0.0735025649 g__Odoribacter 3.376557e-02 0.0254845145 g__Helicobacter_J 2.983823e-02 0.0400574428 g__CAG-95 1.659217e-02 0.0240471187 g__Alistipes 1.555908e-02 0.0156740595 g__Kineothrix 1.544351e-02 0.0584815409 g__MGBC136627 1.451743e-02 0.0230914933 g__Mycoplasmoides 1.139564e-02 0.0269054026 g__Hungatella_A 1.113992e-02 0.0670243947 g__Anaerotruncus 1.006956e-02 0.0112599653 g__Velocimicrobium 9.687390e-03 0.0159382742 g__Enterocloster 9.506772e-03 0.0098451213 g__Fusobacterium_A 9.053249e-03 0.0370456782 g__Acetatifactor 8.989245e-03 0.0139417426 g__Akkermansia 8.677367e-03 0.0108836065 g__Clostridium_Q 7.770136e-03 0.0138182274 g__Bilophila 7.347777e-03 0.0088824113 g__Lawsonia 7.130440e-03 0.0356135290 g__Intestinimonas 6.565049e-03 0.0061282758 g__Lacrimispora 6.397950e-03 0.0078443852 g__Lachnotalea 5.679000e-03 0.0086820363 g__Desulfovibrio 5.604601e-03 0.0085133819 g__MGBC140009 5.533083e-03 0.0134005650 g__Extibacter 5.301402e-03 0.0438086011 g__Coprobacillus 5.255707e-03 0.0160178991 g__Ventrimonas 5.038137e-03 0.0083320432 g__NHYM01 4.907573e-03 0.0427691471 g__Dielma 4.863951e-03 0.0065480876 g__Eisenbergiella 4.698317e-03 0.0069699563 g__CHH4-2 4.463440e-03 0.0044701587 g__RGIG4733 4.252340e-03 0.0103379868 g__Negativibacillus 4.038946e-03 0.0054742770 g__Thomasclavelia 3.858196e-03 0.0117540652 g__Hungatella 3.440712e-03 0.0046402483 g__C-19 3.334625e-03 0.0097460323 g__Citrobacter 3.199667e-03 0.0207814167 g__UMGS1251 2.883830e-03 0.0066485409 g__Oscillibacter 2.697945e-03 0.0038453712 g__CAZU01 2.687821e-03 0.0062923086 g__Breznakia 2.569391e-03 0.0076690515 g__Copromonas 2.559264e-03 0.0037548588 g__Mailhella 2.486840e-03 0.0034349591 g__Pseudoflavonifractor 2.349829e-03 0.0028250595 g__Intestinibacillus 2.290036e-03 0.0027696754 g__Escherichia 2.232632e-03 0.0160096591 g__Brevinema 2.191263e-03 0.0097068603 g__MGBC165282 2.146060e-03 0.0051869977 g__Rikenella 2.123615e-03 0.0033608364 g__Morganella 2.019952e-03 0.0206983454 g__Robinsoniella 2.000942e-03 0.0198167695 g__Parabacteroides_B 1.950084e-03 0.0064473560 g__Hafnia 1.939718e-03 0.0112340944 g__Fluviibacter 1.936615e-03 0.0194735479 g__JAIHAL01 1.909337e-03 0.0043937983 g__CAJLXD01 1.809579e-03 0.0041385093 g__Marseille-P3106 1.729807e-03 0.0025326958 g__UBA866 1.535703e-03 0.0026149730 g__MGBC116941 1.433278e-03 0.0090996222 g__Duncaniella 1.426611e-03 0.0146184139 g__Stoquefichus 1.418761e-03 0.0046100976 g__Limenecus 1.393591e-03 0.0029887106 g__JAAYQI01 1.271605e-03 0.0020016472 g__RGIG6463 1.268390e-03 0.0028982477 g__Lawsonibacter 1.177407e-03 0.0016547788 g__Scatousia 1.174334e-03 0.0033329854 g__MGBC101980 1.147280e-03 0.0043856608 g__Hespellia 1.102861e-03 0.0080033094 g__Clostridium_AQ 1.075206e-03 0.0036972777 g__Tidjanibacter 1.062223e-03 0.0029392145 g__Fournierella 1.021882e-03 0.0022586979 g__Eggerthella 9.946416e-04 0.0031801193 g__OM05-12 9.566920e-04 0.0022952664 g__CALXRO01 9.555497e-04 0.0060396607 g__CALURL01 9.088777e-04 0.0021653921 g__Harryflintia 8.906013e-04 0.0020436518 g__MGBC133411 8.872215e-04 0.0021982622 g__Scatacola_A 8.685187e-04 0.0028129788 g__JALFVM01 8.392923e-04 0.0020111922 g__Bacteroides_G 8.358400e-04 0.0024999742 g__Ventrisoma 8.334289e-04 0.0015664780 g__CAG-269 8.185801e-04 0.0029513181 g__IOR16 8.132853e-04 0.0024147185 g__CAG-873 7.794020e-04 0.0079864937 g__Buttiauxella 7.562352e-04 0.0062186311 g__14-2 7.242943e-04 0.0014229865 g__Ureaplasma 7.069544e-04 0.0022811697 g__Scatocola 6.903112e-04 0.0024144468 g__Dysosmobacter 6.880800e-04 0.0012817741 g__Muricomes 6.843281e-04 0.0023723812 g__Anaerovorax 6.779999e-04 0.0017521412 g__UBA7185 6.690992e-04 0.0018509746 g__Butyricimonas 6.467068e-04 0.0016133034 g__MGBC131033 6.443020e-04 0.0015998136 g__Evtepia 6.309865e-04 0.0010453519 g__CAJMNU01 6.281598e-04 0.0008908563 g__Beduini 5.914594e-04 0.0013148807 g__Muribaculum 5.550053e-04 0.0056871120 g__Scandinavium 5.392506e-04 0.0034848792 g__Lactonifactor 5.340135e-04 0.0013169750 g__CALTSX01 5.198677e-04 0.0053270584 g__CAG-485 5.128011e-04 0.0052546481 g__Merdicola 5.109908e-04 0.0018183944 g__Ventrenecus 4.954074e-04 0.0024443063 g__UMGS1202 4.885966e-04 0.0016971062 g__Copranaerobaculum 4.827706e-04 0.0029167211 g__NSJ-61 4.574747e-04 0.0014044413 g__Faecimonas 4.467204e-04 0.0017621834 g__RGIG8482 4.415175e-04 0.0020991286 g__Faecivivens 4.313538e-04 0.0008927244 g__RGIG9287 4.228193e-04 0.0021002237 g__Sarcina 4.212744e-04 0.0029132915 g__Blautia_A 4.144742e-04 0.0010034450 g__Scatenecus 4.103021e-04 0.0026534948 g__Phascolarctobacterium 4.004438e-04 0.0015777220 g__Raoultibacter 3.828831e-04 0.0011609168 g__Caccovivens 3.719350e-04 0.0014704441 g__CAJTFG01 3.690163e-04 0.0010223015 g__HGM11386 3.642876e-04 0.0016060882 g__CAG-465 3.497207e-04 0.0015695529 g__Amedibacillus 3.457091e-04 0.0023834921 g__Enterococcus_A 3.276668e-04 0.0023252026 g__UMGS2016 3.212305e-04 0.0012912770 g__Emergencia 3.205926e-04 0.0009702487 g__Holdemania 3.098282e-04 0.0010287045 g__Blautia 3.095400e-04 0.0011077317 g__Protoclostridium 3.067429e-04 0.0010837140 g__Fimivivens 3.043536e-04 0.0008104254 g__RGIG7389 2.985465e-04 0.0005848732 g__CAG-345 2.985206e-04 0.0017514912 g__UBA7173 2.963722e-04 0.0030369115 g__Bariatricus 2.928468e-04 0.0008379528 g__Agathobaculum 2.787287e-04 0.0016389968 g__CALXDZ01 2.660973e-04 0.0006132220 g__UBA940 2.621830e-04 0.0009075589 g__Microbacterium 2.563077e-04 0.0026263723 g__Aminipila 2.506050e-04 0.0007479203 g__Lactococcus 2.479473e-04 0.0018438849 g__Wolbachia 2.435113e-04 0.0021508694 g__Paramuribaculum 2.432436e-04 0.0024925056 g__Hepatoplasma 2.362221e-04 0.0024205565 g__Aeromonas 2.327082e-04 0.0022486997 g__WRHT01 2.186196e-04 0.0006955370 g__Zhenpiania 2.116559e-04 0.0012708329 g__UBA5026 2.112884e-04 0.0009778887 g__UMGS1663 1.999591e-04 0.0007286034 g__MGBC107952 1.752651e-04 0.0009887232 g__CALXEL01 1.725652e-04 0.0013728689 g__CAG-273 1.482564e-04 0.0007864691 g__Clostridioides 1.412306e-04 0.0014471826 g__Paracoccus 1.371859e-04 0.0014057373 g__JAAWBF01 1.286984e-04 0.0006144643 g__JAFLTL01 1.270703e-04 0.0013020827 g__Bacteroides_H 1.267213e-04 0.0012985068 g__RUG12867 9.254620e-05 0.0006129332 g__Stenotrophomonas 9.245878e-05 0.0009474206 g__Rahnella 8.365618e-05 0.0008059384 g__Lumbricidophila 6.360575e-05 0.0006517650 g__UBA3263 5.098641e-05 0.0005224553 g__Fructobacillus 4.203166e-05 0.0004306963 g__Clostridium 0.000000e+00 0.0000000000 g__Turicibacter 0.000000e+00 0.0000000000 genus_arrange &lt;- genus_summary %&gt;% group_by(genus) %&gt;% summarise(mean=sum(relabun)) %&gt;% filter(genus != &quot;g__&quot;)%&gt;% arrange(-mean) %&gt;% select(genus) %&gt;% mutate(genus= sub(&quot;^g__&quot;, &quot;&quot;, genus)) %&gt;% pull() genus_summary %&gt;% left_join(genome_metadata %&gt;% select(genus,phylum) %&gt;% unique(),by=join_by(genus==genus)) %&gt;% left_join(sample_metadata,by=join_by(sample==EHI_number)) %&gt;% mutate(genus= sub(&quot;^g__&quot;, &quot;&quot;, genus)) %&gt;% filter(genus %in% genus_arrange[1:20]) %&gt;% mutate(genus=factor(genus,levels=rev(genus_arrange[1:20]))) %&gt;% filter(relabun &gt; 0) %&gt;% ggplot(aes(x=relabun, y=genus, group=genus, color=phylum)) + scale_color_manual(values=phylum_colors) + geom_jitter(alpha=0.5) + theme_minimal() + labs(y=&quot;Genus&quot;, x=&quot;Relative abundance&quot;, color=&quot;Phylum&quot;) "],["diversity-analyses.html", "Chapter 7 Diversity analyses 7.1 Alpha diversity 7.2 Beta diversity per individual 7.3 Beta diversity per population", " Chapter 7 Diversity analyses load(&quot;data/data.Rdata&quot;) load(&quot;data/alpha_div_21032025.Rdata&quot;) load(&quot;data/beta_div_21032025.Rdata&quot;) load(&quot;data/beta_div_pop_21032025.Rdata&quot;) 7.1 Alpha diversity # Calculate Hill numbers richness &lt;- genome_counts_filt %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 0) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(richness = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) neutral &lt;- genome_counts_filt %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 1) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(neutral = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) phylogenetic &lt;- genome_counts_filt %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 1, tree = genome_tree) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(phylogenetic = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) # Aggregate basal GIFT into elements #Get list of present MAGs present_MAGs &lt;- genome_counts_filt %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% filter(rowSums(.[, -1]) != 0) %&gt;% rownames() #Align KEGG annotations with present MAGs and remove all-zero and all-one traits present_MAGs &lt;- present_MAGs[present_MAGs %in% rownames(genome_gifts)] genome_gifts_filt &lt;- genome_gifts[present_MAGs,] %&gt;% select_if(~!all(. == 0)) %&gt;% #remove all-zero modules select_if(~!all(. == 1)) #remove all-one modules #Filter count table to only contain present MAGs after KEGG filtering genome_counts_filt_filt &lt;- genome_counts_filt %&gt;% column_to_rownames(var = &quot;genome&quot;) genome_counts_filt_filt &lt;- genome_counts_filt_filt[present_MAGs,] # Merge all metrics alpha_div &lt;- richness %&gt;% full_join(neutral, by = join_by(sample == sample)) %&gt;% full_join(phylogenetic, by = join_by(sample == sample)) save(genome_gifts_filt, richness, neutral, phylogenetic, alpha_div, file = &quot;data/alpha_div_21032025.Rdata&quot;) alpha_div %&gt;% pivot_longer(-sample, names_to = &quot;alpha&quot;, values_to = &quot;value&quot;) %&gt;% left_join(sample_metadata, by = join_by(sample == EHI_number)) %&gt;% group_by(alpha)%&gt;% summarise( Aisa_mean=mean(value[Transect==&quot;Aisa&quot;], na.rm=T), Aisa_sd=sd(value[Transect==&quot;Aisa&quot;], na.rm=T), Aran_mean=mean(value[Transect==&quot;Aran&quot;], na.rm=T), Aran_sd=sd(value[Transect==&quot;Aran&quot;], na.rm=T), Sentein_mean=mean(value[Transect==&quot;Sentein&quot;], na.rm=T), Sentein_sd=sd(value[Transect==&quot;Sentein&quot;], na.rm=T), Tourmalet_mean=mean(value[Transect==&quot;Tourmalet&quot;], na.rm=T), Tourmalet_sd=sd(value[Transect==&quot;Tourmalet&quot;], na.rm=T))%&gt;% mutate( Aisa=str_c(round(Aisa_mean,2),&quot;±&quot;,round(Aisa_sd,2)), Aran=str_c(round(Aran_mean,2),&quot;±&quot;,round(Aran_sd,2)), Sentein=str_c(round(Sentein_mean,2),&quot;±&quot;,round(Sentein_sd,2)), Tourmalet=str_c(round(Tourmalet_mean,2),&quot;±&quot;,round(Tourmalet_sd,2))) %&gt;% arrange(-Aisa_mean) %&gt;% dplyr::select(alpha,Aisa,Aran,Sentein,Tourmalet) %&gt;% tt() .table td.tinytable_css_yov79y1622120fpa6f34, .table th.tinytable_css_yov79y1622120fpa6f34 { border-bottom: solid #d3d8dc 0.1em; } .table td.tinytable_css_5hkabne5y406bcetwrni, .table th.tinytable_css_5hkabne5y406bcetwrni { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; } alpha Aisa Aran Sentein Tourmalet richness 198.77±65.73 153.32±72.26 257.32±71.08 245.04±68.73 neutral 87.81±36.55 71.13±36.69 110.98±45.84 101.5±43.7 phylogenetic 4.98±1.13 4.81±1.12 5.41±0.86 5.29±0.9 alpha_div %&gt;% pivot_longer(-sample, names_to = &quot;metric&quot;, values_to = &quot;value&quot;) %&gt;% left_join(., sample_metadata, by = join_by(sample == EHI_number)) %&gt;% mutate(metric=factor(metric,levels=c(&quot;richness&quot;,&quot;neutral&quot;,&quot;phylogenetic&quot;))) %&gt;% ggplot(aes(y = value, x = Transect, group=Transect, color=Transect, fill=Transect)) + geom_boxplot(outlier.shape = NA) + geom_jitter(alpha=0.5) + scale_color_manual(name=&quot;Transect&quot;, breaks=c(&quot;Aisa&quot;,&quot;Aran&quot;,&quot;Sentein&quot;,&quot;Tourmalet&quot;), labels=c(&quot;Aisa&quot;,&quot;Aran&quot;,&quot;Sentein&quot;,&quot;Tourmalet&quot;), values=c(&quot;#e5bd5b&quot;, &quot;#6b7398&quot;,&quot;#e2815a&quot;, &quot;#876b96&quot;)) + scale_fill_manual(name=&quot;Transect&quot;, breaks=c(&quot;Aisa&quot;,&quot;Aran&quot;,&quot;Sentein&quot;,&quot;Tourmalet&quot;), labels=c(&quot;Aisa&quot;,&quot;Aran&quot;,&quot;Sentein&quot;,&quot;Tourmalet&quot;), values=c(&quot;#e5bd5b50&quot;, &quot;#6b739850&quot;,&quot;#e2815a50&quot;, &quot;#876b9650&quot;)) + facet_wrap(. ~ metric, scales = &quot;free&quot;, ncol=4) + coord_cartesian(xlim = c(1, NA)) + stat_compare_means(size=2) + theme_classic() + theme( strip.background = element_blank(), panel.grid.minor.x = element_line(size = .1, color = &quot;grey&quot;), axis.text.x = element_text(angle = 45, hjust = 1) ) + ylab(&quot;Alpha diversity&quot;) 7.1.1 Regression plots per transect alpha_div %&gt;% pivot_longer(-sample, names_to = &quot;metric&quot;, values_to = &quot;value&quot;) %&gt;% left_join(., sample_metadata, by = join_by(sample == EHI_number)) %&gt;% mutate(metric=factor(metric,levels=c(&quot;richness&quot;,&quot;neutral&quot;,&quot;phylogenetic&quot;))) %&gt;% filter(metric!=&quot;functional&quot;)%&gt;% ggplot(aes(y = value, x = Elevation, group=Transect, colour=Transect)) + geom_point(alpha=0.4) + geom_smooth(method = &quot;loess&quot;, se=FALSE) + scale_colour_manual(name=&quot;Transect&quot;, breaks=c(&quot;Aisa&quot;,&quot;Aran&quot;,&quot;Sentein&quot;,&quot;Tourmalet&quot;), labels=c(&quot;Aisa&quot;,&quot;Aran&quot;,&quot;Sentein&quot;,&quot;Tourmalet&quot;), values=c(&quot;#e5bd5b&quot;, &quot;#6b7398&quot;,&quot;#e2815a&quot;, &quot;#876b96&quot;)) + facet_wrap(. ~ metric, scales = &quot;free&quot;, ncol=4) + coord_cartesian(xlim = c(1, NA)) + theme_classic() + theme( strip.background = element_blank(), panel.grid.minor.x = element_line(size = .1, color = &quot;grey&quot;), axis.text.x = element_text(angle = 45, hjust = 1) ) + ylab(&quot;Alpha diversity&quot;) 7.1.2 Mixed models per metric alpha_div_meta&lt;-alpha_div %&gt;% left_join(sample_metadata, by = join_by(sample == EHI_number)) 7.1.2.1 Richness diversity Modelq0GLMMNB&lt;- lmerTest::lmer(richness ~ log(sequencing_depth) + Elevation+ I(Elevation^2)+Transect + (1 | Sampling_point), data = alpha_div_meta, REML = FALSE) summary(Modelq0GLMMNB) Linear mixed model fit by maximum likelihood . t-tests use Satterthwaite&#39;s method [&#39;lmerModLmerTest&#39;] Formula: richness ~ log(sequencing_depth) + Elevation + I(Elevation^2) + Transect + (1 | Sampling_point) Data: alpha_div_meta AIC BIC logLik deviance df.resid 1133.5 1157.4 -557.8 1115.5 96 Scaled residuals: Min 1Q Median 3Q Max -3.8856 -0.4150 0.0923 0.6956 2.4063 Random effects: Groups Name Variance Std.Dev. Sampling_point (Intercept) 321.5 17.93 Residual 2157.7 46.45 Number of obs: 105, groups: Sampling_point, 20 Fixed effects: Estimate Std. Error df t value Pr(&gt;|t|) (Intercept) -1.696e+03 2.194e+02 9.792e+01 -7.729 9.59e-12 *** log(sequencing_depth) 1.098e+02 1.130e+01 1.005e+02 9.724 3.81e-16 *** Elevation -4.040e-03 1.351e-01 2.377e+01 -0.030 0.9764 I(Elevation^2) 1.536e-05 4.379e-05 2.418e+01 0.351 0.7288 TransectAran -1.279e+00 1.785e+01 2.187e+01 -0.072 0.9435 TransectSentein 4.254e+01 1.990e+01 2.313e+01 2.137 0.0434 * TransectTourmalet -8.757e+00 2.043e+01 2.698e+01 -0.429 0.6717 --- Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Correlation of Fixed Effects: (Intr) lg(s_) Elevtn I(E^2) TrnscA TrnscS lg(sqncng_) -0.879 Elevation -0.472 0.004 I(Elevtn^2) 0.453 0.005 -0.992 TransectArn -0.317 0.219 0.152 -0.134 TransctSntn -0.051 -0.101 0.201 -0.191 0.522 TrnsctTrmlt -0.001 -0.248 0.403 -0.421 0.481 0.537 fit warnings: Some predictor variables are on very different scales: consider rescaling emmeans::emmeans(Modelq0GLMMNB, pairwise ~ Transect) $emmeans Transect emmean SE df lower.CL upper.CL Aisa 212 16.2 26.9 179 245 Aran 211 15.1 36.1 180 242 Sentein 255 17.9 28.1 218 291 Tourmalet 203 19.0 32.4 165 242 Degrees-of-freedom method: kenward-roger Confidence level used: 0.95 $contrasts contrast estimate SE df t.ratio p.value Aisa - Aran 1.28 21.1 27.9 0.061 0.9999 Aisa - Sentein -42.54 23.4 27.6 -1.816 0.2873 Aisa - Tourmalet 8.76 23.8 31.3 0.368 0.9827 Aran - Sentein -43.82 21.6 32.4 -2.028 0.1989 Aran - Tourmalet 7.48 22.5 41.2 0.332 0.9872 Sentein - Tourmalet 51.30 22.6 30.1 2.267 0.1286 Degrees-of-freedom method: kenward-roger P value adjustment: tukey method for comparing a family of 4 estimates 7.1.2.2 Neutral diversity Modelq1n &lt;- nlme::lme(neutral ~ log(sequencing_depth) + Elevation+I(Elevation^2)+Transect, random = ~ 1 | Sampling_point, data = alpha_div_meta) summary(Modelq1n) Linear mixed-effects model fit by REML Data: alpha_div_meta AIC BIC logLik 1062.022 1085.287 -522.0111 Random effects: Formula: ~1 | Sampling_point (Intercept) Residual StdDev: 14.25385 34.97356 Fixed effects: neutral ~ log(sequencing_depth) + Elevation + I(Elevation^2) + Transect Value Std.Error DF t-value p-value (Intercept) -600.7620 166.44662 82 -3.609337 0.0005 log(sequencing_depth) 37.8840 8.52615 82 4.443264 0.0000 Elevation 0.0506 0.10417 82 0.486083 0.6282 I(Elevation^2) 0.0000 0.00003 82 -0.390369 0.6973 TransectAran -1.1070 13.77988 16 -0.080333 0.9370 TransectSentein 18.5815 15.35036 16 1.210495 0.2437 TransectTourmalet -0.9188 15.73085 16 -0.058407 0.9541 Correlation: (Intr) lg(s_) Elevtn I(E^2) TrnscA TrnscS log(sequencing_depth) -0.875 Elevation -0.480 0.004 I(Elevation^2) 0.460 0.005 -0.992 TransectAran -0.313 0.214 0.152 -0.134 TransectSentein -0.055 -0.099 0.201 -0.191 0.524 TransectTourmalet -0.010 -0.243 0.402 -0.421 0.485 0.537 Standardized Within-Group Residuals: Min Q1 Med Q3 Max -2.29352054 -0.63548808 0.06481815 0.65898243 2.05460514 Number of Observations: 105 Number of Groups: 20 emmeans::emmeans(Modelq1n, pairwise ~ Transect) $emmeans Transect emmean SE df lower.CL upper.CL Aisa 93.8 10.6 19 71.6 116 Aran 92.7 10.0 16 71.5 114 Sentein 112.3 11.8 16 87.4 137 Tourmalet 92.8 12.7 16 66.0 120 Degrees-of-freedom method: containment Confidence level used: 0.95 $contrasts contrast estimate SE df t.ratio p.value Aisa - Aran 1.107 13.8 16 0.080 0.9998 Aisa - Sentein -18.582 15.4 16 -1.210 0.6293 Aisa - Tourmalet 0.919 15.7 16 0.058 0.9999 Aran - Sentein -19.689 14.3 16 -1.379 0.5294 Aran - Tourmalet -0.188 15.1 16 -0.012 1.0000 Sentein - Tourmalet 19.500 15.0 16 1.304 0.5735 Degrees-of-freedom method: containment P value adjustment: tukey method for comparing a family of 4 estimates 7.1.2.3 Phylogenetic diversity Modelq1p &lt;- nlme::lme(phylogenetic ~ log(sequencing_depth) + Elevation+I(Elevation^2)+Transect, random = ~ 1 | Sampling_point, data = alpha_div_meta) summary(Modelq1p) Linear mixed-effects model fit by REML Data: alpha_div_meta AIC BIC logLik 355.8819 379.1466 -168.941 Random effects: Formula: ~1 | Sampling_point (Intercept) Residual StdDev: 0.3549572 0.9586922 Fixed effects: phylogenetic ~ log(sequencing_depth) + Elevation + I(Elevation^2) + Transect Value Std.Error DF t-value p-value (Intercept) 9.841044 4.504479 82 2.1847243 0.0318 log(sequencing_depth) -0.058510 0.232730 82 -0.2514084 0.8021 Elevation -0.005423 0.002741 82 -1.9784059 0.0512 I(Elevation^2) 0.000002 0.000001 82 2.0697526 0.0416 TransectAran -0.225597 0.361943 16 -0.6232954 0.5419 TransectSentein 0.309787 0.403678 16 0.7674113 0.4540 TransectTourmalet -0.037213 0.415013 16 -0.0896663 0.9297 Correlation: (Intr) lg(s_) Elevtn I(E^2) TrnscA TrnscS log(sequencing_depth) -0.882 Elevation -0.466 0.004 I(Elevation^2) 0.447 0.005 -0.992 TransectAran -0.319 0.223 0.152 -0.134 TransectSentein -0.047 -0.103 0.201 -0.191 0.521 TransectTourmalet 0.005 -0.251 0.403 -0.422 0.478 0.536 Standardized Within-Group Residuals: Min Q1 Med Q3 Max -2.59328141 -0.57869923 -0.05449676 0.59603078 2.19625157 Number of Observations: 105 Number of Groups: 20 emmeans::emmeans(Modelq1p, pairwise ~ Transect) $emmeans Transect emmean SE df lower.CL upper.CL Aisa 4.84 0.278 19 4.26 5.43 Aran 4.62 0.264 16 4.06 5.18 Sentein 5.15 0.310 16 4.50 5.81 Tourmalet 4.81 0.335 16 4.10 5.52 Degrees-of-freedom method: containment Confidence level used: 0.95 $contrasts contrast estimate SE df t.ratio p.value Aisa - Aran 0.2256 0.362 16 0.623 0.9231 Aisa - Sentein -0.3098 0.404 16 -0.767 0.8679 Aisa - Tourmalet 0.0372 0.415 16 0.090 0.9997 Aran - Sentein -0.5354 0.377 16 -1.422 0.5047 Aran - Tourmalet -0.1884 0.400 16 -0.471 0.9643 Sentein - Tourmalet 0.3470 0.394 16 0.880 0.8152 Degrees-of-freedom method: containment P value adjustment: tukey method for comparing a family of 4 estimates 7.2 Beta diversity per individual beta_q0n &lt;- genome_counts_filt %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% hillpair(., q = 0) beta_q1n &lt;- genome_counts_filt %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% hillpair(., q = 1) beta_q1p &lt;- genome_counts_filt %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% hillpair(., q = 1, tree = genome_tree) save(beta_q0n, beta_q1n, beta_q1p, file = &quot;data/beta_div_21032025.Rdata&quot;) 7.2.0.1 Richness betadisper(beta_q0n$S, sample_metadata$Transect) %&gt;% permutest(., pairwise=TRUE) Permutation test for homogeneity of multivariate dispersions Permutation: free Number of permutations: 999 Response: Distances Df Sum Sq Mean Sq F N.Perm Pr(&gt;F) Groups 3 0.00102 0.0003414 0.0493 999 0.984 Residuals 101 0.69990 0.0069297 Pairwise comparisons: (Observed p-value below diagonal, permuted p-value above diagonal) Aisa Aran Sentein Tourmalet Aisa 0.82200 0.97000 0.745 Aran 0.81748 0.76900 0.986 Sentein 0.97241 0.79372 0.734 Tourmalet 0.77376 0.98856 0.73109 adonis2(beta_q0n$S ~ Elevation+I(Elevation^2)+Transect, data = sample_metadata %&gt;% arrange(match(EHI_number,labels(beta_q0n$S))), permutations = 999, strata = sample_metadata %&gt;% arrange(match(EHI_number,labels(beta_q0n$S))) %&gt;% pull(Sampling_point), by=&quot;terms&quot;) %&gt;% broom::tidy() %&gt;% tt() Warning in tidy.anova(.): The following column names in ANOVA output were not recognized or transformed: SumOfSqs, R2 .table td.tinytable_css_o2powu2hxhhe7lllvukn, .table th.tinytable_css_o2powu2hxhhe7lllvukn { border-bottom: solid #d3d8dc 0.1em; } .table td.tinytable_css_6k6use2lmus5wh860yld, .table th.tinytable_css_6k6use2lmus5wh860yld { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; } term df SumOfSqs R2 statistic p.value Elevation 1 0.7323770 0.02248262 2.504037 0.808 I(Elevation^2) 1 0.6607153 0.02028274 2.259022 1.000 Transect 3 2.2267820 0.06835811 2.537830 0.797 Residual 99 28.9553706 0.88887653 NA NA Total 104 32.5752449 1.00000000 NA NA 7.2.0.2 Neutral betadisper(beta_q1n$S, sample_metadata$Transect) %&gt;% permutest(., pairwise=TRUE) Permutation test for homogeneity of multivariate dispersions Permutation: free Number of permutations: 999 Response: Distances Df Sum Sq Mean Sq F N.Perm Pr(&gt;F) Groups 3 0.00828 0.0027596 0.3593 999 0.794 Residuals 101 0.77583 0.0076815 Pairwise comparisons: (Observed p-value below diagonal, permuted p-value above diagonal) Aisa Aran Sentein Tourmalet Aisa 0.65500 0.68000 0.649 Aran 0.65706 0.42500 0.953 Sentein 0.66556 0.39226 0.334 Tourmalet 0.64203 0.95713 0.33301 adonis2(beta_q1n$S ~ Elevation+I(Elevation^2)+Transect+Sampling_point, data = sample_metadata %&gt;% arrange(match(EHI_number,labels(beta_q1n$S))), permutations = 999, strata = sample_metadata %&gt;% arrange(match(EHI_number,labels(beta_q1n$S))) %&gt;% pull(Sampling_point), by=&quot;terms&quot;) %&gt;% broom::tidy() %&gt;% tt() Warning in tidy.anova(.): The following column names in ANOVA output were not recognized or transformed: SumOfSqs, R2 .table td.tinytable_css_e0dbunefqhy8q9e7e4a8, .table th.tinytable_css_e0dbunefqhy8q9e7e4a8 { border-bottom: solid #d3d8dc 0.1em; } .table td.tinytable_css_12duz0yoz0tt4ij0hl6m, .table th.tinytable_css_12duz0yoz0tt4ij0hl6m { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; } term df SumOfSqs R2 statistic p.value Elevation 1 0.7981587 0.02571028 3.233002 0.304 I(Elevation^2) 1 0.8855171 0.02852426 3.586854 0.395 Transect 3 2.1516456 0.06930878 2.905134 0.304 Sampling_point 15 6.4712294 0.20845115 1.747480 0.120 Residual 84 20.7377939 0.66800553 NA NA Total 104 31.0443448 1.00000000 NA NA 7.2.0.3 Phylogenetic betadisper(beta_q1p$S, sample_metadata$Transect) %&gt;% permutest(., pairwise=TRUE) Permutation test for homogeneity of multivariate dispersions Permutation: free Number of permutations: 999 Response: Distances Df Sum Sq Mean Sq F N.Perm Pr(&gt;F) Groups 3 0.00719 0.002396 0.2197 999 0.875 Residuals 101 1.10166 0.010908 Pairwise comparisons: (Observed p-value below diagonal, permuted p-value above diagonal) Aisa Aran Sentein Tourmalet Aisa 0.73300 0.64800 0.900 Aran 0.73539 0.45900 0.811 Sentein 0.62637 0.44777 0.549 Tourmalet 0.90540 0.81074 0.54936 adonis2(beta_q1p$S ~ Elevation+I(Elevation^2)+Transect, data = sample_metadata %&gt;% arrange(match(EHI_number,labels(beta_q1p$S))), permutations = 999, strata = sample_metadata %&gt;% arrange(match(EHI_number,labels(beta_q1p$S))) %&gt;% pull(Sampling_point), by=&quot;terms&quot;) %&gt;% broom::tidy() %&gt;% tt() Warning in tidy.anova(.): The following column names in ANOVA output were not recognized or transformed: SumOfSqs, R2 .table td.tinytable_css_pd38o3rgbryh8me729nt, .table th.tinytable_css_pd38o3rgbryh8me729nt { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; } .table td.tinytable_css_cb94kn39c3ee069rbkrx, .table th.tinytable_css_cb94kn39c3ee069rbkrx { border-bottom: solid #d3d8dc 0.1em; } term df SumOfSqs R2 statistic p.value Elevation 1 0.13067373 0.02782657 3.039277 1 I(Elevation^2) 1 0.04974074 0.01059214 1.156896 1 Transect 3 0.25908530 0.05517142 2.008646 1 Residual 99 4.25650571 0.90640987 NA NA Total 104 4.69600548 1.00000000 NA NA 7.3 Beta diversity per population richness_beta &lt;- genome_counts_filt %&gt;% pivot_longer(!genome,names_to=&quot;sample&quot;,values_to = &quot;counts&quot;) %&gt;% left_join(sample_metadata, by = join_by(sample == EHI_number)) %&gt;% mutate(Sampling_point=factor(Sampling_point)) %&gt;% group_by(Sampling_point) %&gt;% group_split() %&gt;% map_dbl(., ~ .x %&gt;% select(genome, sample, counts) %&gt;% pivot_wider(names_from = sample, values_from = counts) %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% tss() %&gt;% as.data.frame() %&gt;% hilldiss(data=., metric=&quot;S&quot;, q = 0) ) names(richness_beta) &lt;- unique(sample_metadata$Sampling_point) %&gt;% sort() neutral_beta &lt;- genome_counts_filt %&gt;% pivot_longer(!genome,names_to=&quot;sample&quot;,values_to = &quot;counts&quot;) %&gt;% left_join(sample_metadata, by = join_by(sample == EHI_number)) %&gt;% mutate(Sampling_point=factor(Sampling_point)) %&gt;% group_by(Sampling_point) %&gt;% group_split() %&gt;% map_dbl(., ~ .x %&gt;% select(genome, sample, counts) %&gt;% pivot_wider(names_from = sample, values_from = counts) %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% tss() %&gt;% as.data.frame() %&gt;% hilldiss(data=., metric=&quot;S&quot;, q = 1) ) names(neutral_beta) &lt;- unique(sample_metadata$Sampling_point) %&gt;% sort() phylogenetic_beta &lt;- genome_counts_filt %&gt;% pivot_longer(!genome,names_to=&quot;sample&quot;,values_to = &quot;counts&quot;) %&gt;% left_join(sample_metadata, by = join_by(sample == EHI_number)) %&gt;% mutate(Sampling_point=factor(Sampling_point)) %&gt;% group_by(Sampling_point) %&gt;% group_split() %&gt;% map_dbl(., ~ .x %&gt;% select(genome, sample, counts) %&gt;% pivot_wider(names_from = sample, values_from = counts) %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% tss() %&gt;% as.data.frame() %&gt;% hilldiss(data=., metric=&quot;S&quot;, q = 1, tree = genome_tree) ) names(phylogenetic_beta) &lt;- unique(sample_metadata$Sampling_point) %&gt;% sort() # Merge all metrics beta_div &lt;- bind_rows(richness_beta,neutral_beta,phylogenetic_beta) %&gt;% t() %&gt;% as.data.frame() %&gt;% rownames_to_column(var=&quot;Sampling_point&quot;) %&gt;% as_tibble() %&gt;% rename(&quot;richness&quot;=V1,&quot;neutral&quot;=V2,&quot;phylogenetic&quot;=V3) save(richness_beta, neutral_beta, phylogenetic_beta, beta_div, file = &quot;data/beta_div_pop_21032025.Rdata&quot;) beta_div %&gt;% pivot_longer(-Sampling_point, names_to = &quot;metric&quot;, values_to = &quot;value&quot;) %&gt;% left_join(sample_metadata %&gt;% select(Transect,Sampling_point, Elevation) %&gt;% unique, by = &quot;Sampling_point&quot;) %&gt;% mutate(metric=factor(metric,levels=c(&quot;richness&quot;,&quot;neutral&quot;,&quot;phylogenetic&quot;))) %&gt;% ggplot(aes(y = value, x = Transect,group=Transect, fill=Transect)) + geom_boxplot(outlier.shape = NA) + geom_jitter(aes(color = Elevation), alpha = 0.5, size = 2) + scale_colour_gradient(low=&quot;#a7f0ba&quot;, high=&quot;#044319&quot;) + scale_fill_manual(name=&quot;Transect&quot;, breaks=c(&quot;Aisa&quot;,&quot;Aran&quot;,&quot;Sentein&quot;,&quot;Tourmalet&quot;), labels=c(&quot;Aisa&quot;,&quot;Aran&quot;,&quot;Sentein&quot;,&quot;Tourmalet&quot;), values=c(&quot;#e5bd5b50&quot;, &quot;#6b739850&quot;,&quot;#e2815a50&quot;, &quot;#876b9650&quot;)) + facet_wrap(. ~ metric, scales = &quot;free&quot;, ncol=4) + coord_cartesian(xlim = c(1, NA)) + stat_compare_means(size=2) + theme_classic() + theme( strip.background = element_blank(), panel.grid.minor.x = element_line(size = .1, color = &quot;grey&quot;), axis.text.x = element_text(angle = 45, hjust = 1) ) + ylab(&quot;Beta diversity&quot;) beta_div_met&lt;-beta_div %&gt;% pivot_longer(-Sampling_point, names_to = &quot;metric&quot;, values_to = &quot;value&quot;) %&gt;% left_join(sample_metadata %&gt;% select(Transect,Sampling_point, Elevation)) %&gt;% mutate(Zones = case_when( Transect == &quot;Aisa&quot; &amp; Elevation == 1450 ~ &quot;Z0&quot;, Transect == &quot;Aisa&quot; &amp; Elevation == 1650 ~ &quot;Z1&quot;, Transect == &quot;Aisa&quot; &amp; Elevation == 1850 ~ &quot;Z2&quot;, Transect == &quot;Aran&quot; &amp; Elevation == 1000 ~ &quot;Z0&quot;, Transect == &quot;Aran&quot; &amp; Elevation == 1500 ~ &quot;Z1&quot;, Transect == &quot;Aran&quot; &amp; Elevation == 1650 ~ &quot;Z2&quot;, Transect == &quot;Aran&quot; &amp; Elevation == 1850 ~ &quot;Z3&quot;, Transect == &quot;Sentein&quot; &amp; Elevation == 941 ~ &quot;Z0&quot;, Transect == &quot;Sentein&quot; &amp; Elevation == 1260 ~ &quot;Z1&quot;, Transect == &quot;Sentein&quot; &amp; Elevation == 1628 ~ &quot;Z2&quot;, Transect == &quot;Sentein&quot; &amp; Elevation == 1873 ~ &quot;Z3&quot;, Transect == &quot;Tourmalet&quot; &amp; Elevation == 953 ~ &quot;Z0&quot;, Transect == &quot;Tourmalet&quot; &amp; Elevation == 1255 ~ &quot;Z1&quot;, Transect == &quot;Tourmalet&quot; &amp; Elevation == 1797 ~ &quot;Z2&quot;, Transect == &quot;Tourmalet&quot; &amp; Elevation == 2306 ~ &quot;Z3&quot;, TRUE ~ NA_character_)) %&gt;% filter(Zones!=&quot;NA&quot;) %&gt;% mutate(metric=factor(metric,levels=c(&quot;richness&quot;,&quot;neutral&quot;,&quot;phylogenetic&quot;,&quot;functional&quot;))) beta_div_met$Zones&lt;-as.factor(beta_div_met$Zones) beta_div_met$Tras&lt;-as.factor(beta_div_met$Zones) bxp1&lt;-beta_div_met%&gt;% ggplot(aes(y = value, x = Zones, group=Zones, colour=Transect, fill=Transect)) + geom_boxplot() + geom_jitter() + #scale_colour_gradient(low=&quot;#a7f0ba&quot;, high=&quot;#044319&quot;) + scale_colour_manual(name=&quot;Transect&quot;, breaks=c(&quot;Aisa&quot;,&quot;Aran&quot;,&quot;Sentein&quot;,&quot;Tourmalet&quot;), labels=c(&quot;Aisa&quot;,&quot;Aran&quot;,&quot;Sentein&quot;,&quot;Tourmalet&quot;), values=c(&quot;#e5bd5b&quot;, &quot;#6b7398&quot;,&quot;#e2815a&quot;, &quot;#876b96&quot;)) + scale_fill_manual(name=&quot;Transect&quot;, breaks=c(&quot;Aisa&quot;,&quot;Aran&quot;,&quot;Sentein&quot;,&quot;Tourmalet&quot;), labels=c(&quot;Aisa&quot;,&quot;Aran&quot;,&quot;Sentein&quot;,&quot;Tourmalet&quot;), values=c(&quot;#e5bd5b50&quot;, &quot;#6b739850&quot;,&quot;#e2815a50&quot;, &quot;#876b9650&quot;)) + facet_wrap(. ~ metric+Transect, scales = &quot;free&quot;, ncol=4) + coord_cartesian(xlim = c(1, NA)) + stat_compare_means(size=2) + theme_classic() + theme( strip.background = element_blank(), panel.grid.minor.x = element_line(size = .1, color = &quot;grey&quot;), axis.text.x = element_text(angle = 45, hjust = 1) ) + ylab(&quot;Beta diversity&quot;) # Add significance bars with p-values bxp2&lt;-bxp1 + geom_signif(comparisons = list(c(&quot;Z0&quot;, &quot;Z1&quot;), c(&quot;Z1&quot;, &quot;Z2&quot;), c(&quot;Z2&quot;, &quot;Z3&quot;), c(&quot;Z0&quot;, &quot;Z2&quot;), c(&quot;Z1&quot;, &quot;Z3&quot;)), map_signif_level = TRUE) bxp2+geom_signif(comparisons = list(c(&quot;Z0&quot;, &quot;Z1&quot;), c(&quot;Z1&quot;, &quot;Z2&quot;)), map_signif_level = TRUE) 7.3.1 Transit zones beta_div_pop&lt;-beta_div %&gt;% pivot_longer(-Sampling_point, names_to = &quot;metric&quot;, values_to = &quot;value&quot;) %&gt;% left_join(sample_metadata %&gt;% select(Transect,Sampling_point, Elevation) %&gt;% unique, by = &quot;Sampling_point&quot;) beta_div_pop &lt;- beta_div_pop %&gt;% mutate(Zones = case_when( Transect == &quot;Aisa&quot; &amp; Elevation == 1450 ~ &quot;Z0&quot;, Transect == &quot;Aisa&quot; &amp; Elevation == 1650 ~ &quot;Z1&quot;, Transect == &quot;Aisa&quot; &amp; Elevation == 1850 ~ &quot;Z2&quot;, Transect == &quot;Aran&quot; &amp; Elevation == 1000 ~ &quot;Z0&quot;, Transect == &quot;Aran&quot; &amp; Elevation == 1500 ~ &quot;Z1&quot;, Transect == &quot;Aran&quot; &amp; Elevation == 1650 ~ &quot;Z2&quot;, Transect == &quot;Aran&quot; &amp; Elevation == 1850 ~ &quot;Z3&quot;, Transect == &quot;Sentein&quot; &amp; Elevation == 941 ~ &quot;Z0&quot;, Transect == &quot;Sentein&quot; &amp; Elevation == 1260 ~ &quot;Z1&quot;, Transect == &quot;Sentein&quot; &amp; Elevation == 1628 ~ &quot;Z2&quot;, Transect == &quot;Sentein&quot; &amp; Elevation == 1873 ~ &quot;Z3&quot;, Transect == &quot;Tourmalet&quot; &amp; Elevation == 953 ~ &quot;Z0&quot;, Transect == &quot;Tourmalet&quot; &amp; Elevation == 1255 ~ &quot;Z1&quot;, Transect == &quot;Tourmalet&quot; &amp; Elevation == 1797 ~ &quot;Z2&quot;, Transect == &quot;Tourmalet&quot; &amp; Elevation == 2306 ~ &quot;Z3&quot;, TRUE ~ NA_character_)) %&gt;% filter(Zones!=&quot;NA&quot;) beta_div_pop %&gt;% #pivot_longer(-Sampling_point, names_to = &quot;metric&quot;, values_to = &quot;value&quot;) %&gt;% #left_join(sample_metadata %&gt;% select(Transect,Sampling_point, Elevation) %&gt;% unique, by = &quot;Sampling_point&quot;) %&gt;% mutate(metric=factor(metric,levels=c(&quot;richness&quot;,&quot;neutral&quot;,&quot;phylogenetic&quot;))) %&gt;% ggplot(aes(y = value, x = Elevation ,group=Elevation, colour=Transect)) + #geom_boxplot(outlier.shape = NA) + geom_point(aes(color = Transect), alpha = 0.5, size = 2) + geom_line(aes(group = interaction(Transect, metric)), position = position_dodge(width = 0.5))+ #scale_color_viridis_c(name = &quot;Elevation&quot;, option = &quot;viridis&quot;) + scale_color_manual(name=&quot;Transect&quot;, breaks=c(&quot;Aisa&quot;,&quot;Aran&quot;,&quot;Sentein&quot;,&quot;Tourmalet&quot;), labels=c(&quot;Aisa&quot;,&quot;Aran&quot;,&quot;Sentein&quot;,&quot;Tourmalet&quot;), values=c(&quot;#e5bd5b50&quot;, &quot;#6b739850&quot;,&quot;#e2815a50&quot;, &quot;#876b9650&quot;)) + facet_wrap(. ~ metric, scales = &quot;free&quot;, ncol=4) + coord_cartesian(xlim = c(1, NA)) + #stat_compare_means(size=2) + theme_classic() + theme( strip.background = element_blank(), panel.grid.minor.x = element_line(size = .1, color = &quot;grey&quot;), axis.text.x = element_text(angle = 45, hjust = 1) ) + ylab(&quot;Beta diversity&quot;) 7.3.1.1 Aisa samples_to_keep_aisa &lt;- sample_metadata %&gt;% filter(Transect == &quot;Aisa&quot;) %&gt;% filter(Elevation!=1250)%&gt;% select(EHI_number) %&gt;% pull() subset_meta_aisa &lt;- sample_metadata %&gt;% filter(Transect == &quot;Aisa&quot;)%&gt;% filter(Elevation!=1250)%&gt;% mutate(Zones = case_when( Transect == &quot;Aisa&quot; &amp; Elevation == 1450 ~ &quot;Z0&quot;, Transect == &quot;Aisa&quot; &amp; Elevation == 1650 ~ &quot;Z1&quot;, Transect == &quot;Aisa&quot; &amp; Elevation == 1850 ~ &quot;Z2&quot;)) Richness richness_aisa&lt;-as.matrix(beta_q0n$S) richness_aisa &lt;- as.dist(richness_aisa[rownames(richness_aisa) %in% samples_to_keep_aisa, colnames(richness_aisa) %in% samples_to_keep_aisa]) betadisper(richness_aisa, subset_meta_aisa$Zones) %&gt;% permutest(., pairwise = TRUE) Permutation test for homogeneity of multivariate dispersions Permutation: free Number of permutations: 999 Response: Distances Df Sum Sq Mean Sq F N.Perm Pr(&gt;F) Groups 2 0.003772 0.0018859 0.2748 999 0.777 Residuals 13 0.089215 0.0068627 Pairwise comparisons: (Observed p-value below diagonal, permuted p-value above diagonal) Z0 Z1 Z2 Z0 0.64200 0.431 Z1 0.64435 0.948 Z2 0.42066 0.94162 adonis2(richness_aisa ~ Zones, data = subset_meta_aisa %&gt;% arrange(match(EHI_number,labels(richness_aisa))), permutations = 999) %&gt;% broom::tidy() %&gt;% tt() .table td.tinytable_css_ep8whgwd19bq7kqdbe2t, .table th.tinytable_css_ep8whgwd19bq7kqdbe2t { border-bottom: solid #d3d8dc 0.1em; } .table td.tinytable_css_6q75uuuknhhvg1z3vbhh, .table th.tinytable_css_6q75uuuknhhvg1z3vbhh { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; } term df SumOfSqs R2 statistic p.value Model 2 0.8534401 0.1924462 1.548999 0.002 Residual 13 3.5812551 0.8075538 NA NA Total 15 4.4346952 1.0000000 NA NA pairwise &lt;- pairwise.adonis(richness_aisa, subset_meta_aisa$Zones, perm=999) pairwise%&gt;% tt() .table td.tinytable_css_nbn80p4x3apkpa6zvq6x, .table th.tinytable_css_nbn80p4x3apkpa6zvq6x { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; } .table td.tinytable_css_29fjbc4nz8zhh33hki2q, .table th.tinytable_css_29fjbc4nz8zhh33hki2q { border-bottom: solid #d3d8dc 0.1em; } pairs Df SumsOfSqs F.Model R2 p.value p.adjusted sig Z2 vs Z1 1 0.3371409 1.0712622 0.11809406 0.334 1 Z2 vs Z0 1 0.2646211 0.9327129 0.08531395 0.597 1 Z1 vs Z0 1 0.2917045 1.0008819 0.11119821 0.395 1 Neutral neutral_aisa&lt;-as.matrix(beta_q1n$S) neutral_aisa &lt;- as.dist(neutral_aisa[rownames(neutral_aisa) %in% samples_to_keep_aisa, colnames(neutral_aisa) %in% samples_to_keep_aisa]) betadisper(neutral_aisa, subset_meta_aisa$Zones) %&gt;% permutest(., pairwise = TRUE) Permutation test for homogeneity of multivariate dispersions Permutation: free Number of permutations: 999 Response: Distances Df Sum Sq Mean Sq F N.Perm Pr(&gt;F) Groups 2 0.001232 0.0006162 0.0722 999 0.926 Residuals 13 0.110978 0.0085368 Pairwise comparisons: (Observed p-value below diagonal, permuted p-value above diagonal) Z0 Z1 Z2 Z0 0.92700 0.666 Z1 0.92770 0.815 Z2 0.67219 0.81707 adonis2(neutral_aisa ~ Zones, data = subset_meta_aisa %&gt;% arrange(match(EHI_number,labels(neutral_aisa))), permutations = 999) %&gt;% broom::tidy() %&gt;% tt() .table td.tinytable_css_wlkjcjro8chebt2dkwvj, .table th.tinytable_css_wlkjcjro8chebt2dkwvj { border-bottom: solid #d3d8dc 0.1em; } .table td.tinytable_css_h6vutiz1jlt2qro6klzj, .table th.tinytable_css_h6vutiz1jlt2qro6klzj { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; } term df SumOfSqs R2 statistic p.value Model 2 0.8375024 0.1980923 1.605671 0.009 Residual 13 3.3903377 0.8019077 NA NA Total 15 4.2278401 1.0000000 NA NA pairwise &lt;- pairwise.adonis(neutral_aisa, subset_meta_aisa$Zones, perm=999) pairwise%&gt;% tt() .table td.tinytable_css_k7jn641mfcfil127x877, .table th.tinytable_css_k7jn641mfcfil127x877 { border-bottom: solid #d3d8dc 0.1em; } .table td.tinytable_css_c21ek5togqw4e1y99w8f, .table th.tinytable_css_c21ek5togqw4e1y99w8f { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; } pairs Df SumsOfSqs F.Model R2 p.value p.adjusted sig Z2 vs Z1 1 0.3707416 1.2794356 0.13787860 0.142 0.426 Z2 vs Z0 1 0.2742152 1.0032615 0.09117856 0.460 1.000 Z1 vs Z0 1 0.2363446 0.8463151 0.09566866 0.665 1.000 Phylogenetic phylo_aisa&lt;-as.matrix(beta_q1p$S) phylo_aisa &lt;- as.dist(phylo_aisa[rownames(phylo_aisa) %in% samples_to_keep_aisa, colnames(phylo_aisa) %in% samples_to_keep_aisa]) betadisper(phylo_aisa, subset_meta_aisa$Zones) %&gt;% permutest(., pairwise = TRUE) Permutation test for homogeneity of multivariate dispersions Permutation: free Number of permutations: 999 Response: Distances Df Sum Sq Mean Sq F N.Perm Pr(&gt;F) Groups 2 0.016704 0.0083522 1.2726 999 0.301 Residuals 13 0.085321 0.0065631 Pairwise comparisons: (Observed p-value below diagonal, permuted p-value above diagonal) Z0 Z1 Z2 Z0 0.29300 0.176 Z1 0.27329 0.708 Z2 0.17102 0.72653 adonis2(phylo_aisa ~ Zones, data = subset_meta_aisa %&gt;% arrange(match(EHI_number,labels(phylo_aisa))), permutations = 999) %&gt;% broom::tidy() %&gt;% tt() .table td.tinytable_css_ky7s7crnys40zqope8wv, .table th.tinytable_css_ky7s7crnys40zqope8wv { border-bottom: solid #d3d8dc 0.1em; } .table td.tinytable_css_60jkni4dsnlqiskdwp7c, .table th.tinytable_css_60jkni4dsnlqiskdwp7c { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; } term df SumOfSqs R2 statistic p.value Model 2 0.1727056 0.26169 2.303891 0.088 Residual 13 0.4872569 0.73831 NA NA Total 15 0.6599625 1.00000 NA NA pairwise &lt;- pairwise.adonis(phylo_aisa, subset_meta_aisa$Zones, perm=999) pairwise%&gt;% tt() .table td.tinytable_css_tqkqelaqklh0tn50rm0u, .table th.tinytable_css_tqkqelaqklh0tn50rm0u { border-bottom: solid #d3d8dc 0.1em; } .table td.tinytable_css_a8qa7ks90k56mwaw1bvs, .table th.tinytable_css_a8qa7ks90k56mwaw1bvs { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; } pairs Df SumsOfSqs F.Model R2 p.value p.adjusted sig Z2 vs Z1 1 0.05218133 0.9595539 0.1070984 0.439 1.000 Z2 vs Z0 1 0.04703713 1.1244722 0.1010809 0.330 0.990 Z1 vs Z0 1 0.03893120 1.1039304 0.1212587 0.327 0.981 Functional func_aisa&lt;-as.matrix(beta_q0n$S) func_aisa &lt;- as.dist(func_aisa[rownames(func_aisa) %in% samples_to_keep_aisa, colnames(func_aisa) %in% samples_to_keep_aisa]) betadisper(func_aisa, subset_meta_aisa$Zones) %&gt;% permutest(., pairwise = TRUE) Permutation test for homogeneity of multivariate dispersions Permutation: free Number of permutations: 999 Response: Distances Df Sum Sq Mean Sq F N.Perm Pr(&gt;F) Groups 2 0.003772 0.0018859 0.2748 999 0.77 Residuals 13 0.089215 0.0068627 Pairwise comparisons: (Observed p-value below diagonal, permuted p-value above diagonal) Z0 Z1 Z2 Z0 0.63500 0.440 Z1 0.64435 0.942 Z2 0.42066 0.94162 adonis2(func_aisa ~ Zones, data = subset_meta_aisa %&gt;% arrange(match(EHI_number,labels(func_aisa))), permutations = 999) %&gt;% broom::tidy() %&gt;% tt() .table td.tinytable_css_mlh8fgjj3yjivnkm98up, .table th.tinytable_css_mlh8fgjj3yjivnkm98up { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; } .table td.tinytable_css_l07v4ic32cuj4u4zw6pa, .table th.tinytable_css_l07v4ic32cuj4u4zw6pa { border-bottom: solid #d3d8dc 0.1em; } term df SumOfSqs R2 statistic p.value Model 2 0.8534401 0.1924462 1.548999 0.003 Residual 13 3.5812551 0.8075538 NA NA Total 15 4.4346952 1.0000000 NA NA pairwise &lt;- pairwise.adonis(func_aisa, subset_meta_aisa$Zones, perm=999) pairwise%&gt;% tt() .table td.tinytable_css_arfdgkqck2wjfxap0mgt, .table th.tinytable_css_arfdgkqck2wjfxap0mgt { border-bottom: solid #d3d8dc 0.1em; } .table td.tinytable_css_2koncqiknqi5fx89yqub, .table th.tinytable_css_2koncqiknqi5fx89yqub { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; } pairs Df SumsOfSqs F.Model R2 p.value p.adjusted sig Z2 vs Z1 1 0.3371409 1.0712622 0.11809406 0.348 1 Z2 vs Z0 1 0.2646211 0.9327129 0.08531395 0.625 1 Z1 vs Z0 1 0.2917045 1.0008819 0.11119821 0.435 1 7.3.1.2 Aran samples_to_keep_Aran &lt;- sample_metadata %&gt;% filter(Transect == &quot;Aran&quot;) %&gt;% filter(Elevation!=1080) %&gt;% filter(Elevation!=1340) %&gt;% select(EHI_number) %&gt;% pull() subset_meta_Aran &lt;- sample_metadata %&gt;% filter(Transect == &quot;Aran&quot;)%&gt;% filter(Elevation!=1080) %&gt;% filter(Elevation!=1340) %&gt;% mutate(Zones = case_when( Transect == &quot;Aran&quot; &amp; Elevation == 1000 ~ &quot;Z0&quot;, Transect == &quot;Aran&quot; &amp; Elevation == 1500 ~ &quot;Z1&quot;, Transect == &quot;Aran&quot; &amp; Elevation == 1650 ~ &quot;Z2&quot;, Transect == &quot;Aran&quot; &amp; Elevation == 1850 ~ &quot;Z3&quot;)) Richness richness_Aran&lt;-as.matrix(beta_q0n$S) richness_Aran &lt;- as.dist(richness_Aran[rownames(richness_Aran) %in% samples_to_keep_Aran, colnames(richness_Aran) %in% samples_to_keep_Aran]) betadisper(richness_Aran, subset_meta_Aran$Zones) %&gt;% permutest(., pairwise = TRUE) Permutation test for homogeneity of multivariate dispersions Permutation: free Number of permutations: 999 Response: Distances Df Sum Sq Mean Sq F N.Perm Pr(&gt;F) Groups 3 0.01499 0.0049968 0.3525 999 0.807 Residuals 21 0.29765 0.0141739 Pairwise comparisons: (Observed p-value below diagonal, permuted p-value above diagonal) Z0 Z1 Z2 Z3 Z0 0.69400 0.94600 0.631 Z1 0.69606 0.56300 0.366 Z2 0.93379 0.55617 0.556 Z3 0.61474 0.35171 0.54452 adonis2(richness_Aran ~ Zones, data = subset_meta_Aran %&gt;% arrange(match(EHI_number,labels(richness_Aran))), permutations = 999) %&gt;% broom::tidy() %&gt;% tt() .table td.tinytable_css_vgi1r492sz7mcukn5c3e, .table th.tinytable_css_vgi1r492sz7mcukn5c3e { border-bottom: solid #d3d8dc 0.1em; } .table td.tinytable_css_aiohv2fsfcf4ijqvi1xv, .table th.tinytable_css_aiohv2fsfcf4ijqvi1xv { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; } term df SumOfSqs R2 statistic p.value Model 3 1.688494 0.2111284 1.873434 0.002 Residual 21 6.308983 0.7888716 NA NA Total 24 7.997477 1.0000000 NA NA pairwise &lt;- pairwise.adonis(richness_Aran, subset_meta_Aran$Zones, perm=999) pairwise%&gt;% tt() .table td.tinytable_css_80922ludx1myloqyx7wb, .table th.tinytable_css_80922ludx1myloqyx7wb { border-bottom: solid #d3d8dc 0.1em; } .table td.tinytable_css_4wrgjedzarwm7w3pzzg1, .table th.tinytable_css_4wrgjedzarwm7w3pzzg1 { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; } pairs Df SumsOfSqs F.Model R2 p.value p.adjusted sig Z0 vs Z3 1 0.2683277 0.7494360 0.06971863 0.729 1 Z0 vs Z1 1 0.2291126 0.7202304 0.06718423 0.877 1 Z0 vs Z2 1 0.3661773 1.1061894 0.09137387 0.253 1 Z3 vs Z1 1 0.3533102 1.0446704 0.09458593 0.374 1 Z3 vs Z2 1 0.3555732 1.0179833 0.08470500 0.354 1 Z1 vs Z2 1 0.3663377 1.1704367 0.09617047 0.216 1 Neutral neutral_Aran&lt;-as.matrix(beta_q1n$S) neutral_Aran &lt;- as.dist(neutral_Aran[rownames(neutral_Aran) %in% samples_to_keep_Aran, colnames(neutral_Aran) %in% samples_to_keep_Aran]) betadisper(neutral_Aran, subset_meta_Aran$Zones) %&gt;% permutest(., pairwise = TRUE) Permutation test for homogeneity of multivariate dispersions Permutation: free Number of permutations: 999 Response: Distances Df Sum Sq Mean Sq F N.Perm Pr(&gt;F) Groups 3 0.00535 0.0017819 0.0935 999 0.958 Residuals 21 0.40001 0.0190481 Pairwise comparisons: (Observed p-value below diagonal, permuted p-value above diagonal) Z0 Z1 Z2 Z3 Z0 0.73900 0.74400 0.999 Z1 0.70904 0.86800 0.704 Z2 0.76165 0.86873 0.749 Z3 0.99716 0.69886 0.74882 adonis2(neutral_Aran ~ Zones, data = subset_meta_Aran %&gt;% arrange(match(EHI_number,labels(neutral_Aran))), permutations = 999) %&gt;% broom::tidy() %&gt;% tt() .table td.tinytable_css_y3fjb5fbh8rwhiu54t6y, .table th.tinytable_css_y3fjb5fbh8rwhiu54t6y { border-bottom: solid #d3d8dc 0.1em; } .table td.tinytable_css_c5bo23orzzq9d3sxmajd, .table th.tinytable_css_c5bo23orzzq9d3sxmajd { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; } term df SumOfSqs R2 statistic p.value Model 3 1.651330 0.2207076 1.982508 0.001 Residual 21 5.830648 0.7792924 NA NA Total 24 7.481978 1.0000000 NA NA pairwise &lt;- pairwise.adonis(neutral_Aran, subset_meta_Aran$Zones, perm=999) pairwise%&gt;% tt() .table td.tinytable_css_vyfmtzn3id7oocjxpf43, .table th.tinytable_css_vyfmtzn3id7oocjxpf43 { border-bottom: solid #d3d8dc 0.1em; } .table td.tinytable_css_tka1cgzfmrmxf7fgrfoe, .table th.tinytable_css_tka1cgzfmrmxf7fgrfoe { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; } pairs Df SumsOfSqs F.Model R2 p.value p.adjusted sig Z0 vs Z3 1 0.2836206 0.8488135 0.07824022 0.674 1 Z0 vs Z1 1 0.1899430 0.5979893 0.05642479 0.974 1 Z0 vs Z2 1 0.3179402 1.0153314 0.08450299 0.434 1 Z3 vs Z1 1 0.3268096 1.0309829 0.09346247 0.416 1 Z3 vs Z2 1 0.3075466 0.9839904 0.08210874 0.472 1 Z1 vs Z2 1 0.3040944 1.0219976 0.08501063 0.426 1 Phylogenetic phylo_Aran&lt;-as.matrix(beta_q1p$S) phylo_Aran &lt;- as.dist(phylo_Aran[rownames(phylo_Aran) %in% samples_to_keep_Aran, colnames(phylo_Aran) %in% samples_to_keep_Aran]) betadisper(phylo_Aran, subset_meta_Aran$Zones) %&gt;% permutest(., pairwise = TRUE) Permutation test for homogeneity of multivariate dispersions Permutation: free Number of permutations: 999 Response: Distances Df Sum Sq Mean Sq F N.Perm Pr(&gt;F) Groups 3 0.01979 0.0065956 0.2464 999 0.891 Residuals 21 0.56207 0.0267651 Pairwise comparisons: (Observed p-value below diagonal, permuted p-value above diagonal) Z0 Z1 Z2 Z3 Z0 0.71000 0.92400 0.652 Z1 0.65487 0.60600 0.881 Z2 0.91960 0.52777 0.562 Z3 0.60010 0.85366 0.50253 adonis2(phylo_Aran ~ Zones, data = subset_meta_Aran %&gt;% arrange(match(EHI_number,labels(phylo_Aran))), permutations = 999) %&gt;% broom::tidy() %&gt;% tt() .table td.tinytable_css_qzssukzclykunjnf6t19, .table th.tinytable_css_qzssukzclykunjnf6t19 { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; } .table td.tinytable_css_pdgw9qqfz1y1omm4yftx, .table th.tinytable_css_pdgw9qqfz1y1omm4yftx { border-bottom: solid #d3d8dc 0.1em; } term df SumOfSqs R2 statistic p.value Model 3 0.2448675 0.1537826 1.272106 0.267 Residual 21 1.3474291 0.8462174 NA NA Total 24 1.5922966 1.0000000 NA NA pairwise &lt;- pairwise.adonis(phylo_Aran, subset_meta_Aran$Zones, perm=999) pairwise%&gt;% tt() .table td.tinytable_css_gj6ugdxb6wz758hbzxtl, .table th.tinytable_css_gj6ugdxb6wz758hbzxtl { border-bottom: solid #d3d8dc 0.1em; } .table td.tinytable_css_fp82lcts7duirijq49q8, .table th.tinytable_css_fp82lcts7duirijq49q8 { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; } pairs Df SumsOfSqs F.Model R2 p.value p.adjusted sig Z0 vs Z3 1 0.07013449 0.8683266 0.07989515 0.548 1 Z0 vs Z1 1 0.04948648 0.7852274 0.07280582 0.649 1 Z0 vs Z2 1 0.05654666 1.2175475 0.09965564 0.275 1 Z3 vs Z1 1 0.03794568 0.4142491 0.03977714 0.894 1 Z3 vs Z2 1 0.07841010 1.0826500 0.08960368 0.303 1 Z1 vs Z2 1 0.03769619 0.6696805 0.05738636 0.600 1 Functional func_Aran&lt;-as.matrix(beta_q0n$S) func_Aran &lt;- as.dist(func_Aran[rownames(func_Aran) %in% samples_to_keep_Aran, colnames(func_Aran) %in% samples_to_keep_Aran]) betadisper(func_Aran, subset_meta_Aran$Zones) %&gt;% permutest(., pairwise = TRUE) Permutation test for homogeneity of multivariate dispersions Permutation: free Number of permutations: 999 Response: Distances Df Sum Sq Mean Sq F N.Perm Pr(&gt;F) Groups 3 0.01499 0.0049968 0.3525 999 0.816 Residuals 21 0.29765 0.0141739 Pairwise comparisons: (Observed p-value below diagonal, permuted p-value above diagonal) Z0 Z1 Z2 Z3 Z0 0.69300 0.94500 0.597 Z1 0.69606 0.53100 0.365 Z2 0.93379 0.55617 0.551 Z3 0.61474 0.35171 0.54452 adonis2(func_Aran ~ Zones, data = subset_meta_Aran %&gt;% arrange(match(EHI_number,labels(func_Aran))), permutations = 999) %&gt;% broom::tidy() %&gt;% tt() .table td.tinytable_css_wvq0pc1ihozut8hv2bng, .table th.tinytable_css_wvq0pc1ihozut8hv2bng { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; } .table td.tinytable_css_dbu12y9qskb6eocg1qak, .table th.tinytable_css_dbu12y9qskb6eocg1qak { border-bottom: solid #d3d8dc 0.1em; } term df SumOfSqs R2 statistic p.value Model 3 1.688494 0.2111284 1.873434 0.001 Residual 21 6.308983 0.7888716 NA NA Total 24 7.997477 1.0000000 NA NA pairwise &lt;- pairwise.adonis(func_Aran, subset_meta_Aran$Zones, perm=999) pairwise%&gt;% tt() .table td.tinytable_css_fmp3k52of0rlg61vywv4, .table th.tinytable_css_fmp3k52of0rlg61vywv4 { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; } .table td.tinytable_css_cyrmame7pp76gv4w3hbl, .table th.tinytable_css_cyrmame7pp76gv4w3hbl { border-bottom: solid #d3d8dc 0.1em; } pairs Df SumsOfSqs F.Model R2 p.value p.adjusted sig Z0 vs Z3 1 0.2683277 0.7494360 0.06971863 0.730 1 Z0 vs Z1 1 0.2291126 0.7202304 0.06718423 0.874 1 Z0 vs Z2 1 0.3661773 1.1061894 0.09137387 0.234 1 Z3 vs Z1 1 0.3533102 1.0446704 0.09458593 0.378 1 Z3 vs Z2 1 0.3555732 1.0179833 0.08470500 0.381 1 Z1 vs Z2 1 0.3663377 1.1704367 0.09617047 0.206 1 7.3.1.3 Sentein samples_to_keep_Sentein &lt;- sample_metadata %&gt;% filter(Transect == &quot;Sentein&quot;) %&gt;% select(EHI_number) %&gt;% pull() subset_meta_Sentein &lt;- sample_metadata %&gt;% filter(Transect == &quot;Sentein&quot;)%&gt;% mutate(Zones = case_when( Transect == &quot;Sentein&quot; &amp; Elevation == 941 ~ &quot;Z0&quot;, Transect == &quot;Sentein&quot; &amp; Elevation == 1260 ~ &quot;Z1&quot;, Transect == &quot;Sentein&quot; &amp; Elevation == 1628 ~ &quot;Z2&quot;, Transect == &quot;Sentein&quot; &amp; Elevation == 1873 ~ &quot;Z3&quot;)) Richness richness_Sentein&lt;-as.matrix(beta_q0n$S) richness_Sentein &lt;- as.dist(richness_Sentein[rownames(richness_Sentein) %in% samples_to_keep_Sentein, colnames(richness_Sentein) %in% samples_to_keep_Sentein]) betadisper(richness_Sentein, subset_meta_Sentein$Zones) %&gt;% permutest(., pairwise = TRUE) Permutation test for homogeneity of multivariate dispersions Permutation: free Number of permutations: 999 Response: Distances Df Sum Sq Mean Sq F N.Perm Pr(&gt;F) Groups 3 0.000586 0.0001953 0.0274 999 0.997 Residuals 15 0.106954 0.0071302 Pairwise comparisons: (Observed p-value below diagonal, permuted p-value above diagonal) Z0 Z1 Z2 Z3 Z0 0.96200 0.87000 0.998 Z1 0.95843 0.85100 0.968 Z2 0.85766 0.83351 0.862 Z3 0.99725 0.96275 0.85693 adonis2(richness_Sentein ~ Zones, data = subset_meta_Sentein %&gt;% arrange(match(EHI_number,labels(richness_Sentein))), permutations = 999) %&gt;% broom::tidy() %&gt;% tt() .table td.tinytable_css_oik9m1dizo1y7av8ug77, .table th.tinytable_css_oik9m1dizo1y7av8ug77 { border-bottom: solid #d3d8dc 0.1em; } .table td.tinytable_css_c8lf1smlbdk6yx3c9a9b, .table th.tinytable_css_c8lf1smlbdk6yx3c9a9b { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; } term df SumOfSqs R2 statistic p.value Model 3 0.9080638 0.2142842 1.363624 0.003 Residual 15 3.3295968 0.7857158 NA NA Total 18 4.2376606 1.0000000 NA NA pairwise &lt;- pairwise.adonis(richness_Sentein, subset_meta_Sentein$Zones, perm=999) pairwise%&gt;% tt() .table td.tinytable_css_crbm7d6iubi460bccrp6, .table th.tinytable_css_crbm7d6iubi460bccrp6 { border-bottom: solid #d3d8dc 0.1em; } .table td.tinytable_css_6nd95l4ef32cr1iampw9, .table th.tinytable_css_6nd95l4ef32cr1iampw9 { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; } pairs Df SumsOfSqs F.Model R2 p.value p.adjusted sig Z3 vs Z2 1 0.2375436 1.0174160 0.11282789 0.407 1 Z3 vs Z1 1 0.2669639 1.1015029 0.13596278 0.286 1 Z3 vs Z0 1 0.2025126 0.8581745 0.09687938 0.815 1 Z2 vs Z1 1 0.2427161 1.0148385 0.12661996 0.371 1 Z2 vs Z0 1 0.1536841 0.6590676 0.07611300 1.000 1 Z1 vs Z0 1 0.2569696 1.0617346 0.13170051 0.326 1 Neutral neutral_Sentein&lt;-as.matrix(beta_q1n$S) neutral_Sentein &lt;- as.dist(neutral_Sentein[rownames(neutral_Sentein) %in% samples_to_keep_Sentein, colnames(neutral_Sentein) %in% samples_to_keep_Sentein]) betadisper(neutral_Sentein, subset_meta_Sentein$Zones) %&gt;% permutest(., pairwise = TRUE) Permutation test for homogeneity of multivariate dispersions Permutation: free Number of permutations: 999 Response: Distances Df Sum Sq Mean Sq F N.Perm Pr(&gt;F) Groups 3 0.005606 0.0018688 0.1825 999 0.918 Residuals 15 0.153627 0.0102418 Pairwise comparisons: (Observed p-value below diagonal, permuted p-value above diagonal) Z0 Z1 Z2 Z3 Z0 0.86300 0.82100 0.446 Z1 0.87111 0.72900 0.338 Z2 0.78640 0.73283 0.874 Z3 0.41948 0.32948 0.86846 adonis2(neutral_Sentein ~ Zones, data = subset_meta_Sentein %&gt;% arrange(match(EHI_number,labels(neutral_Sentein))), permutations = 999) %&gt;% broom::tidy() %&gt;% tt() .table td.tinytable_css_rm3bzdb8fyi0p9bkecfp, .table th.tinytable_css_rm3bzdb8fyi0p9bkecfp { border-bottom: solid #d3d8dc 0.1em; } .table td.tinytable_css_4pzzzxcutu7toum8bd8m, .table th.tinytable_css_4pzzzxcutu7toum8bd8m { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; } term df SumOfSqs R2 statistic p.value Model 3 1.038080 0.2525336 1.689264 0.001 Residual 15 3.072579 0.7474664 NA NA Total 18 4.110659 1.0000000 NA NA pairwise &lt;- pairwise.adonis(neutral_Sentein, subset_meta_Sentein$Zones, perm=999) pairwise%&gt;% tt() .table td.tinytable_css_lwsgwbp2lmoiys97rdbr, .table th.tinytable_css_lwsgwbp2lmoiys97rdbr { border-bottom: solid #d3d8dc 0.1em; } .table td.tinytable_css_7hout826gm769dftg9n6, .table th.tinytable_css_7hout826gm769dftg9n6 { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; } pairs Df SumsOfSqs F.Model R2 p.value p.adjusted sig Z3 vs Z2 1 0.2550295 1.1940719 0.12987411 0.235 1 Z3 vs Z1 1 0.2722656 1.2040506 0.14676295 0.234 1 Z3 vs Z0 1 0.1802123 0.8256212 0.09354822 0.716 1 Z2 vs Z1 1 0.2667350 1.0964422 0.13542272 0.280 1 Z2 vs Z0 1 0.1291948 0.5538189 0.06474523 0.988 1 Z1 vs Z0 1 0.2304475 0.9268351 0.11692372 0.608 1 Phylogenetic phylo_Sentein&lt;-as.matrix(beta_q1p$S) phylo_Sentein &lt;- as.dist(phylo_Sentein[rownames(phylo_Sentein) %in% samples_to_keep_Sentein, colnames(phylo_Sentein) %in% samples_to_keep_Sentein]) betadisper(phylo_Sentein, subset_meta_Sentein$Zones) %&gt;% permutest(., pairwise = TRUE) Permutation test for homogeneity of multivariate dispersions Permutation: free Number of permutations: 999 Response: Distances Df Sum Sq Mean Sq F N.Perm Pr(&gt;F) Groups 3 0.00740 0.0024665 0.2359 999 0.941 Residuals 15 0.15682 0.0104546 Pairwise comparisons: (Observed p-value below diagonal, permuted p-value above diagonal) Z0 Z1 Z2 Z3 Z0 0.88200 0.77700 0.959 Z1 0.79532 0.76000 0.903 Z2 0.63893 0.62016 0.762 Z3 0.91344 0.83008 0.61693 adonis2(phylo_Sentein ~ Zones, data = subset_meta_Sentein %&gt;% arrange(match(EHI_number,labels(phylo_Sentein))), permutations = 999) %&gt;% broom::tidy() %&gt;% tt() .table td.tinytable_css_sgtjd5vruiksf4w30qr7, .table th.tinytable_css_sgtjd5vruiksf4w30qr7 { border-bottom: solid #d3d8dc 0.1em; } .table td.tinytable_css_qp975dwgmrxhhrimsiz6, .table th.tinytable_css_qp975dwgmrxhhrimsiz6 { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; } term df SumOfSqs R2 statistic p.value Model 3 0.1791132 0.2402074 1.580743 0.039 Residual 15 0.5665474 0.7597926 NA NA Total 18 0.7456606 1.0000000 NA NA pairwise &lt;- pairwise.adonis(phylo_Sentein, subset_meta_Sentein$Zones, perm=999) pairwise%&gt;% tt() .table td.tinytable_css_vmzxq5jyenb1um2igqeq, .table th.tinytable_css_vmzxq5jyenb1um2igqeq { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; } .table td.tinytable_css_ow0q8sskvivmyeoqoxc8, .table th.tinytable_css_ow0q8sskvivmyeoqoxc8 { border-bottom: solid #d3d8dc 0.1em; } pairs Df SumsOfSqs F.Model R2 p.value p.adjusted sig Z3 vs Z2 1 0.09032861 1.8196959 0.18531082 0.086 0.516 Z3 vs Z1 1 0.05533407 1.9062867 0.21403833 0.107 0.642 Z3 vs Z0 1 0.05336036 1.8567636 0.18837457 0.143 0.858 Z2 vs Z1 1 0.03341661 0.6235568 0.08179343 0.861 1.000 Z2 vs Z0 1 0.02675707 0.5326789 0.06242810 0.900 1.000 Z1 vs Z0 1 0.01873231 0.6306449 0.08264634 0.801 1.000 Functional func_Sentein&lt;-as.matrix(beta_q0n$S) func_Sentein &lt;- as.dist(func_Sentein[rownames(func_Sentein) %in% samples_to_keep_Sentein, colnames(func_Sentein) %in% samples_to_keep_Sentein]) betadisper(func_Sentein, subset_meta_Sentein$Zones) %&gt;% permutest(., pairwise = TRUE) Permutation test for homogeneity of multivariate dispersions Permutation: free Number of permutations: 999 Response: Distances Df Sum Sq Mean Sq F N.Perm Pr(&gt;F) Groups 3 0.000586 0.0001953 0.0274 999 0.997 Residuals 15 0.106954 0.0071302 Pairwise comparisons: (Observed p-value below diagonal, permuted p-value above diagonal) Z0 Z1 Z2 Z3 Z0 0.94600 0.85700 0.999 Z1 0.95843 0.82300 0.963 Z2 0.85766 0.83351 0.877 Z3 0.99725 0.96275 0.85693 adonis2(func_Sentein ~ Zones, data = subset_meta_Sentein %&gt;% arrange(match(EHI_number,labels(func_Sentein))), permutations = 999) %&gt;% broom::tidy() %&gt;% tt() .table td.tinytable_css_ro4y6gx2v3umdrfvrs9o, .table th.tinytable_css_ro4y6gx2v3umdrfvrs9o { border-bottom: solid #d3d8dc 0.1em; } .table td.tinytable_css_gwee83spwq3a5ydtz1jt, .table th.tinytable_css_gwee83spwq3a5ydtz1jt { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; } term df SumOfSqs R2 statistic p.value Model 3 0.9080638 0.2142842 1.363624 0.004 Residual 15 3.3295968 0.7857158 NA NA Total 18 4.2376606 1.0000000 NA NA pairwise &lt;- pairwise.adonis(func_Sentein, subset_meta_Sentein$Zones, perm=999) pairwise%&gt;% tt() .table td.tinytable_css_llo2lf23d7dq3myvm2z9, .table th.tinytable_css_llo2lf23d7dq3myvm2z9 { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; } .table td.tinytable_css_egh1xub94d1didpiiwlo, .table th.tinytable_css_egh1xub94d1didpiiwlo { border-bottom: solid #d3d8dc 0.1em; } pairs Df SumsOfSqs F.Model R2 p.value p.adjusted sig Z3 vs Z2 1 0.2375436 1.0174160 0.11282789 0.410 1 Z3 vs Z1 1 0.2669639 1.1015029 0.13596278 0.265 1 Z3 vs Z0 1 0.2025126 0.8581745 0.09687938 0.790 1 Z2 vs Z1 1 0.2427161 1.0148385 0.12661996 0.375 1 Z2 vs Z0 1 0.1536841 0.6590676 0.07611300 1.000 1 Z1 vs Z0 1 0.2569696 1.0617346 0.13170051 0.301 1 7.3.1.4 Tourmalet samples_to_keep_Tourmalet &lt;- sample_metadata %&gt;% filter(Transect == &quot;Tourmalet&quot;) %&gt;% filter(Elevation!=1561)%&gt;% filter(Elevation!=2065)%&gt;% filter(Elevation!=2134)%&gt;% select(EHI_number) %&gt;% pull() subset_meta_Tourmalet &lt;- sample_metadata %&gt;% filter(Transect == &quot;Tourmalet&quot;)%&gt;% filter(Elevation!=1561)%&gt;% filter(Elevation!=2065)%&gt;% filter(Elevation!=2134)%&gt;% mutate(Zones = case_when( Transect == &quot;Tourmalet&quot; &amp; Elevation == 953 ~ &quot;Z0&quot;, Transect == &quot;Tourmalet&quot; &amp; Elevation == 1255 ~ &quot;Z1&quot;, Transect == &quot;Tourmalet&quot; &amp; Elevation == 1797 ~ &quot;Z2&quot;, Transect == &quot;Tourmalet&quot; &amp; Elevation == 2306 ~ &quot;Z3&quot;)) Richness richness_Tourmalet&lt;-as.matrix(beta_q0n$S) richness_Tourmalet &lt;- as.dist(richness_Tourmalet[rownames(richness_Tourmalet) %in% samples_to_keep_Tourmalet, colnames(richness_Tourmalet) %in% samples_to_keep_Tourmalet]) betadisper(richness_Tourmalet, subset_meta_Tourmalet$Zones) %&gt;% permutest(., pairwise = TRUE) Permutation test for homogeneity of multivariate dispersions Permutation: free Number of permutations: 999 Response: Distances Df Sum Sq Mean Sq F N.Perm Pr(&gt;F) Groups 3 0.01082 0.0036066 0.4255 999 0.724 Residuals 14 0.11868 0.0084770 Pairwise comparisons: (Observed p-value below diagonal, permuted p-value above diagonal) Z0 Z1 Z2 Z3 Z0 0.54200 0.61600 0.316 Z1 0.54233 0.83800 0.783 Z2 0.63198 0.83988 0.507 Z3 0.32313 0.79049 0.53472 adonis2(richness_Tourmalet ~ Zones, data = subset_meta_Tourmalet %&gt;% arrange(match(EHI_number,labels(richness_Tourmalet))), permutations = 999) %&gt;% broom::tidy() %&gt;% tt() .table td.tinytable_css_c9ys7v5yu2es0g4sms1l, .table th.tinytable_css_c9ys7v5yu2es0g4sms1l { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; } .table td.tinytable_css_boflmhxg06ypfo4bxw4k, .table th.tinytable_css_boflmhxg06ypfo4bxw4k { border-bottom: solid #d3d8dc 0.1em; } term df SumOfSqs R2 statistic p.value Model 3 1.644463 0.3244252 2.241031 0.001 Residual 14 3.424388 0.6755748 NA NA Total 17 5.068851 1.0000000 NA NA pairwise &lt;- pairwise.adonis(richness_Tourmalet, subset_meta_Tourmalet$Zones, perm=999) pairwise%&gt;% tt() .table td.tinytable_css_dckaxozdv0jml6es7ab3, .table th.tinytable_css_dckaxozdv0jml6es7ab3 { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; } .table td.tinytable_css_69qdbirrrytjb5in942k, .table th.tinytable_css_69qdbirrrytjb5in942k { border-bottom: solid #d3d8dc 0.1em; } pairs Df SumsOfSqs F.Model R2 p.value p.adjusted sig Z3 vs Z2 1 0.3159344 1.0174080 0.12689987 0.433 1 Z3 vs Z1 1 0.2326859 0.7306096 0.09450866 0.938 1 Z3 vs Z0 1 0.3651518 1.2919249 0.13903738 0.180 1 Z2 vs Z1 1 0.3395145 1.0840568 0.15302768 0.368 1 Z2 vs Z0 1 0.2885497 1.0570176 0.13119217 0.310 1 Z1 vs Z0 1 0.3124845 1.1122898 0.13711170 0.260 1 Neutral neutral_Tourmalet&lt;-as.matrix(beta_q1n$S) neutral_Tourmalet &lt;- as.dist(neutral_Tourmalet[rownames(neutral_Tourmalet) %in% samples_to_keep_Tourmalet, colnames(neutral_Tourmalet) %in% samples_to_keep_Tourmalet]) betadisper(neutral_Tourmalet, subset_meta_Tourmalet$Zones) %&gt;% permutest(., pairwise = TRUE) Permutation test for homogeneity of multivariate dispersions Permutation: free Number of permutations: 999 Response: Distances Df Sum Sq Mean Sq F N.Perm Pr(&gt;F) Groups 3 0.005366 0.0017887 0.2496 999 0.869 Residuals 14 0.100345 0.0071675 Pairwise comparisons: (Observed p-value below diagonal, permuted p-value above diagonal) Z0 Z1 Z2 Z3 Z0 0.76800 0.59900 0.794 Z1 0.72491 0.53900 0.694 Z2 0.55399 0.50036 0.278 Z3 0.78813 0.66695 0.24647 adonis2(neutral_Tourmalet ~ Zones, data = subset_meta_Tourmalet %&gt;% arrange(match(EHI_number,labels(neutral_Tourmalet))), permutations = 999) %&gt;% broom::tidy() %&gt;% tt() .table td.tinytable_css_vdxisspgvxiifyymzt9h, .table th.tinytable_css_vdxisspgvxiifyymzt9h { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; } .table td.tinytable_css_5ev6ftg3yy5qq9h252jh, .table th.tinytable_css_5ev6ftg3yy5qq9h252jh { border-bottom: solid #d3d8dc 0.1em; } term df SumOfSqs R2 statistic p.value Model 3 1.766135 0.3549255 2.56764 0.001 Residual 14 3.209938 0.6450745 NA NA Total 17 4.976073 1.0000000 NA NA pairwise &lt;- pairwise.adonis(neutral_Tourmalet, subset_meta_Tourmalet$Zones, perm=999) pairwise%&gt;% tt() .table td.tinytable_css_yw902zovcium655zb1gi, .table th.tinytable_css_yw902zovcium655zb1gi { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; } .table td.tinytable_css_i2zcdse8u1tyuobzsd84, .table th.tinytable_css_i2zcdse8u1tyuobzsd84 { border-bottom: solid #d3d8dc 0.1em; } pairs Df SumsOfSqs F.Model R2 p.value p.adjusted sig Z3 vs Z2 1 0.3265025 1.1532417 0.1414458 0.229 1.000 Z3 vs Z1 1 0.2578411 0.9476322 0.1192345 0.500 1.000 Z3 vs Z0 1 0.4639250 1.8123792 0.1847033 0.052 0.312 Z2 vs Z1 1 0.4306105 1.4278859 0.1922331 0.145 0.870 Z2 vs Z0 1 0.3114323 1.1164685 0.1375559 0.285 1.000 Z1 vs Z0 1 0.4436572 1.6559508 0.1913078 0.091 0.546 Phylogenetic phylo_Tourmalet&lt;-as.matrix(beta_q1p$S) phylo_Tourmalet &lt;- as.dist(phylo_Tourmalet[rownames(phylo_Tourmalet) %in% samples_to_keep_Tourmalet, colnames(phylo_Tourmalet) %in% samples_to_keep_Tourmalet]) betadisper(phylo_Tourmalet, subset_meta_Tourmalet$Zones) %&gt;% permutest(., pairwise = TRUE) Permutation test for homogeneity of multivariate dispersions Permutation: free Number of permutations: 999 Response: Distances Df Sum Sq Mean Sq F N.Perm Pr(&gt;F) Groups 3 0.006258 0.002086 0.7418 999 0.559 Residuals 14 0.039367 0.002812 Pairwise comparisons: (Observed p-value below diagonal, permuted p-value above diagonal) Z0 Z1 Z2 Z3 Z0 0.82800 0.23500 0.524 Z1 0.83103 0.36200 0.833 Z2 0.24810 0.36948 0.174 Z3 0.56736 0.83334 0.17818 adonis2(phylo_Tourmalet ~ Zones, data = subset_meta_Tourmalet %&gt;% arrange(match(EHI_number,labels(phylo_Tourmalet))), permutations = 999) %&gt;% broom::tidy() %&gt;% tt() .table td.tinytable_css_hlpojguu53va1iaqk96k, .table th.tinytable_css_hlpojguu53va1iaqk96k { border-bottom: solid #d3d8dc 0.1em; } .table td.tinytable_css_dhnkqtravgi6kyfivnw4, .table th.tinytable_css_dhnkqtravgi6kyfivnw4 { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; } term df SumOfSqs R2 statistic p.value Model 3 0.1959592 0.3774918 2.829888 0.004 Residual 14 0.3231493 0.6225082 NA NA Total 17 0.5191085 1.0000000 NA NA pairwise &lt;- pairwise.adonis(phylo_Tourmalet, subset_meta_Tourmalet$Zones, perm=999) pairwise%&gt;% tt() .table td.tinytable_css_dctioytntz8exn6r47za, .table th.tinytable_css_dctioytntz8exn6r47za { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; } .table td.tinytable_css_7lyq0xxdi0pikxwu6459, .table th.tinytable_css_7lyq0xxdi0pikxwu6459 { border-bottom: solid #d3d8dc 0.1em; } pairs Df SumsOfSqs F.Model R2 p.value p.adjusted sig Z3 vs Z2 1 0.02640453 0.8924459 0.11307597 0.508 1.000 Z3 vs Z1 1 0.02031821 0.8798851 0.11166217 0.497 1.000 Z3 vs Z0 1 0.05542631 2.3936078 0.23029614 0.091 0.546 Z2 vs Z1 1 0.05981848 1.7757976 0.22837498 0.131 0.786 Z2 vs Z0 1 0.01619581 0.5022690 0.06694894 0.818 1.000 Z1 vs Z0 1 0.08582117 3.3327983 0.32254557 0.026 0.156 Functional func_Tourmalet&lt;-as.matrix(beta_q0n$S) func_Tourmalet &lt;- as.dist(func_Tourmalet[rownames(func_Tourmalet) %in% samples_to_keep_Tourmalet, colnames(func_Tourmalet) %in% samples_to_keep_Tourmalet]) betadisper(func_Tourmalet, subset_meta_Tourmalet$Zones) %&gt;% permutest(., pairwise = TRUE) Permutation test for homogeneity of multivariate dispersions Permutation: free Number of permutations: 999 Response: Distances Df Sum Sq Mean Sq F N.Perm Pr(&gt;F) Groups 3 0.01082 0.0036066 0.4255 999 0.697 Residuals 14 0.11868 0.0084770 Pairwise comparisons: (Observed p-value below diagonal, permuted p-value above diagonal) Z0 Z1 Z2 Z3 Z0 0.51000 0.62400 0.307 Z1 0.54233 0.82100 0.767 Z2 0.63198 0.83988 0.507 Z3 0.32313 0.79049 0.53472 adonis2(func_Tourmalet ~ Zones, data = subset_meta_Tourmalet %&gt;% arrange(match(EHI_number,labels(func_Tourmalet))), permutations = 999) %&gt;% broom::tidy() %&gt;% tt() .table td.tinytable_css_l2uezrbnhd7aw8pae10g, .table th.tinytable_css_l2uezrbnhd7aw8pae10g { border-bottom: solid #d3d8dc 0.1em; } .table td.tinytable_css_jl2zkv6980jwlj7rffjl, .table th.tinytable_css_jl2zkv6980jwlj7rffjl { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; } term df SumOfSqs R2 statistic p.value Model 3 1.644463 0.3244252 2.241031 0.001 Residual 14 3.424388 0.6755748 NA NA Total 17 5.068851 1.0000000 NA NA pairwise &lt;- pairwise.adonis(func_Tourmalet, subset_meta_Tourmalet$Zones, perm=999) pairwise%&gt;% tt() .table td.tinytable_css_a6t41tfkl9qub8e57ar1, .table th.tinytable_css_a6t41tfkl9qub8e57ar1 { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; } .table td.tinytable_css_0ondnnr877twng4g9n63, .table th.tinytable_css_0ondnnr877twng4g9n63 { border-bottom: solid #d3d8dc 0.1em; } pairs Df SumsOfSqs F.Model R2 p.value p.adjusted sig Z3 vs Z2 1 0.3159344 1.0174080 0.12689987 0.412 1.000 Z3 vs Z1 1 0.2326859 0.7306096 0.09450866 0.938 1.000 Z3 vs Z0 1 0.3651518 1.2919249 0.13903738 0.158 0.948 Z2 vs Z1 1 0.3395145 1.0840568 0.15302768 0.372 1.000 Z2 vs Z0 1 0.2885497 1.0570176 0.13119217 0.315 1.000 Z1 vs Z0 1 0.3124845 1.1122898 0.13711170 0.270 1.000 "],["hmsc-set-up.html", "Chapter 8 HMSC set-up 8.1 Load data 8.2 Subsetting 8.3 Define formulas of the Hmsc model 8.4 Define and Hmsc models 8.5 Define MCMC 8.6 Generate Hmsc executables 8.7 Fit Hmsc models (in Mjolnir HPC) 8.8 Assess chain convergence", " Chapter 8 HMSC set-up 8.1 Load data load(&quot;data/data.Rdata&quot;) 8.2 Subsetting # Subset by prevalence (present in more than 5 samples) selected_genomes1 &lt;- genome_counts %&gt;% filter(rowSums(across(starts_with(&quot;EHI&quot;)) != 0) &gt;= 5) %&gt;% select(genome) %&gt;% pull() # Subset by minimum representation of 1% relative abundance in 5 samples selected_genomes2 &lt;- genome_counts %&gt;% filter(genome %in% selected_genomes1) %&gt;% column_to_rownames(var=&quot;genome&quot;) %&gt;% tss() %&gt;% as.data.frame() %&gt;% filter(rowSums(across(starts_with(&quot;EHI&quot;)) &gt;= 0.01) &gt;= 5) %&gt;% rownames() # Subset genome metadata genome_metadata_subset &lt;- genome_metadata %&gt;% filter(genome %in% selected_genomes2) # Random effects data (study design) StudyDesign &lt;- sample_metadata %&gt;% select(EHI_number,Sampling_point) %&gt;% mutate(Sampling_point = factor(Sampling_point)) %&gt;% #mutate(Transect = factor(Transect)) %&gt;% #mutate(Elevation = factor(Elevation)) %&gt;% column_to_rownames(&quot;EHI_number&quot;) #Calculate normalisation factor to account for genome length normalisation_factor &lt;- genome_metadata %&gt;% filter(genome %in% selected_genomes2) %&gt;% mutate(factor=median(length)/length) %&gt;% pull(factor) # Genome count table (quantitative community data) YData &lt;- read_counts %&gt;% filter(genome %in% selected_genomes2) %&gt;% #subset genomes mutate(across(where(is.numeric), ~ round(. * normalisation_factor,0) )) %&gt;% mutate(across(where(is.numeric), ~ . +1 )) %&gt;% #add +1 pseudocount to remove zeros mutate(across(where(is.numeric), ~ log(.) )) %&gt;% #log-transform column_to_rownames(&quot;genome&quot;) %&gt;% select(all_of(row.names(StudyDesign))) %&gt;% as.data.frame() %&gt;% t() # transpose # Fixed effects data (explanatory variables) XData &lt;- sample_metadata %&gt;% select(EHI_number,Elevation,Transect) %&gt;% mutate(Transect = factor(Transect)) %&gt;% mutate(logseqdepth=read_counts %&gt;% #total log-sequencing depth select(all_of(row.names(StudyDesign))) %&gt;% colSums() %&gt;% log(), Elevation2 = Elevation^2 # Adding the quadratic effect of Elevation ) %&gt;% column_to_rownames(&quot;EHI_number&quot;) # Genome trait data elements_table_hmsc &lt;- genome_gifts_filt %&gt;% to.elements(., GIFT_db) %&gt;% as.data.frame() elements_table_hmsc&lt;-rownames_to_column(elements_table_hmsc,var = &quot;genome&quot;) TrData &lt;- elements_table_hmsc %&gt;% filter(genome %in% selected_genomes2) %&gt;% #subset genomes arrange(match(genome, colnames(YData))) %&gt;% column_to_rownames(var=&quot;genome&quot;) %&gt;% to.functions(.,GIFT_db) %&gt;% as.data.frame() TrFormula=~B01+B02+B03+B04+B06+B07+B08+B09+B10+D01+D02+D03+D05+D06+D07+D08+D09+S01+S02+S03 # Genome phylogeny PData &lt;- genome_tree 8.3 Define formulas of the Hmsc model # Fixed effects formula XFormula1 = ~Elevation + I(Elevation^2) + Transect + logseqdepth # Study design rL.sampling_point = HmscRandomLevel(units = levels(StudyDesign$Sampling_point)) #rL.transect = HmscRandomLevel(units = levels(StudyDesign$Transect)) 8.4 Define and Hmsc models #Define models model1 = Hmsc(Y=YData, XData = XData, XFormula = XFormula1, studyDesign = StudyDesign, TrData = TrData, TrFormula=TrFormula, phyloTree = PData, ranLevels = list(&quot;Sampling_point&quot;=rL.sampling_point), distr = &quot;normal&quot;, YScale = TRUE) #model2 = Hmsc(Y=YData, #XData = XData, #XFormula = XFormula2, #studyDesign = StudyDesign, #TrData = TrData, #TrFormula=TrFormula, #phyloTree = PData, #ranLevels = list(&quot;Sampling_point&quot;=rL.sampling_point), #distr = &quot;normal&quot;, #YScale = TRUE) #Save list of models as an R object. model_list = list(model1=model1) if (!dir.exists(&quot;hmsc&quot;)){dir.create(&quot;hmsc&quot;)} save(model_list, file = &quot;hmsc/hmsc.Rdata&quot;) Upload hmsc/hmsc.Rdata to the HPC respecting the directory structure. 8.5 Define MCMC # How often to sample the MCMC MCMC_samples_list = 250 # The number of MCMC steps between each recording sample MCMC_thin_list = c(1, 10) # The number of MCMC chains to use nChains = 4 8.6 Generate Hmsc executables The next chunk generates shell files for every combination of model, MCMC samples and MCMM thinning, ready to be launched as SLURM jobs. modelchains &lt;- expand.grid(model = names(model_list), sample = MCMC_samples_list, thin = MCMC_thin_list) if (!dir.exists(&quot;hmsc&quot;)){dir.create(&quot;hmsc&quot;)} for(i in c(1:nrow(modelchains))){ modelname=as.character(modelchains[i,1]) sample=modelchains[i,2] thin=modelchains[i,3] executablename &lt;- paste0(&quot;hmsc/exe_&quot;,modelname,&quot;_&quot;,sample,&quot;_&quot;,thin,&quot;.sh&quot;) fitname &lt;- paste0(&quot;hmsc/fit_&quot;,modelname,&quot;_&quot;,sample,&quot;_&quot;,thin,&quot;.Rdata&quot;) convname &lt;- paste0(&quot;hmsc/conv_&quot;,modelname,&quot;_&quot;,sample,&quot;_&quot;,thin,&quot;.Rdata&quot;) model &lt;- paste0(&#39;model_list$&#39;,modelname) psrf.beta.name &lt;- paste0(&quot;psrf.beta.&quot;,modelname,&quot;_&quot;,sample,&quot;_&quot;,thin) psrf.gamma.name &lt;- paste0(&quot;psrf.gamma.&quot;,modelname,&quot;_&quot;,sample,&quot;_&quot;,thin) psrf.rho.name &lt;- paste0(&quot;psrf.rho.&quot;,modelname,&quot;_&quot;,sample,&quot;_&quot;,thin) jobname &lt;- paste0(&quot;hmsc_&quot;,modelname,&quot;_&quot;,sample,&quot;_&quot;,thin) minutes &lt;- round(sample * thin * (ncol(YData)/50), 0) code &lt;- sprintf(&quot;#!/bin/bash #SBATCH --job-name=%s # Job name #SBATCH --nodes=1 #SBATCH --ntasks=4 # Run on 4 CPUs #SBATCH --mail-user=garazi.bideguren@sund.ku.dk #SBATCH --mem=200gb # Job memory request #SBATCH --time=%d # In minutes # Activate conda environment module load mamba/1.3.1 if ! conda info --envs | grep -q hmsc; then mamba create -p ./hmsc/hmsc_env -y r-essentials r-base r-tidyverse r-Hmsc fi source activate /maps/projects/mjolnir1/people/dlz554/hmsc_env # Run R script Rscript -e &#39; library(tidyverse) library(Hmsc) # Load formulas and data load(\\&quot;hmsc/hmsc.Rdata\\&quot;) # Declare placeholders modelname = \\&quot;%s\\&quot; model = %s fitname = \\&quot;%s\\&quot; convname = \\&quot;%s\\&quot; sample = %d thin = %d nchains = %d # Run model fitting m = sampleMcmc(hM = model, samples = sample, thin = thin, adaptNf=rep(ceiling(0.4*sample*thin),model$nr), transient = ceiling(0.5*sample*thin), nChains = nchains, nParallel = nchains) # Run model cross-validation, each fold will include the samples from the whole elevation gradient of each transect, randomly selected #partition &lt;- createPartition(m, nfolds = 4) StudyDesign&lt;-m$studyDesign partition&lt;-numeric(length = nrow(StudyDesign)) folds&lt;-1:4 n_sampling_points&lt;-length(unique(StudyDesign$Sampling_point)) set.seed(1) for(i in 1:n_sampling_points){ location_tmp&lt;-which(StudyDesign$Sampling_point==unique(StudyDesign$Sampling_point)[i]) if(length(location_tmp)&gt;4){ random_points&lt;-sample(location_tmp,4) partition[random_points]&lt;-sample(folds,4) remaining_points&lt;-location_tmp[is.na(match(location_tmp, random_points))] partition[remaining_points]&lt;-sample(folds,length(remaining_points)) }else{ partition[location_tmp]&lt;-sample(folds,length(location_tmp)) } } cv &lt;- computePredictedValues(m, partition=partition, nChains = 4) # Assess chain convergence mpost = convertToCodaObject(m, spNamesNumbers = c(T,F), covNamesNumbers = c(T,F), Beta = TRUE, Gamma = TRUE, V = FALSE, Sigma = FALSE, Rho = TRUE, Eta = FALSE, Lambda = FALSE, Alpha = FALSE, Omega = FALSE, Psi = FALSE, Delta = FALSE) # Convert to CODA object # Fixed effects assign(paste0(\\&quot;psrf.beta.\\&quot;, modelname,\\&quot;_\\&quot;,sample,\\&quot;_\\&quot;,thin), gelman.diag(mpost$Beta,multivariate=FALSE)$psrf) # Traits assign(paste0(\\&quot;psrf.gamma.\\&quot;, modelname,\\&quot;_\\&quot;,sample,\\&quot;_\\&quot;,thin), gelman.diag(mpost$Gamma,multivariate=FALSE)$psrf) # Phylogeny assign(paste0(\\&quot;psrf.rho.\\&quot;, modelname,\\&quot;_\\&quot;,sample,\\&quot;_\\&quot;,thin), gelman.diag(mpost$Rho,multivariate=FALSE)$psrf) # Write convergence data save(%s, %s, %s, file=convname) # Save model fit object save(m,cv, file=fitname) &#39; &quot;, jobname, minutes, modelname, model, fitname, convname, sample, thin, nChains, psrf.beta.name, psrf.gamma.name, psrf.rho.name) writeLines(code, executablename) } Upload the produced hmsc/exe_XXXXX.sh files to the HPC respecting the directory structure. 8.7 Fit Hmsc models (in Mjolnir HPC) Launch the SLURM jobs by using: # Submit all .sh files in the hmsc folder for jobfile in hmsc/exe_*.sh; do sbatch &quot;$jobfile&quot; done #Or launch them one by one only the ones you want to launch sbatch hmsc/exe_model1_250_1.sh sbatch hmsc/exe_model2_250_10.sh 8.8 Assess chain convergence Convergence diagnostic values substantially above 1 indicate lack of convergence. Values below 1.1 are considered good enough # Load all conv file available in the hmsc folder file_paths &lt;-list.files(path = &quot;hmsc_elevation&quot;, pattern = &quot;^conv_&quot;, full.names = TRUE, include.dirs = TRUE) for (file_path in file_paths) { load(file_path, verbose = TRUE) # Remove .GlobalEnv argument and specify verbose for each load operation } Loading objects: psrf.beta.model1_250_1 psrf.gamma.model1_250_1 psrf.rho.model1_250_1 Loading objects: psrf.beta.model1_250_10 psrf.gamma.model1_250_10 psrf.rho.model1_250_10 # Create a merged psrf.beta (genome) plot ls() %&gt;% grep(&quot;^psrf\\\\.beta&quot;, ., value = TRUE) %&gt;% map_dfr(~ { mat &lt;- get(.x) data.frame(modelchain = .x, as.data.frame(mat, , stringsAsFactors = FALSE)) %&gt;% rownames_to_column(var=&quot;parameter&quot;) %&gt;% mutate(model = str_split(modelchain, &quot;_&quot;) %&gt;% map_chr(1) %&gt;% gsub(&quot;psrf.beta.&quot;,&quot;&quot;,.)) %&gt;% mutate(sample = str_split(modelchain, &quot;_&quot;)[[1]][2]) %&gt;% #extract sample info from model name mutate(thin = str_split(modelchain, &quot;_&quot;)[[1]][3]) #extract thin info from model name }) %&gt;% ggplot(.,aes(x=reorder(modelchain,-Point.est.,fun=function(x) {quantile(x, probs = 0.9)}),y=Point.est.)) + geom_violin(fill=&quot;#b8d9e3&quot;, color=&quot;#328da8&quot;) + geom_jitter(alpha=0.3,size=0.2, color=&quot;#a8babf&quot;) + stat_summary(fun=function(x) {quantile(x, probs = 0.9)}, geom=&quot;crossbar&quot;, width=0.2, color=&quot;orange&quot;) + geom_hline(yintercept=1.1, linetype=&quot;dashed&quot;, color = &quot;red&quot;) + ylim(0.9,2)+ labs(x=&quot;Model chains&quot;,y=&quot;Parameter estimates&quot;)+ theme_classic()+ theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) "],["elevation-hmsc-analysis.html", "Chapter 9 Elevation HMSC analysis 9.1 Load data 9.2 Compute variance partitioning 9.3 Model fit 9.4 Phylogenetic signal 9.5 Elevation predictions 9.6 Functional predictions", " Chapter 9 Elevation HMSC analysis 9.1 Load data load(&quot;data/data.Rdata&quot;) 9.2 Compute variance partitioning # Select modelchain of interest load(&quot;hmsc_elevation/fit_model3_250_10.Rdata&quot;) # Compute variance partitioning varpart=computeVariancePartitioning(m) varpart$vals %&gt;% as.data.frame() %&gt;% rownames_to_column(var=&quot;variable&quot;) %&gt;% pivot_longer(!variable, names_to = &quot;genome&quot;, values_to = &quot;value&quot;) %&gt;% mutate(variable=factor(variable, levels=c(&quot;Elevation&quot;,&quot;I(Elevation^2)&quot;,&quot;logseqdepth&quot;,&quot;Transect&quot;,&quot;Random: Sampling_point&quot;))) %&gt;% group_by(variable) %&gt;% summarise(mean=mean(value)*100,sd=sd(value)*100) %&gt;% tt() .table td.tinytable_css_mzgbzavv8vyzqc5krrn3, .table th.tinytable_css_mzgbzavv8vyzqc5krrn3 { border-bottom: solid #d3d8dc 0.1em; } .table td.tinytable_css_ldzvm33ng6jmj7kb6bo3, .table th.tinytable_css_ldzvm33ng6jmj7kb6bo3 { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; } variable mean sd Elevation 27.924257 8.342730 I(Elevation^2) 29.280193 11.011515 logseqdepth 6.528125 5.916625 Transect 9.031848 8.595048 Random: Sampling_point 27.235577 19.862624 # Basal tree varpart_tree &lt;- genome_tree %&gt;% keep.tip(., tip=m$spNames) #Varpart table varpart_table &lt;- varpart$vals %&gt;% as.data.frame() %&gt;% rownames_to_column(var=&quot;variable&quot;) %&gt;% pivot_longer(!variable, names_to = &quot;genome&quot;, values_to = &quot;value&quot;) %&gt;% mutate(variable=factor(variable, levels=rev(c(&quot;Elevation&quot;,&quot;I(Elevation^2)&quot;,&quot;logseqdepth&quot;,&quot;Transect&quot;,&quot;Random: Sampling_point&quot;)))) %&gt;% mutate(genome=factor(genome, levels=rev(varpart_tree$tip.label))) #Phylums phylum_colors &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% filter(genome %in% varpart_tree$tip.label) %&gt;% arrange(match(genome, varpart_tree$tip.label)) %&gt;% mutate(phylum = factor(phylum, levels = unique(phylum))) %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% select(phylum) colors_alphabetic &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% filter(genome %in% varpart_tree$tip.label) %&gt;% arrange(match(genome, varpart_tree$tip.label)) %&gt;% select(phylum, colors) %&gt;% unique() %&gt;% arrange(phylum) %&gt;% select(colors) %&gt;% pull() # Basal ggtree varpart_tree &lt;- varpart_tree %&gt;% force.ultrametric(.,method=&quot;extend&quot;) %&gt;% ggtree(., size = 0.3) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** # Add phylum colors next to the tree tips varpart_tree &lt;- gheatmap(varpart_tree, phylum_colors, offset=-0.2, width=0.1, colnames=FALSE) + scale_fill_manual(values=colors_alphabetic)+ labs(fill=&quot;Phylum&quot;) #Reset fill scale to use a different colour profile in the heatmap varpart_tree &lt;- varpart_tree + new_scale_fill() # Add variance stacked barplot vertical_tree &lt;- varpart_tree + scale_fill_manual(values=c(&quot;#34738f&quot;,&quot;#cccccc&quot;,&quot;#ed8a45&quot;,&quot;#b2b530&quot;,&quot;#be3e2b&quot;,&quot;#83bb90&quot;,&quot;#f6de6c&quot;, &quot;#122f3d&quot;))+ geom_fruit( data=varpart_table, geom=geom_bar, mapping = aes(x=value, y=genome, fill=variable, group=variable), pwidth = 2, offset = 0.05, width= 1, orientation=&quot;y&quot;, stat=&quot;identity&quot;, color = &quot;white&quot;, size=0.1)+ labs(fill=&quot;Variable&quot;) vertical_tree 9.3 Model fit MFCV &lt;- evaluateModelFit(hM=m, predY=cv) mean(MFCV$R2, na.rm = TRUE) [1] 0.1163624 var_pred_table &lt;- tibble(mag=m$Elevation, pred=MFCV$R2, var_pred=MFCV$R2 * varpart$vals[1,], support=getPostEstimate(hM=m, parName=&quot;Beta&quot;)$support %&gt;% .[2,], estimate=getPostEstimate(hM=m, parName=&quot;Beta&quot;)$mean %&gt;% .[2,]) # Select desired support threshold support=0.9 negsupport=1-support # Basal tree postestimates_tree &lt;- genome_tree %&gt;% keep.tip(., tip=m$spNames) #plotBeta(hM=m, post=getPostEstimate(hM=m, parName=&quot;Beta&quot;), param = &quot;Support&quot;, plotTree = TRUE, covNamesNumbers=c(1,0)) # Posterior estimate table post_estimates &lt;- getPostEstimate(hM=m, parName=&quot;Beta&quot;)$support %&gt;% as.data.frame() %&gt;% mutate(variable=m$covNames) %&gt;% pivot_longer(!variable, names_to = &quot;genome&quot;, values_to = &quot;value&quot;) %&gt;% mutate(genome=factor(genome, levels=rev(postestimates_tree$tip.label))) %&gt;% mutate(trend = case_when( value &gt;= support ~ &quot;Positive&quot;, value &lt;= negsupport ~ &quot;Negative&quot;, TRUE ~ &quot;Neutral&quot;)) post_estimate_df&lt;-post_estimates %&gt;% select(-trend) %&gt;% mutate(value = case_when( value &gt;= support~ &quot;Positive&quot;, value &lt;= negsupport ~ &quot;Negative&quot;, TRUE ~ &quot;Neutral&quot;)) %&gt;% mutate(value=factor(value, levels=c(&quot;Positive&quot;,&quot;Neutral&quot;,&quot;Negative&quot;))) %&gt;% pivot_wider(names_from = variable, values_from = value) %&gt;% rename(intercept=2, Elevation=3, Elevation_2=4, TransectAran=5, TransectSentein=6, TransectTourmalet=7, logseqdepth=8 ) %&gt;% select(genome,intercept,Elevation,Elevation_2,TransectAran,TransectSentein,TransectTourmalet,logseqdepth) %&gt;% column_to_rownames(var=&quot;genome&quot;) #Phylums phylum_colors &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% filter(genome %in% postestimates_tree$tip.label) %&gt;% arrange(match(genome, postestimates_tree$tip.label)) %&gt;% mutate(phylum = factor(phylum, levels = unique(phylum))) %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% select(phylum) colors_alphabetic &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% filter(genome %in% postestimates_tree$tip.label) %&gt;% arrange(match(genome, postestimates_tree$tip.label)) %&gt;% select(phylum, colors) %&gt;% unique() %&gt;% arrange(phylum) %&gt;% select(colors) %&gt;% pull() # Basal ggtree postestimates_tree &lt;- postestimates_tree %&gt;% force.ultrametric(.,method=&quot;extend&quot;) %&gt;% ggtree(., size = 0.3) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** #Add phylum colors next to the tree tips postestimates_tree &lt;- gheatmap(postestimates_tree, phylum_colors, offset=-0.2, width=0.1, colnames=FALSE) + scale_fill_manual(values=colors_alphabetic)+ labs(fill=&quot;Phylum&quot;) #Reset fill scale to use a different colour profile in the heatmap postestimates_tree &lt;- postestimates_tree + new_scale_fill() # Add posterior significant heatmap postestimates_tree &lt;- gheatmap(postestimates_tree, post_estimate_df, offset=0, width=0.5, colnames=TRUE, colnames_position=&quot;top&quot;,colnames_angle=90, colnames_offset_y=1, hjust=0) + scale_fill_manual(values=c(&quot;#be3e2b&quot;,&quot;#f4f4f4&quot;,&quot;#b2b530&quot;))+ labs(fill=&quot;Trend&quot;) postestimates_tree + vexpand(.25, 1) # expand top #Compute the residual correlation matrix OmegaCor = computeAssociations(m) # Reference tree (for sorting genomes) genome_tree_subset &lt;- genome_tree %&gt;% keep.tip(., tip=m$spNames) #Co-occurrence matrix at the animal level supportLevel = 0.95 toPlot = ((OmegaCor[[1]]$support&gt;supportLevel) + (OmegaCor[[1]]$support&lt;(1-supportLevel))&gt;0)*OmegaCor[[1]]$mean matrix &lt;- toPlot %&gt;% as.data.frame() %&gt;% rownames_to_column(var=&quot;genome1&quot;) %&gt;% pivot_longer(!genome1, names_to = &quot;genome2&quot;, values_to = &quot;cor&quot;) %&gt;% mutate(genome1= factor(genome1, levels=genome_tree_subset$tip.label)) %&gt;% mutate(genome2= factor(genome2, levels=genome_tree_subset$tip.label)) %&gt;% ggplot(aes(x = genome1, y = genome2, fill = cor)) + geom_tile() + scale_fill_gradient2(low = &quot;#be3e2b&quot;, mid = &quot;#f4f4f4&quot;, high = &quot;#b2b530&quot;)+ theme_void() corr.legend &lt;- get_legend(matrix, position=&quot;none&quot;) corr.legend &lt;- as_ggplot(corr.legend) vtree &lt;- genome_tree_subset %&gt;% force.ultrametric(.,method=&quot;extend&quot;) %&gt;% ggtree(., expand=1.5) + hexpand(0.5) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** #Add phylum colors next to the tree tips vtree &lt;- gheatmap(vtree, phylum_colors, offset=-0.1, width=0.6, colnames=FALSE) + scale_fill_manual(values=colors_alphabetic) + theme(legend.position = &#39;none&#39;) + scale_y_reverse() vtreeD &lt;- genome_tree_subset %&gt;% force.ultrametric(.,method=&quot;extend&quot;) %&gt;% ggtree(., expand=1.5, layout=&quot;dendrogram&quot;) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** #Add phylum colors next to the tree tips vtreeD &lt;- gheatmap(vtreeD, phylum_colors, offset=-0.1, width=0.6, colnames=FALSE) + scale_fill_manual(values=colors_alphabetic) + theme(legend.position = &#39;none&#39;) # properly align trees to corr matrix with package aplot matrix %&gt;% insert_left(vtree, width=.25) %&gt;% aplot::insert_top(vtreeD, height=.3) %&gt;% insert_right(corr.legend, width=0.15) 9.4 Phylogenetic signal mpost &lt;- convertToCodaObject(m) quantile(unlist(mpost$Rho), probs = c(.05,.5,.95)) 5% 50% 95% 0.99 1.00 1.00 9.5 Elevation predictions gradient = seq(940, 2350, by = 100) gradientlength = length(gradient) #Treatment-specific gradient predictions pred_elevation &lt;- constructGradient(m, focalVariable = &quot;Elevation&quot;, non.focalVariables = 1, ngrid=gradientlength) %&gt;% predict(m, Gradient = ., expected = TRUE) %&gt;% do.call(rbind,.) %&gt;% as.data.frame() %&gt;% mutate(elevation=rep(gradient,1000)) %&gt;% pivot_longer(-c(elevation), names_to = &quot;genome&quot;, values_to = &quot;value&quot;) 9.5.1 Responses to elevation # Select desired support threshold support=0.9 negsupport=1-support #Get phylum colors from the EHI standard phylum_colors &lt;- genome_metadata %&gt;% left_join(read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;), by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, postestimates_tree$tip.label)) %&gt;% select(phylum, colors) %&gt;% unique() %&gt;% arrange(phylum) %&gt;% #slice(2:5) %&gt;% select(colors) %&gt;% pull() post_estimates %&gt;% filter(variable==&quot;Elevation&quot;) %&gt;% select(genome, trend) %&gt;% left_join(pred_elevation, by=join_by(genome==genome)) %&gt;% group_by(genome, trend, elevation) %&gt;% summarize(value = mean(value, na.rm = TRUE)) %&gt;% left_join(genome_metadata, by=join_by(genome == genome)) %&gt;% ggplot(aes(x=elevation, y=value, group=genome, color=phylum, linetype=trend)) + geom_line() + scale_linetype_manual(values=c(&quot;solid&quot;,&quot;dashed&quot;,&quot;solid&quot;)) + scale_color_manual(values=phylum_colors) + facet_grid(fct_rev(trend) ~ phylum) + labs(y=&quot;Genome abundance (log)&quot;,x=&quot;Elevation&quot;) + theme(legend.position = &quot;none&quot;) + theme_minimal() + theme(legend.position = &quot;none&quot;, axis.text.x = element_text(angle = 45, hjust = 0.8,), axis.line.x = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), ) 9.6 Functional predictions 9.6.1 Element level elements_table &lt;- genome_gifts_filt %&gt;% to.elements(., GIFT_db) %&gt;% as.data.frame() community_elements &lt;- pred_elevation %&gt;% group_by(elevation, genome) %&gt;% mutate(row_id = row_number()) %&gt;% pivot_wider(names_from = genome, values_from = value) %&gt;% ungroup() %&gt;% group_split(row_id) %&gt;% as.list() %&gt;% lapply(., FUN = function(x){x %&gt;% select(-row_id) %&gt;% column_to_rownames(var = &quot;elevation&quot;) %&gt;% as.data.frame() %&gt;% exp() %&gt;% t() %&gt;% tss() %&gt;% to.community(elements_table,.,GIFT_db) %&gt;% as.data.frame() %&gt;% rownames_to_column(var=&quot;elevation&quot;) }) calculate_slope &lt;- function(x) { lm_fit &lt;- lm(unlist(x) ~ seq_along(unlist(x))) coef(lm_fit)[2] } element_predictions &lt;- map_dfc(community_elements, function(mat) { mat %&gt;% column_to_rownames(var = &quot;elevation&quot;) %&gt;% t() %&gt;% as.data.frame() %&gt;% rowwise() %&gt;% mutate(slope = calculate_slope(c_across(everything()))) %&gt;% select(slope) }) %&gt;% t() %&gt;% as.data.frame() %&gt;% set_names(colnames(community_elements[[1]])[-1]) %&gt;% rownames_to_column(var=&quot;iteration&quot;) %&gt;% pivot_longer(!iteration, names_to=&quot;trait&quot;,values_to=&quot;value&quot;) %&gt;% group_by(trait) %&gt;% summarise(mean=mean(value), p1 = quantile(value, probs = 0.1), p9 = quantile(value, probs = 0.9), positive_support = sum(value &gt; 0)/1000, negative_support = sum(value &lt; 0)/1000) %&gt;% arrange(-positive_support) 9.6.1.1 Positive associated functions at element level unique_funct_db&lt;- GIFT_db[c(2,4,5,6)] %&gt;% distinct(Code_element, .keep_all = TRUE) element_predictions %&gt;% filter(mean &gt;0) %&gt;% arrange(-positive_support) %&gt;% filter(positive_support&gt;=0.9) %&gt;% left_join(unique_funct_db, by = join_by(trait == Code_element))%&gt;% arrange(Domain,Function)%&gt;% paged_table() 9.6.1.2 Negative associated functions at element level element_predictions %&gt;% filter(mean &lt;0) %&gt;% arrange(-negative_support) %&gt;% filter(negative_support&gt;=0.9) %&gt;% left_join(unique_funct_db, by = join_by(trait == Code_element))%&gt;% arrange(Domain,Function)%&gt;% paged_table() #Positively associated positive &lt;- element_predictions %&gt;% filter(mean &gt;0) %&gt;% arrange(mean) %&gt;% filter(positive_support&gt;=0.9) %&gt;% select(-negative_support) %&gt;% rename(support=positive_support) #Negatively associated negative &lt;- element_predictions %&gt;% filter(mean &lt;0) %&gt;% arrange(mean) %&gt;% filter(negative_support&gt;=0.9) %&gt;% select(-positive_support) %&gt;% rename(support=negative_support) all_elements &lt;- bind_rows(positive,negative) %&gt;% left_join(GIFT_db,by=join_by(trait==Code_element)) %&gt;% mutate(trait=factor(trait,levels=c(rev(positive$trait),rev(negative$trait)))) %&gt;% mutate(Code_function=factor(Code_function)) %&gt;% mutate(element_legend=str_c(trait,&quot; - &quot;,Element)) %&gt;% mutate(function_legend=str_c(Code_function,&quot; - &quot;,Function)) %&gt;% select(trait,mean,p1,p9,element_legend,function_legend) %&gt;% unique() gift_colors &lt;- read_tsv(&quot;data/gift_colors.tsv&quot;) %&gt;% mutate(legend=str_c(Code_function,&quot; - &quot;,Function)) %&gt;% filter(legend %in% all_elements$function_legend) all_elements %&gt;% ggplot(aes(x=mean, y=fct_reorder(element_legend, mean), xmin=p1, xmax=p9, color=function_legend)) + geom_point() + geom_errorbar() + xlim(c(-0.15,0.15)) + geom_vline(xintercept=0) + scale_color_manual(values = gift_colors$Color) + theme_minimal() + labs(x=&quot;Regression coefficient&quot;,y=&quot;Functional trait&quot;) community_elements %&gt;% bind_rows() %&gt;% pivot_longer(-elevation, names_to = &quot;trait&quot;, values_to = &quot;value&quot;) %&gt;% filter(trait %in% positive$trait) %&gt;% mutate(trait=factor(trait, levels=positive$trait)) %&gt;% mutate(elevation=as.numeric(elevation)) %&gt;% ggplot(aes(x=elevation, y=value)) + geom_smooth(method = lm, formula = y ~ x, se = TRUE) + #geom_smooth(method = lm, formula = y ~ splines::bs(x, 3), se = TRUE) + facet_wrap(~trait, ncol=5, scales=&quot;free&quot;) + theme_minimal() + labs(x=&quot;Elevation&quot;,y=&quot;Metabolic Capacity Index&quot;) 9.6.1.3 GIFT test visualization # Aggregate bundle-level GIFTs into the compound level #genome_counts_filt_filt &lt;- tibble::rownames_to_column(genome_counts_filt_filt, var = &quot;genome&quot;) GIFTs_elements_filtered &lt;- elements_table[rownames(elements_table) %in% genome_counts_filt$genome, ] GIFTs_elements_filtered &lt;- as.data.frame(GIFTs_elements_filtered) %&gt;% select_if(~ !is.numeric(.) || sum(.) != 0) # Get community-weighed average GIFTs per sample GIFTs_elements_community &lt;- to.community(GIFTs_elements_filtered, genome_counts_filt %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% tss(), GIFT_db) GIFTs_elements_community %&gt;% as.data.frame() %&gt;% rownames_to_column(var=&quot;sample&quot;) %&gt;% pivot_longer(!sample,names_to=&quot;trait&quot;,values_to=&quot;gift&quot;) %&gt;% left_join(sample_metadata, by = join_by(sample == EHI_number)) %&gt;% mutate(functionid = substr(trait, 1, 3)) %&gt;% mutate(trait = case_when( trait %in% GIFT_db$Code_element ~ GIFT_db$Element[match(trait, GIFT_db$Code_element)], TRUE ~ trait )) %&gt;% mutate(functionid = case_when( functionid %in% GIFT_db$Code_function ~ GIFT_db$Function[match(functionid, GIFT_db$Code_function)], TRUE ~ functionid )) %&gt;% mutate(trait=factor(trait,levels=unique(GIFT_db$Element))) %&gt;% mutate(functionid=factor(functionid,levels=unique(GIFT_db$Function))) %&gt;% ggplot(aes(x=sample,y=trait,fill=gift)) + geom_tile(colour=&quot;white&quot;, linewidth=0.2)+ scale_fill_gradientn(colours=rev(c(&quot;#d53e4f&quot;, &quot;#f46d43&quot;, &quot;#fdae61&quot;, &quot;#fee08b&quot;, &quot;#e6f598&quot;, &quot;#abdda4&quot;, &quot;#ddf1da&quot;)))+ facet_grid(functionid ~ Elevation, scales=&quot;free&quot;,space=&quot;free&quot;) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), strip.text.y = element_text(angle = 0)) + labs(y=&quot;Traits&quot;,x=&quot;Samples&quot;,fill=&quot;GIFT&quot;) 9.6.2 Functional level functions_table &lt;- elements_table %&gt;% to.functions(., GIFT_db) %&gt;% as.data.frame() community_functions &lt;- pred_elevation %&gt;% group_by(elevation, genome) %&gt;% mutate(row_id = row_number()) %&gt;% pivot_wider(names_from = genome, values_from = value) %&gt;% ungroup() %&gt;% group_split(row_id) %&gt;% as.list() %&gt;% lapply(., FUN = function(x){x %&gt;% select(-row_id) %&gt;% column_to_rownames(var = &quot;elevation&quot;) %&gt;% as.data.frame() %&gt;% exp() %&gt;% t() %&gt;% tss() %&gt;% to.community(functions_table,.,GIFT_db) %&gt;% as.data.frame() %&gt;% rownames_to_column(var=&quot;elevation&quot;) }) #max-min option calculate_slope &lt;- function(x) { lm_fit &lt;- lm(unlist(x) ~ seq_along(unlist(x))) coef(lm_fit)[2] } function_predictions &lt;- map_dfc(community_functions, function(mat) { mat %&gt;% column_to_rownames(var = &quot;elevation&quot;) %&gt;% t() %&gt;% as.data.frame() %&gt;% rowwise() %&gt;% mutate(slope = calculate_slope(c_across(everything()))) %&gt;% select(slope) }) %&gt;% t() %&gt;% as.data.frame() %&gt;% set_names(colnames(community_functions[[1]])[-1]) %&gt;% rownames_to_column(var=&quot;iteration&quot;) %&gt;% pivot_longer(!iteration, names_to=&quot;trait&quot;,values_to=&quot;value&quot;) %&gt;% group_by(trait) %&gt;% summarise(mean=mean(value), p1 = quantile(value, probs = 0.1), p9 = quantile(value, probs = 0.9), positive_support = sum(value &gt; 0)/1000, negative_support = sum(value &lt; 0)/1000) %&gt;% arrange(-positive_support) 9.6.2.1 Positive associated functions at element level function_predictions %&gt;% filter(mean &gt;0) %&gt;% arrange(-positive_support) %&gt;% filter(positive_support&gt;=0.9) %&gt;% paged_table() 9.6.2.2 Negative associated functions at element level function_predictions %&gt;% filter(mean &lt;0) %&gt;% arrange(-negative_support) %&gt;% filter(negative_support&gt;=0.9) %&gt;% paged_table() positive_func &lt;- function_predictions %&gt;% filter(mean &gt;0) %&gt;% arrange(mean) %&gt;% filter(positive_support&gt;=0.9) %&gt;% dplyr::select(-negative_support) %&gt;% rename(support=positive_support) negative_func &lt;- function_predictions %&gt;% filter(mean &lt;0) %&gt;% arrange(mean) %&gt;% filter(negative_support&gt;=0.9) %&gt;% dplyr::select(-positive_support) %&gt;% rename(support=negative_support) all_functions &lt;- bind_rows(positive_func,negative_func) %&gt;% left_join(GIFT_db,by=join_by(trait==Code_function)) %&gt;% mutate(trait=factor(trait)) %&gt;% mutate(function_legend=str_c(trait,&quot; - &quot;,Function)) %&gt;% select(trait,mean,p1,p9,function_legend) %&gt;% unique() gift_colors &lt;- read_tsv(&quot;data/gift_colors.tsv&quot;) %&gt;% mutate(legend=str_c(Code_function,&quot; - &quot;,Function)) %&gt;% filter(legend %in% all_functions$function_legend) all_functions %&gt;% ggplot(aes(x=mean, y=fct_reorder(function_legend, mean), xmin=p1, xmax=p9, color=function_legend)) + geom_point() + geom_errorbar() + xlim(c(-0.05,0.06)) + geom_vline(xintercept=0) + scale_color_manual(values = gift_colors$Color) + theme_minimal() + labs(x=&quot;Regression coefficient&quot;,y=&quot;Functional trait&quot;) + guides(col = guide_legend(ncol = 1)) community_functions %&gt;% bind_rows() %&gt;% pivot_longer(-elevation, names_to = &quot;trait&quot;, values_to = &quot;value&quot;) %&gt;% filter(trait %in% function_predictions$trait) %&gt;% mutate(trait=factor(trait, levels=function_predictions$trait)) %&gt;% mutate(elevation=as.numeric(elevation)) %&gt;% ggplot(aes(x=elevation, y=value)) + geom_smooth(method = lm, formula = y ~ x, se = TRUE) + #geom_smooth(method = lm, formula = y ~ splines::bs(x, 3), se = TRUE) + facet_wrap(~trait, ncol=5, scales=&quot;free&quot;) + theme_minimal() + labs(x=&quot;Elevation&quot;,y=&quot;Metabolic Capacity Index&quot;) 9.6.2.3 GIFT test visualization # Aggregate element-level GIFTs into the function level GIFTs_functions &lt;- to.functions(GIFTs_elements_filtered, GIFT_db) functions &lt;- GIFTs_functions %&gt;% as.data.frame() # Get community-weighed average GIFTs per sample GIFTs_functions_community &lt;- to.community(GIFTs_functions, genome_counts_filt %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% tss(), GIFT_db) GIFTs_functions_community %&gt;% as.data.frame() %&gt;% rownames_to_column(var=&quot;sample&quot;) %&gt;% pivot_longer(!sample,names_to=&quot;trait&quot;,values_to=&quot;gift&quot;) %&gt;% left_join(sample_metadata, by = join_by(sample == EHI_number)) %&gt;% ggplot(aes(x=trait,y=sample,fill=gift)) + geom_tile(colour=&quot;white&quot;, size=0.2)+ scale_fill_gradientn(colours=rev(c(&quot;#d53e4f&quot;, &quot;#f46d43&quot;, &quot;#fdae61&quot;, &quot;#fee08b&quot;, &quot;#e6f598&quot;, &quot;#abdda4&quot;, &quot;#ddf1da&quot;)))+ facet_grid(Elevation ~ ., scales=&quot;free&quot;,space=&quot;free&quot;) 9.6.3 Domain level domains_table &lt;- functions_table %&gt;% to.domains(., GIFT_db) %&gt;% as.data.frame() community_domains &lt;- pred_elevation %&gt;% group_by(elevation, genome) %&gt;% mutate(row_id = row_number()) %&gt;% pivot_wider(names_from = genome, values_from = value) %&gt;% ungroup() %&gt;% group_split(row_id) %&gt;% as.list() %&gt;% lapply(., FUN = function(x){x %&gt;% select(-row_id) %&gt;% column_to_rownames(var = &quot;elevation&quot;) %&gt;% as.data.frame() %&gt;% exp() %&gt;% t() %&gt;% tss() %&gt;% to.community(domains_table,.,GIFT_db) %&gt;% as.data.frame() %&gt;% rownames_to_column(var=&quot;elevation&quot;) }) #max-min option calculate_slope &lt;- function(x) { lm_fit &lt;- lm(unlist(x) ~ seq_along(unlist(x))) coef(lm_fit)[2] } domain_predictions &lt;- map_dfc(community_domains, function(mat) { mat %&gt;% column_to_rownames(var = &quot;elevation&quot;) %&gt;% t() %&gt;% as.data.frame() %&gt;% rowwise() %&gt;% mutate(slope = calculate_slope(c_across(everything()))) %&gt;% select(slope) }) %&gt;% t() %&gt;% as.data.frame() %&gt;% set_names(colnames(community_domains[[1]])[-1]) %&gt;% rownames_to_column(var=&quot;iteration&quot;) %&gt;% pivot_longer(!iteration, names_to=&quot;trait&quot;,values_to=&quot;value&quot;) %&gt;% group_by(trait) %&gt;% summarise(mean=mean(value), p1 = quantile(value, probs = 0.1), p9 = quantile(value, probs = 0.9), positive_support = sum(value &gt; 0)/1000, negative_support = sum(value &lt; 0)/1000) %&gt;% arrange(-positive_support) 9.6.3.1 Positive associated functions at element level (there isn’t) domain_predictions %&gt;% filter(mean &gt;0) %&gt;% arrange(-positive_support) %&gt;% filter(positive_support&gt;=0.9) %&gt;% paged_table() 9.6.3.2 Negative associated functions at element level (there isn’t) domain_predictions %&gt;% filter(mean &lt;0) %&gt;% arrange(-negative_support) %&gt;% filter(negative_support&gt;=0.9) %&gt;% paged_table() all_domains &lt;- domain_predictions %&gt;% left_join(GIFT_db,by=join_by(trait==Code_function)) %&gt;% mutate(trait=factor(trait)) %&gt;% mutate(function_legend=str_c(trait,&quot; - &quot;,Function)) %&gt;% select(trait,mean,p1,p9) %&gt;% unique() all_domains %&gt;% ggplot(aes(x=mean, y=fct_reorder(trait, mean), xmin=p1, xmax=p9, color=trait)) + geom_point() + geom_errorbar() + xlim(c(-0.02,0.03)) + geom_vline(xintercept=0) + theme_minimal() + labs(x=&quot;Regression coefficient&quot;,y=&quot;Domain level&quot;) + guides(col = guide_legend(ncol = 1)) community_domains %&gt;% bind_rows() %&gt;% pivot_longer(-elevation, names_to = &quot;trait&quot;, values_to = &quot;value&quot;) %&gt;% filter(trait %in% domain_predictions$trait) %&gt;% mutate(trait=factor(trait, levels=domain_predictions$trait)) %&gt;% mutate(elevation=as.numeric(elevation)) %&gt;% ggplot(aes(x=elevation, y=value)) + geom_smooth(method = lm, formula = y ~ x, se = TRUE) + #geom_smooth(method = lm, formula = y ~ splines::bs(x, 3), se = TRUE) + facet_wrap(~trait, ncol=5, scales=&quot;free&quot;) + theme_minimal() + labs(x=&quot;Elevation&quot;,y=&quot;Metabolic Capacity Index&quot;) 9.6.3.3 GIFT test visualization # Aggregate function-level GIFTs into overall Biosynthesis, Degradation and Structural GIFTs GIFTs_domains &lt;- to.domains(GIFTs_functions, GIFT_db) domains &lt;- GIFTs_domains %&gt;% as.data.frame() # Get community-weighed average GIFTs per sample GIFTs_domains_community &lt;- to.community(GIFTs_domains, genome_counts_filt %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% tss(), GIFT_db) GIFTs_domains_community %&gt;% as.data.frame() %&gt;% rownames_to_column(var=&quot;sample&quot;) %&gt;% pivot_longer(!sample,names_to=&quot;trait&quot;,values_to=&quot;gift&quot;) %&gt;% left_join(sample_metadata, by = join_by(sample == EHI_number)) %&gt;% ggplot(aes(x=trait,y=sample,fill=gift)) + geom_tile(colour=&quot;white&quot;, size=0.2)+ scale_fill_gradientn(colours=rev(c(&quot;#d53e4f&quot;, &quot;#f46d43&quot;, &quot;#fdae61&quot;, &quot;#fee08b&quot;, &quot;#e6f598&quot;, &quot;#abdda4&quot;, &quot;#ddf1da&quot;)))+ facet_grid(Elevation ~ ., scales=&quot;free&quot;,space=&quot;free&quot;) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
