[["index.html", "AlberdiLab | Martin-Bideguren et al. 2024 Study title to be added Chapter 1 Introduction 1.1 Prepare the R environment", " AlberdiLab | Martin-Bideguren et al. 2024 Study title to be added Garazi Martin-Bideguren1 Ostaizka Aizpurua2 Javier Abalos3 Fabien Aubret4 Guillem Pérez i de Lanuza5 Tom Sarraude6 Nathalie Feiner7 Tobias Uller8 Aoife Leonard9 Antton Alberdi10 2024-04-22 Chapter 1 Introduction This webbook contains all the code used for data analysis in study of the population-level metagenomic data of Podarcis muralis lizards across elevational gradients in various mountain ranges of the Pyrenees. 1.1 Prepare the R environment 1.1.1 Environment To reproduce all the analyses locally, clone this repository in your computer using: RStudio &gt; New Project &gt; Version Control &gt; Git And indicating the following git repository: https://github.com/alberdilab/elevational_hologenomics.git Once the R project has been created, follow the instructions and code chunks shown in this webbook. 1.1.2 Libraries The following R packages are required for the data analysis. # Base library(R.utils) library(knitr) library(tidyverse) library(devtools) library(tinytable) # For tree handling library(ape) library(phyloseq) library(phytools) # For plotting library(ggplot2) library(ggrepel) library(ggpubr) library(ggnewscale) library(gridExtra) library(ggtreeExtra) library(ggtree) library(ggh4x) # For statistics library(spaa) library(vegan) library(Rtsne) library(geiger) library(hilldiv2) library(distillR) library(broom.mixed) #library(lmerTest) library(Hmsc) library(corrplot) University of Copenhagen, garazi.bideguren@sund.ku.dk↩︎ University of Copenhagen, ostaizka.aizpurua@sund.ku.dk↩︎ University of Valencia, jal4@uv.es↩︎ Centre National de la Recherche Scientifique, faubret@gmail.com↩︎ University of Valencia and Universidade do Porto, guillem.perez-lanuza@uv.es↩︎ , t.sarraude@gmail.com↩︎ , ↩︎ University of Lund, tobias.uller@biol.lu.se↩︎ University of Copenhagen, aoife.leonard@sund.ku.dk↩︎ University of Copenhagen, antton.alberdi@sund.ku.dk↩︎ "],["prepare-data.html", "Chapter 2 Prepare data 2.1 Load data 2.2 Create working objects 2.3 Prepare color scheme 2.4 Wrap working objects", " Chapter 2 Prepare data 2.1 Load data Load the original data files outputted by the bioinformatic pipeline. 2.1.1 Sample metadata sample_metadata &lt;- read.csv(&quot;data/Pyrenees_metadata_all_v2.csv&quot;,sep=&quot;,&quot;,header=T)%&gt;% filter(EHI_number != &quot;EHI00102&quot;) %&gt;% filter(EHI_number != &quot;EHI00182&quot;) %&gt;% filter(EHI_number !=&quot;EHI00435&quot;) 2.1.2 Read counts read_counts &lt;- read_tsv(&quot;data/DMB0113_counts.tsv&quot;) %&gt;% rename(genome = 1) %&gt;% select(-EHI00102, -EHI00182,-EHI00435) #remove samples 2.1.3 Genome base hits genome_coverage &lt;- read_tsv(&quot;data/DMB0113_coverage.tsv&quot;) %&gt;% rename(genome = 1) %&gt;% select(-EHI00102, -EHI00182,-EHI00435) #remove samples 2.1.4 Genome taxonomy genome_metadata &lt;- read_tsv(&quot;data/DMB0113_mag_info.tsv&quot;) %&gt;% rename(length=mag_size) 2.1.5 Genome tree genome_tree &lt;- read_tree(&quot;data/DMB0113.tree&quot;) genome_tree$tip.label &lt;- str_replace_all(genome_tree$tip.label,&quot;&#39;&quot;, &quot;&quot;) #remove single quotes in MAG names genome_tree &lt;- keep.tip(genome_tree, tip=genome_metadata$genome) # keep only MAG tips 2.1.6 Genome annotations Distill annotations already into GIFTs genome_gifts_raw=&quot;data/GIFTs.tsv&quot; genome_gifts &lt;- read.table(genome_gifts_raw,header=T, sep=&quot;\\t&quot;, row.names=1) 2.2 Create working objects Transform the original data files into working objects for downstream analyses. 2.2.1 Filter reads by coverage min_coverage=0.3 read_counts_filt &lt;- genome_coverage %&gt;% mutate(across(where(is.numeric), ~ ifelse(. &gt; min_coverage, 1, 0))) %&gt;% mutate(across(-1, ~ . * read_counts[[cur_column()]])) 2.2.2 Transform reads into genome counts readlength=150 genome_counts &lt;- read_counts %&gt;% mutate(across(where(is.numeric), ~ . / (genome_metadata$length / readlength) )) readlength=150 genome_counts_filt &lt;- read_counts_filt %&gt;% mutate(across(where(is.numeric), ~ . / (genome_metadata$length / readlength) )) 2.3 Prepare color scheme AlberdiLab projects use unified color schemes developed for the Earth Hologenome Initiative, to facilitate figure interpretation. phylum_colors &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, genome_tree$tip.label)) %&gt;% select(phylum, colors) %&gt;% unique() %&gt;% arrange(phylum) %&gt;% pull(colors, name=phylum) 2.4 Wrap working objects All working objects are wrapped into a single Rdata object to facilitate downstream usage. save(sample_metadata, genome_metadata, read_counts, genome_counts, genome_counts_filt, genome_tree, genome_gifts, phylum_colors, file = &quot;data/data.Rdata&quot;) "],["data-statistics.html", "Chapter 3 Data statistics 3.1 Sequencing reads statistics 3.2 Sequencing depth 3.3 DNA fractions 3.4 Recovered microbial fraction", " Chapter 3 Data statistics load(&quot;data/data.Rdata&quot;) 3.1 Sequencing reads statistics sample_metadata %&gt;% summarise(Total=sum(reads_post_fastp * 150 / 1000000000) %&gt;% round(2), mean=mean(reads_post_fastp * 150 / 1000000000) %&gt;% round(2), sd=sd(reads_post_fastp * 150 / 1000000000) %&gt;% round(2)) %&gt;% unite(&quot;Average&quot;,mean, sd, sep = &quot; ± &quot;, remove = TRUE) %&gt;% tt() tinytable_ayjn52drj89ac5sknxxg .table td.tinytable_css_l16f9ae10b3xl6l7lpam, .table th.tinytable_css_l16f9ae10b3xl6l7lpam { border-bottom: solid 0.1em #d3d8dc; } Total Average 655.05 6.18 ± 2.77 3.2 Sequencing depth sequencing_depth &lt;- read_counts %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% colSums() 3.3 DNA fractions sequence_fractions &lt;- read_counts %&gt;% pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;value&quot;) %&gt;% group_by(sample) %&gt;% summarise(mags = sum(value)) %&gt;% left_join(sample_metadata, by = join_by(sample == EHI_number)) %&gt;% select(sample,mags,metagenomic_bases,host_bases,bases_lost_fastp_percent) %&gt;% mutate(mags_bases = mags*146) %&gt;% mutate(lowqual_bases = ((metagenomic_bases+host_bases)/(1-bases_lost_fastp_percent))-(metagenomic_bases+host_bases)) %&gt;% mutate(unmapped_bases = metagenomic_bases - mags_bases) %&gt;% mutate(unmapped_bases = ifelse(unmapped_bases &lt; 0, 0, unmapped_bases)) %&gt;% select(sample, lowqual_bases, host_bases, unmapped_bases, mags_bases) sequence_fractions %&gt;% mutate_at(vars(-sample), ~./1000000000) %&gt;% rename(&quot;Sample&quot;=1, &quot;Low quality&quot;=2, &quot;Mapped to host&quot;=3, &quot;Unmapped&quot;=4, &quot;Mapped to MAGs&quot;=5) %&gt;% tt() tinytable_eg154j6163s3zdt84b01 .table td.tinytable_css_x0vi40h208shaxtkgyde, .table th.tinytable_css_x0vi40h208shaxtkgyde { border-bottom: solid 0.1em #d3d8dc; } Sample Low quality Mapped to host Unmapped Mapped to MAGs EHI00069 1.1441521 0.920532571 2.0517957 4.1058263 EHI00070 0.2348919 0.937599880 0.8332809 1.6364476 EHI00072 0.3717090 0.078319449 0.9507999 4.0430716 EHI00073 0.1504762 0.007300164 0.6458066 1.8453666 EHI00074 0.5700275 0.034671349 1.7906564 5.7526051 EHI00075 0.2702205 0.444390387 0.9599202 2.4896265 EHI00076 0.3350547 0.081391903 1.4172925 3.8389468 EHI00077 0.1353495 0.641770627 0.3885242 1.3947384 EHI00079 0.3377906 2.721037061 0.5653554 0.8084465 EHI00080 0.7291964 1.605187153 2.3611523 2.6883254 EHI00081 0.2184180 0.727448090 0.5615342 1.3358755 EHI00085 0.2300087 0.212261834 0.5665817 1.9281604 EHI00086 0.3471176 0.417593612 1.0770869 1.7440344 EHI00088 0.2278663 0.071769210 0.5556301 3.0141044 EHI00089 0.1751910 0.034915171 0.5162821 1.9576155 EHI00091 0.2622745 0.230039482 0.8255133 2.4924602 EHI00092 0.3917724 0.170842450 1.0255541 4.9181624 EHI00093 0.3725739 0.199633318 1.1938025 2.3137473 EHI00095 0.1768550 0.255990148 0.3449738 1.9242079 EHI00097 0.5249214 0.366551383 0.8028468 2.9685729 EHI00098 0.3176395 0.040047629 1.7271586 3.1498120 EHI00100 0.4386907 2.398470758 0.8228622 4.1093643 EHI00101 0.7257361 0.451928365 4.9291736 1.9943098 EHI00103 0.2036111 0.843529516 0.5714195 1.3395113 EHI00104 0.1769983 0.643701669 0.6807099 1.2574891 EHI00105 0.2711051 0.005694785 0.9087805 2.7311372 EHI00106 1.1082626 1.058626752 1.8709694 2.0746217 EHI00107 0.3818355 0.184257358 1.5836979 3.0592637 EHI00108 0.3420046 0.394171066 0.5356632 2.7441687 EHI00110 0.3648881 0.591747269 0.5588077 2.6145261 EHI00111 0.4392502 0.151954279 1.1992388 3.5773008 EHI00112 0.7134927 0.085183185 1.1328903 3.6469985 EHI00113 0.8620893 0.617092903 1.4939464 7.3254896 EHI00114 0.4127445 0.087174427 2.3985081 4.6641659 EHI00115 0.6290438 0.062352261 2.6081814 3.0085937 EHI00116 0.4130247 0.039596686 0.8559983 4.7270478 EHI00117 0.6850197 0.423816725 1.2454024 7.0782364 EHI00118 0.3963952 0.784391517 0.9049477 3.7006953 EHI00119 0.4448016 0.038727564 1.5277021 4.6761692 EHI00120 0.3549466 0.051038023 0.7165254 3.8122875 EHI00121 0.2487524 1.196143747 0.9172490 1.9448859 EHI00122 0.3967333 0.056247498 1.7140526 5.3880487 EHI00124 0.3101617 0.113171041 1.6986936 3.2732918 EHI00125 0.3008464 0.313488992 1.2381544 3.1620784 EHI00126 0.2076878 1.194652957 0.5668728 1.1557808 EHI00128 0.3688688 0.149336152 1.0558709 2.9648899 EHI00129 0.2827708 0.212726094 0.7352845 2.7738704 EHI00130 0.2917071 0.082344877 1.0170695 2.1151693 EHI00131 0.1940832 0.943415382 0.4863996 1.2048589 EHI00133 0.2569782 0.429506925 0.3484713 3.3747982 EHI00134 0.5620395 1.988142143 1.9520876 3.9427347 EHI00137 0.2948339 0.250489910 1.0341318 2.4844583 EHI00138 0.2673241 0.179238573 0.5826993 2.8578460 EHI00139 0.3001940 0.034225947 0.9413847 2.1426906 EHI00176 0.7041777 0.100761385 0.7196926 2.7465205 EHI00177 0.2555111 0.016053624 0.5228890 2.1639513 EHI00178 0.2415179 0.045338274 1.3634101 2.6038297 EHI00179 0.1816121 0.023148016 0.9401620 2.3926575 EHI00180 0.5363481 0.037200326 0.7786810 2.4699635 EHI00181 0.1978972 0.301399301 0.4733087 2.4456488 EHI00422 0.1660426 0.058188268 0.4631427 2.3301737 EHI00426 0.6048076 0.374841259 1.6091057 5.6754435 EHI00428 0.4361908 0.354862015 0.9866519 3.7380622 EHI00433 0.6941201 0.730117194 1.6017157 3.7066518 EHI00438 0.2938182 0.100587490 0.8490354 4.7546269 EHI00441 0.5217550 0.202212815 2.3199030 6.8309541 EHI00451 0.4696437 0.318898071 1.2315115 5.0794188 EHI00456 0.5747753 0.097152439 0.6337192 4.7496272 EHI00458 0.5541280 0.326249839 1.7364884 4.9185106 EHI00462 0.5139086 0.330809687 1.3870295 4.8485639 EHI00464 0.5604449 0.962080506 1.5487451 5.0533364 EHI00465 0.1355889 0.041795770 0.7088416 1.4262076 EHI00467 0.4291035 0.854761759 1.6444666 3.7590494 EHI00470 0.6625583 1.679223689 1.8675738 8.1840405 EHI00472 0.3619652 0.586418138 1.8074071 3.3732380 EHI00473 0.4841385 0.477433785 1.2481742 4.8043613 EHI00477 0.4782444 0.087653441 2.7186490 3.7317223 EHI00479 0.8395454 0.074374376 1.9936025 12.8156007 EHI00480 0.7475415 0.793212202 3.1481051 4.3553735 EHI00481 0.5040521 0.094726409 1.3739735 5.3792865 EHI00483 0.4545170 1.532171008 0.8653232 4.7402692 EHI00484 0.3037426 0.269250378 1.3870200 5.2563238 EHI00488 0.4900356 2.212642337 2.0850126 4.3632065 EHI00490 0.6234248 0.180662818 3.5993286 7.8297890 EHI00493 0.4026458 2.030328521 2.7098633 2.4780854 EHI00496 0.4536382 0.415085470 1.7045368 6.1699650 EHI00499 3.5142773 2.204637514 3.4291586 3.2083353 EHI00504 0.5335873 2.167943278 1.2709452 4.9663386 EHI00506 0.7953759 0.639271744 1.7418071 8.0883653 EHI00507 0.4077748 0.136492692 1.5474048 5.5083429 EHI00512 0.6299478 8.067540048 0.5964127 1.3433168 EHI00514 0.4590217 0.336676348 1.5023882 6.2571308 EHI00518 0.4082296 0.012341521 1.0122951 5.8379043 EHI00524 0.4918121 1.320091255 2.0577845 4.8996823 EHI00525 0.3238390 0.105964164 1.1420157 5.0531429 EHI00527 0.5623443 0.128178226 2.3107744 7.6106934 EHI00529 0.3350620 0.129930230 1.3102065 5.1130080 EHI00536 0.4725239 0.010876654 1.2534820 7.7176039 EHI00537 0.3665586 0.089579032 2.4631156 1.4492223 EHI00538 0.4501201 2.638414328 0.6397030 3.1637601 EHI00541 0.7086242 0.152318595 1.4153324 6.8350770 EHI00547 1.0225445 2.648359289 7.0526142 6.1760904 EHI00566 0.5706734 0.218664855 1.7237625 7.3779017 EHI00567 0.4565067 0.133011864 1.9051503 4.4466414 EHI00568 0.5246686 0.219110833 1.7989251 3.5919103 EHI00569 0.6859077 0.169999886 2.6761990 6.7957645 sequence_fractions %&gt;% pivot_longer(!sample, names_to = &quot;fraction&quot;, values_to = &quot;value&quot;) %&gt;% mutate(value = value / 1000000000) %&gt;% mutate(fraction = factor(fraction, levels = c(&quot;lowqual_bases&quot;,&quot;host_bases&quot;,&quot;unmapped_bases&quot;,&quot;mags_bases&quot;))) %&gt;% ggplot(., aes(x = sample, y = value, fill=fraction)) + geom_bar(position=&quot;stack&quot;, stat = &quot;identity&quot;) + scale_fill_manual(name=&quot;Sequence type&quot;, breaks=c(&quot;lowqual_bases&quot;,&quot;host_bases&quot;,&quot;unmapped_bases&quot;,&quot;mags_bases&quot;), labels=c(&quot;Low quality&quot;,&quot;Mapped to host&quot;,&quot;Unmapped&quot;,&quot;Mapped to MAGs&quot;), values=c(&quot;#CCCCCC&quot;, &quot;#bcdee1&quot;, &quot;#d8b8a3&quot;,&quot;#93655c&quot;))+ labs(x = &quot;Samples&quot;, y = &quot;Amount of data (GB)&quot;) + theme_classic() + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1, size=6),legend.position = &quot;bottom&quot;) 3.4 Recovered microbial fraction singlem_table &lt;- sequence_fractions %&gt;% mutate(mags_proportion = round((mags_bases / (mags_bases + unmapped_bases))*100,2)) %&gt;% left_join(sample_metadata, by = join_by(sample == EHI_number)) %&gt;% mutate(singlem_proportion = round(singlem_fraction*100,2)) %&gt;% select(sample,mags_proportion,singlem_proportion) %&gt;% mutate(mags_proportion = ifelse(singlem_proportion == 0, 0, mags_proportion)) %&gt;% #convert zeros to NA mutate(singlem_proportion = ifelse(singlem_proportion == 0, NA, singlem_proportion)) %&gt;% #convert zeros to NA mutate(singlem_proportion = ifelse(singlem_proportion &lt; mags_proportion, NA, singlem_proportion)) %&gt;% #if singlem is smaller, then NA, to simplify plot mutate(singlem_proportion = ifelse(singlem_proportion &gt; 100, 100, singlem_proportion)) #simplify singlem_table %&gt;% pivot_longer(!sample, names_to = &quot;proportion&quot;, values_to = &quot;value&quot;) %&gt;% left_join(sample_metadata, by = join_by(sample == EHI_number)) %&gt;% mutate(proportion = factor(proportion, levels = c(&quot;mags_proportion&quot;,&quot;singlem_proportion&quot;))) %&gt;% ggplot(., aes(x = value, y = sample, color=proportion)) + geom_line(aes(group = sample), color = &quot;#f8a538&quot;) + geom_point() + scale_color_manual(name=&quot;Proportion&quot;, breaks=c(&quot;mags_proportion&quot;,&quot;singlem_proportion&quot;), labels=c(&quot;Recovered&quot;,&quot;Estimated&quot;), values=c(&quot;#52e1e8&quot;, &quot;#876b53&quot;))+ facet_nested(species + sample_type ~ ., scales=&quot;free&quot;,space=&quot;free&quot;)+ theme_classic() + labs(y = &quot;Samples&quot;, x = &quot;Prokaryotic fraction (%)&quot;) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1, size=6), legend.position = &quot;right&quot;, strip.background.y=element_rect(color = NA, fill= &quot;#f4f4f4&quot;)) "],["mag-catalogue.html", "Chapter 4 MAG catalogue 4.1 Genome phylogeny 4.2 Genome quality 4.3 Functional overview 4.4 Functional ordination", " Chapter 4 MAG catalogue load(&quot;data/data.Rdata&quot;) 4.1 Genome phylogeny # Generate the phylum color heatmap phylum_heatmap &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, genome_tree$tip.label)) %&gt;% select(genome,phylum) %&gt;% mutate(phylum = factor(phylum, levels = unique(phylum))) %&gt;% column_to_rownames(var = &quot;genome&quot;) # Generate basal tree circular_tree &lt;- force.ultrametric(genome_tree, method=&quot;extend&quot;) %&gt;% # extend to ultrametric for the sake of visualisation ggtree(., layout=&quot;fan&quot;, open.angle=10, size=0.5) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** # Add phylum ring circular_tree &lt;- gheatmap(circular_tree, phylum_heatmap, offset=0.55, width=0.1, colnames=FALSE) + scale_fill_manual(values=phylum_colors) + geom_tiplab2(size=1, hjust=-0.1) + theme(legend.position = &quot;none&quot;, plot.margin = margin(0, 0, 0, 0), panel.margin = margin(0, 0, 0, 0)) # Flush color scale to enable a new color scheme in the next ring circular_tree &lt;- circular_tree + new_scale_fill() # Add completeness ring circular_tree &lt;- circular_tree + new_scale_fill() + scale_fill_gradient(low = &quot;#d1f4ba&quot;, high = &quot;#f4baba&quot;) + geom_fruit( data=genome_metadata, geom=geom_bar, mapping = aes(x=completeness, y=genome, fill=contamination), offset = 0.55, orientation=&quot;y&quot;, stat=&quot;identity&quot;) # Add genome-size ring circular_tree &lt;- circular_tree + new_scale_fill() + scale_fill_manual(values = &quot;#cccccc&quot;) + geom_fruit( data=genome_metadata, geom=geom_bar, mapping = aes(x=length, y=genome), offset = 0.05, orientation=&quot;y&quot;, stat=&quot;identity&quot;) # Add text circular_tree &lt;- circular_tree + annotate(&#39;text&#39;, x=3.4, y=0, label=&#39; Phylum&#39;, family=&#39;arial&#39;, size=3.5) + annotate(&#39;text&#39;, x=4.3, y=0, label=&#39; Genome quality&#39;, family=&#39;arial&#39;,size=3.5)+ annotate(&#39;text&#39;, x=4.8, y=0, label=&#39; Genome size&#39;, family=&#39;arial&#39;, size=3.5) #Plot circular tree circular_tree %&gt;% open_tree(30) %&gt;% rotate_tree(90) 4.2 Genome quality genome_metadata %&gt;% summarise(completeness_mean=mean(completeness) %&gt;% round(2) %&gt;% as.character(), completeness_sd=sd(completeness) %&gt;% round(2) %&gt;% as.character(), contamination_mean=mean(contamination) %&gt;% round(2), contamination_sd=sd(contamination) %&gt;% round(2)) %&gt;% unite(&quot;Completeness&quot;,completeness_mean, completeness_sd, sep = &quot; ± &quot;, remove = TRUE) %&gt;% unite(&quot;Contamination&quot;,contamination_mean, contamination_sd, sep = &quot; ± &quot;, remove = TRUE) %&gt;% tt() tinytable_ynokfoakqqdyy8kzuka4 .table td.tinytable_css_edrwpntw1i4i7ek5lvoa, .table th.tinytable_css_edrwpntw1i4i7ek5lvoa { border-bottom: solid 0.1em #d3d8dc; } Completeness Contamination 79.99 ± 15.48 2.19 ± 1.94 #Generate quality biplot genome_biplot &lt;- genome_metadata %&gt;% select(c(genome,domain,phylum,completeness,contamination,length)) %&gt;% arrange(match(genome, rev(genome_tree$tip.label))) %&gt;% #sort MAGs according to phylogenetic tree ggplot(aes(x=completeness,y=contamination,size=length,color=phylum)) + geom_point(alpha=0.7) + ylim(c(10,0)) + scale_color_manual(values=phylum_colors) + labs(y= &quot;Contamination&quot;, x = &quot;Completeness&quot;) + theme_classic() + theme(legend.position = &quot;none&quot;) #Generate contamination boxplot genome_contamination &lt;- genome_metadata %&gt;% ggplot(aes(y=contamination)) + ylim(c(10,0)) + geom_boxplot(colour = &quot;#999999&quot;, fill=&quot;#cccccc&quot;) + theme_void() + theme(legend.position = &quot;none&quot;, axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank(), plot.margin = unit(c(0, 0, 0.40, 0),&quot;inches&quot;)) #add bottom-margin (top, right, bottom, left) #Generate completeness boxplot genome_completeness &lt;- genome_metadata %&gt;% ggplot(aes(x=completeness)) + xlim(c(50,100)) + geom_boxplot(colour = &quot;#999999&quot;, fill=&quot;#cccccc&quot;) + theme_void() + theme(legend.position = &quot;none&quot;, axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank(), plot.margin = unit(c(0, 0, 0, 0.50),&quot;inches&quot;)) #add left-margin (top, right, bottom, left) #Render composite figure grid.arrange(grobs = list(genome_completeness,genome_biplot,genome_contamination), layout_matrix = rbind(c(1,1,1,1,1,1,1,1,1,1,1,4), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3))) 4.3 Functional overview # Aggregate basal GIFT into elements function_table &lt;- genome_gifts %&gt;% to.elements(., GIFT_db) # Generate basal tree function_tree &lt;- force.ultrametric(genome_tree, method=&quot;extend&quot;) %&gt;% ggtree(., size = 0.3) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** #Add phylum colors next to the tree tips function_tree &lt;- gheatmap(function_tree, phylum_heatmap, offset=0, width=0.1, colnames=FALSE) + scale_fill_manual(values=phylum_colors) + labs(fill=&quot;Phylum&quot;) #Reset fill scale to use a different colour profile in the heatmap function_tree &lt;- function_tree + new_scale_fill() #Add functions heatmap function_tree &lt;- gheatmap(function_tree, function_table, offset=0.5, width=3.5, colnames=FALSE) + vexpand(.08) + coord_cartesian(clip = &quot;off&quot;) + scale_fill_gradient(low = &quot;#f4f4f4&quot;, high = &quot;steelblue&quot;, na.value=&quot;white&quot;) + labs(fill=&quot;GIFT&quot;) #Reset fill scale to use a different colour profile in the heatmap function_tree &lt;- function_tree + new_scale_fill() # Add completeness barplots function_tree &lt;- function_tree + geom_fruit(data=genome_metadata, geom=geom_bar, grid.params=list(axis=&quot;x&quot;, text.size=2, nbreak = 1), axis.params=list(vline=TRUE), mapping = aes(x=length, y=genome, fill=completeness), offset = 3.8, orientation=&quot;y&quot;, stat=&quot;identity&quot;) + scale_fill_gradient(low = &quot;#cf8888&quot;, high = &quot;#a2cc87&quot;) + labs(fill=&quot;Genome\\ncompleteness&quot;) function_tree 4.4 Functional ordination # Generate the tSNE ordination tSNE_function &lt;- Rtsne(X=function_table, dims = 2, check_duplicates = FALSE) # Plot the ordination function_ordination &lt;- tSNE_function$Y %&gt;% as.data.frame() %&gt;% mutate(genome=rownames(function_table)) %&gt;% inner_join(genome_metadata, by=&quot;genome&quot;) %&gt;% rename(tSNE1=&quot;V1&quot;, tSNE2=&quot;V2&quot;) %&gt;% select(genome,phylum,tSNE1,tSNE2, length) %&gt;% ggplot(aes(x = tSNE1, y = tSNE2, color = phylum, size=length))+ geom_point(shape=16, alpha=0.7) + scale_color_manual(values=phylum_colors) + theme_minimal() + labs(color=&quot;Phylum&quot;, size=&quot;Genome size&quot;) + guides(color = guide_legend(override.aes = list(size = 5))) # enlarge Phylum dots in legend function_ordination "],["community-composition.html", "Chapter 5 Community composition 5.1 Taxonomy overview 5.2 Taxonomy boxplot 5.3 Alpha diversity 5.4 Beta diversity", " Chapter 5 Community composition load(&quot;data/data.Rdata&quot;) 5.1 Taxonomy overview 5.1.1 Stacked barplot genome_counts_filt_met&lt;-genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS nornalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% #reduce to minimum number of columns left_join(., genome_metadata, by = join_by(genome == genome)) %&gt;% #append genome metadata left_join(., sample_metadata, by = join_by(sample == EHI_number)) %&gt;% #append sample metadata filter(count &gt; 0) #filter 0 counts genome_counts_filt_met$Elevation&lt;-as.factor(genome_counts_filt_met$Elevation) # Create an interaction variable for elevation and sample genome_counts_filt_met$interaction_var &lt;- interaction(genome_counts_filt_met$sample, genome_counts_filt_met$Elevation) # Plot stacked barplot ggplot(genome_counts_filt_met, aes(x=interaction_var,y=count,fill=phylum, group=phylum))+ #grouping enables keeping the same sorting of taxonomic units geom_bar(stat=&quot;identity&quot;, colour=&quot;white&quot;, linewidth=0.1)+ #plot stacked bars with white borders scale_fill_manual(values=phylum_colors) + labs(y = &quot;Relative abundance&quot;, x=&quot;Elevation (m)&quot;) + guides(fill = guide_legend(ncol = 3)) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), panel.background = element_blank(), panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(linewidth = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), legend.position = &quot;top&quot;, legend.title = element_blank(), legend.text = element_text(size=7))+ scale_x_discrete(labels = function(x) gsub(&quot;.*\\\\.&quot;, &quot;&quot;, x)) + facet_wrap(~Transect, scales = &quot;free&quot;, labeller = as_labeller(function(label) gsub(&quot;.*\\\\.&quot;, &quot;&quot;, label))) #only show elevation label 5.1.2 Phylum relative abundances phylum_summary &lt;- genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS nornalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% left_join(sample_metadata, by = join_by(sample == EHI_number)) %&gt;% left_join(genome_metadata, by = join_by(genome == genome)) %&gt;% group_by(sample,phylum) %&gt;% summarise(relabun=sum(count)) phylum_summary %&gt;% group_by(phylum) %&gt;% summarise(mean=mean(relabun),sd=sd(relabun)) %&gt;% arrange(-mean) %&gt;% tt() tinytable_e6vorekz61jcz69pboiz .table td.tinytable_css_8di646sd1w61eqcf380m, .table th.tinytable_css_8di646sd1w61eqcf380m { border-bottom: solid 0.1em #d3d8dc; } phylum mean sd p__Bacillota_A 4.081110e-01 0.1600451966 p__Bacteroidota 3.813465e-01 0.1589155381 p__Pseudomonadota 5.849246e-02 0.0783694483 p__Bacillota 4.549049e-02 0.0635314708 p__Campylobacterota 3.481511e-02 0.0560037828 p__Desulfobacterota 2.666332e-02 0.0402945087 p__Verrucomicrobiota 1.518957e-02 0.0242135928 p__Bacillota_C 9.477405e-03 0.0104659743 p__Fusobacteriota 8.967841e-03 0.0368793328 p__Cyanobacteriota 3.965422e-03 0.0059815655 p__Spirochaetota 2.170591e-03 0.0096628708 p__Bacillota_B 2.069011e-03 0.0034571169 p__Actinomycetota 1.681425e-03 0.0051589130 p__Chlamydiota 1.027149e-03 0.0060969825 p__Deferribacterota 4.549927e-04 0.0026507460 p__Synergistota 7.766526e-05 0.0007996128 phylum_arrange &lt;- phylum_summary %&gt;% group_by(phylum) %&gt;% summarise(mean=mean(relabun)) %&gt;% arrange(-mean) %&gt;% select(phylum) %&gt;% pull() phylum_summary %&gt;% filter(phylum %in% phylum_arrange) %&gt;% mutate(phylum=factor(phylum,levels=rev(phylum_arrange))) %&gt;% ggplot(aes(x=relabun, y=phylum, group=phylum, color=phylum)) + scale_color_manual(values=phylum_colors[rev(phylum_arrange)]) + geom_jitter(alpha=0.5) + theme_minimal() 5.2 Taxonomy boxplot 5.2.1 Family family_summary &lt;- genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS nornalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% #reduce to minimum number of columns left_join(sample_metadata, by = join_by(sample == EHI_number)) %&gt;% #append sample metadata left_join(., genome_metadata, by = join_by(genome == genome)) %&gt;% #append genome metadata group_by(sample,family) %&gt;% summarise(relabun=sum(count)) family_summary %&gt;% group_by(family) %&gt;% summarise(mean=mean(relabun),sd=sd(relabun)) %&gt;% arrange(-mean) %&gt;% tt() tinytable_6jgtb3jfy5kyj6p3lquy .table td.tinytable_css_8c566nz0ek7v2b1dax0m, .table th.tinytable_css_8c566nz0ek7v2b1dax0m { border-bottom: solid 0.1em #d3d8dc; } family mean sd f__Lachnospiraceae 2.825060e-01 0.1345643318 f__Bacteroidaceae 2.119504e-01 0.1049201320 f__Tannerellaceae 1.118797e-01 0.0753626317 f__ 6.502966e-02 0.0818702640 f__Helicobacteraceae 3.481511e-02 0.0560037828 f__Marinifilaceae 3.470570e-02 0.0255772494 f__UBA3700 2.788514e-02 0.0328903056 f__Desulfovibrionaceae 2.666332e-02 0.0402945087 f__Ruminococcaceae 2.425877e-02 0.0226024661 f__Rikenellaceae 1.885691e-02 0.0176408335 f__Erysipelotrichaceae 1.751136e-02 0.0268864962 f__Oscillospiraceae 1.683003e-02 0.0141001689 f__Coprobacillaceae 1.261022e-02 0.0335546952 f__Mycoplasmoidaceae 1.198842e-02 0.0269229159 f__Enterobacteriaceae 1.066950e-02 0.0648238061 f__Fusobacteriaceae 8.967841e-03 0.0368793328 f__Akkermansiaceae 8.595505e-03 0.0108643967 f__CAG-239 6.937215e-03 0.0097788795 f__LL51 6.594063e-03 0.0215416732 f__Anaerotignaceae 6.489923e-03 0.0073982451 f__UBA3830 5.877671e-03 0.0184934716 f__Gastranaerophilaceae 3.965422e-03 0.0059815655 f__Muribaculaceae 3.953836e-03 0.0407072381 f__Butyricicoccaceae 3.918292e-03 0.0050279924 f__CAG-274 3.022828e-03 0.0060610627 f__Acutalibacteraceae 2.697920e-03 0.0047318531 f__Anaerovoracaceae 2.658130e-03 0.0040447826 f__Pumilibacteraceae 2.520520e-03 0.0041575482 f__UBA1997 2.361296e-03 0.0079920448 f__CAG-508 2.302152e-03 0.0062849154 f__Brevinemataceae 2.170591e-03 0.0096628708 f__Peptococcaceae 2.069011e-03 0.0034571169 f__Rhodocyclaceae 1.918345e-03 0.0193815077 f__DTU072 1.775970e-03 0.0055679110 f__UBA660 1.726020e-03 0.0054429829 f__MGBC116941 1.698183e-03 0.0090561944 f__Massilibacillaceae 1.488714e-03 0.0024454858 f__Eggerthellaceae 1.364529e-03 0.0037021644 f__Enterococcaceae 8.375225e-04 0.0070514701 f__CALTSX01 5.149633e-04 0.0053018713 f__Chlamydiaceae 5.121857e-04 0.0030351423 f__CALVMC01 4.985785e-04 0.0019169750 f__Mucispirillaceae 4.549927e-04 0.0026507460 f__Clostridiaceae 4.173001e-04 0.0028996742 f__Acidaminococcaceae 3.966660e-04 0.0015706727 f__UBA1242 3.684261e-04 0.0014638710 f__RUG11792 3.682076e-04 0.0019335896 f__CAG-465 3.464214e-04 0.0015624302 f__Microbacteriaceae 3.168954e-04 0.0026872384 f__CAG-288 2.957044e-04 0.0017433720 f__Streptococcaceae 2.456082e-04 0.0018352415 f__Anaplasmataceae 2.412140e-04 0.0021407333 f__Hepatoplasmataceae 2.339936e-04 0.0024091117 f__Aeromonadaceae 2.305128e-04 0.0022380802 f__Peptostreptococcaceae 1.398982e-04 0.0014403401 f__Rhodobacteraceae 1.358917e-04 0.0013990908 f__Xanthomonadaceae 9.158653e-05 0.0009429410 f__Synergistaceae 7.766526e-05 0.0007996128 f__Lactobacillaceae 4.163513e-05 0.0004286599 f__Turicibacteraceae 0.000000e+00 0.0000000000 5.2.2 Genus genus_summary &lt;- genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS nornalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% #reduce to minimum number of columns left_join(sample_metadata, by = join_by(sample == EHI_number)) %&gt;% #append sample metadata left_join(genome_metadata, by = join_by(genome == genome)) %&gt;% #append genome metadata group_by(sample,genus) %&gt;% summarise(relabun=sum(count)) %&gt;% filter(genus != &quot;g__&quot;) genus_summary %&gt;% group_by(genus) %&gt;% summarise(mean=mean(relabun),sd=sd(relabun)) %&gt;% arrange(-mean) %&gt;% tt() tinytable_udj8m6zdn34yek68qhof .table td.tinytable_css_ffi3bii2fmuqwzmpwzz7, .table th.tinytable_css_ffi3bii2fmuqwzmpwzz7 { border-bottom: solid 0.1em #d3d8dc; } genus mean sd g__Bacteroides 1.715631e-01 0.0995381723 g__Parabacteroides 1.099480e-01 0.0764703201 g__Roseburia 5.106281e-02 0.0740647328 g__Phocaeicola 3.848609e-02 0.0434625541 g__JAAYNV01 3.688241e-02 0.0750152647 g__Odoribacter 3.406510e-02 0.0255496567 g__Helicobacter_J 2.995383e-02 0.0398840003 g__CAG-95 1.693584e-02 0.0241924899 g__Alistipes 1.544141e-02 0.0156462125 g__Kineothrix 1.529781e-02 0.0582217172 g__MGBC136627 1.442882e-02 0.0229993736 g__Mycoplasmoides 1.128813e-02 0.0267998413 g__Hungatella_A 1.103483e-02 0.0667132423 g__Anaerotruncus 1.001128e-02 0.0112222704 g__Velocimicrobium 9.877812e-03 0.0159828933 g__Enterocloster 9.448113e-03 0.0098167225 g__Acetatifactor 9.119894e-03 0.0139402425 g__Fusobacterium_A 8.967841e-03 0.0368793328 g__Akkermansia 8.595505e-03 0.0108643967 g__Clostridium_Q 7.696833e-03 0.0137729617 g__Bilophila 7.309730e-03 0.0088486876 g__Lawsonia 7.063171e-03 0.0354503009 g__Intestinimonas 6.503115e-03 0.0061322665 g__Lacrimispora 6.449964e-03 0.0078252870 g__Lachnotalea 5.969286e-03 0.0091428683 g__Desulfovibrio 5.551727e-03 0.0084902145 g__MGBC140009 5.480884e-03 0.0133474239 g__Extibacter 5.251389e-03 0.0436025301 g__Coprobacillus 5.206125e-03 0.0159496122 g__Eisenbergiella 5.044262e-03 0.0077976628 g__Ventrimonas 5.035349e-03 0.0082923216 g__NHYM01 4.861275e-03 0.0425676661 g__Dielma 4.818065e-03 0.0065339333 g__CHH4-2 4.421332e-03 0.0044698946 g__RGIG4733 4.212224e-03 0.0102969273 g__Negativibacillus 4.095555e-03 0.0054792324 g__Thomasclavelia 3.821798e-03 0.0117039604 g__Hungatella 3.408253e-03 0.0046301753 g__C-19 3.303166e-03 0.0097049178 g__Citrobacter 3.169481e-03 0.0206845556 g__UMGS1251 2.856625e-03 0.0066227314 g__Oscillibacter 2.672493e-03 0.0038359772 g__CAZU01 2.662464e-03 0.0062677129 g__Copromonas 2.582309e-03 0.0037444602 g__Breznakia 2.545152e-03 0.0076365238 g__Mailhella 2.463379e-03 0.0034270857 g__Pseudoflavonifractor 2.327661e-03 0.0028208232 g__Intestinibacillus 2.304475e-03 0.0027604605 g__Escherichia 2.211570e-03 0.0159347159 g__MGBC165282 2.207931e-03 0.0052013921 g__Brevinema 2.170591e-03 0.0096628708 g__Rikenella 2.103581e-03 0.0033511480 g__Morganella 2.000896e-03 0.0206004803 g__Robinsoniella 1.982065e-03 0.0197231357 g__Parabacteroides_B 1.931687e-03 0.0064193758 g__Hafnia 1.921419e-03 0.0111820580 g__Fluviibacter 1.918345e-03 0.0193815077 g__JAIHAL01 1.891324e-03 0.0043767561 g__CAJLXD01 1.792508e-03 0.0041225034 g__Marseille-P3106 1.713488e-03 0.0025261999 g__UBA866 1.521215e-03 0.0026067620 g__MGBC116941 1.419756e-03 0.0090572569 g__Duncaniella 1.413153e-03 0.0145492957 g__RGIG6463 1.406224e-03 0.0032145982 g__Stoquefichus 1.405377e-03 0.0045901612 g__Limenecus 1.380444e-03 0.0029775228 g__JAAYQI01 1.259608e-03 0.0019959178 g__Lawsonibacter 1.166300e-03 0.0016508459 g__Scatousia 1.163255e-03 0.0033190366 g__MGBC101980 1.136457e-03 0.0043661490 g__Hespellia 1.092457e-03 0.0079658275 g__Clostridium_AQ 1.065062e-03 0.0036811111 g__Tidjanibacter 1.052202e-03 0.0029270036 g__Fournierella 1.012242e-03 0.0022501066 g__Eggerthella 9.852582e-04 0.0031664138 g__OM05-12 9.476666e-04 0.0022861996 g__CALXRO01 9.465351e-04 0.0060115481 g__CALURL01 9.003034e-04 0.0021568633 g__Harryflintia 8.821994e-04 0.0020357355 g__MGBC133411 8.788515e-04 0.0021894657 g__Scatacola_A 8.603252e-04 0.0028008223 g__Ventrisoma 8.513312e-04 0.0015698585 g__JALFVM01 8.313744e-04 0.0020032515 g__Bacteroides_G 8.279547e-04 0.0024893653 g__CAG-269 8.108577e-04 0.0029383065 g__IOR16 8.056128e-04 0.0024044902 g__CAG-873 7.720491e-04 0.0079487323 g__Buttiauxella 7.491009e-04 0.0061893836 g__14-2 7.174613e-04 0.0014179404 g__Ureaplasma 7.002851e-04 0.0022713191 g__Scatocola 6.837988e-04 0.0024038571 g__Dysosmobacter 6.815887e-04 0.0012774053 g__Muricomes 6.778722e-04 0.0023619925 g__Anaerovorax 6.716036e-04 0.0017450208 g__UBA7185 6.627870e-04 0.0018432854 g__Evtepia 6.474991e-04 0.0010541613 g__Butyricimonas 6.406058e-04 0.0016068308 g__MGBC131033 6.382237e-04 0.0015934066 g__CAJMNU01 6.222337e-04 0.0008887008 g__Beduini 5.858796e-04 0.0013098648 g__Muribaculum 5.497694e-04 0.0056602225 g__Scandinavium 5.341634e-04 0.0034686403 g__Lactonifactor 5.289757e-04 0.0013117146 g__CALTSX01 5.149633e-04 0.0053018713 g__CAG-485 5.079634e-04 0.0052298033 g__Merdicola 5.061702e-04 0.0018103952 g__Ventrenecus 4.907338e-04 0.0024331147 g__UMGS1202 4.839872e-04 0.0016896720 g__Copranaerobaculum 4.782162e-04 0.0029031775 g__NSJ-61 4.531589e-04 0.0013984436 g__Faecimonas 4.425060e-04 0.0017543086 g__RGIG8482 4.373523e-04 0.0020895489 g__Faecivivens 4.272845e-04 0.0008894505 g__RGIG9287 4.188304e-04 0.0020906022 g__Sarcina 4.173001e-04 0.0028996742 g__Blautia_A 4.105640e-04 0.0009994663 g__Scatenecus 4.064313e-04 0.0026411296 g__Phascolarctobacterium 3.966660e-04 0.0015706727 g__Raoultibacter 3.792710e-04 0.0011559737 g__Caccovivens 3.684261e-04 0.0014638710 g__CAJTFG01 3.655350e-04 0.0010180529 g__HGM11386 3.608509e-04 0.0015988134 g__CAG-465 3.464214e-04 0.0015624302 g__Amedibacillus 3.424477e-04 0.0023723526 g__Enterococcus_A 3.245757e-04 0.0023143225 g__UMGS2016 3.182000e-04 0.0012854921 g__Emergencia 3.175682e-04 0.0009661193 g__Holdemania 3.069052e-04 0.0010242364 g__Blautia 3.066198e-04 0.0011028540 g__Protoclostridium 3.038491e-04 0.0010789526 g__Fimivivens 3.014823e-04 0.0008070986 g__RGIG7389 2.957300e-04 0.0005828033 g__CAG-345 2.957044e-04 0.0017433720 g__UBA7173 2.935763e-04 0.0030225525 g__Bariatricus 2.900841e-04 0.0008344380 g__Agathobaculum 2.760992e-04 0.0016313981 g__CALXDZ01 2.635870e-04 0.0006108419 g__UBA940 2.597096e-04 0.0009035857 g__Microbacterium 2.538897e-04 0.0026139544 g__Aminipila 2.482408e-04 0.0007447481 g__Lactococcus 2.456082e-04 0.0018352415 g__Wolbachia 2.412140e-04 0.0021407333 g__Paramuribaculum 2.409489e-04 0.0024807206 g__Hepatoplasma 2.339936e-04 0.0024091117 g__Aeromonas 2.305128e-04 0.0022380802 g__WRHT01 2.165572e-04 0.0006925426 g__Zhenpiania 2.096592e-04 0.0012649339 g__UBA5026 2.092951e-04 0.0009734373 g__UMGS1663 1.980727e-04 0.0007253856 g__MGBC107952 1.736116e-04 0.0009841510 g__CALXEL01 1.709372e-04 0.0013664186 g__CAG-273 1.468577e-04 0.0007828475 g__Clostridioides 1.398982e-04 0.0014403401 g__Paracoccus 1.358917e-04 0.0013990908 g__JAAWBF01 1.274842e-04 0.0006116591 g__JAFLTL01 1.258715e-04 0.0012959262 g__Bacteroides_H 1.255258e-04 0.0012923672 g__RUG12867 9.167312e-05 0.0006100737 g__Stenotrophomonas 9.158653e-05 0.0009429410 g__Rahnella 8.286698e-05 0.0008021325 g__Lumbricidophila 6.300569e-05 0.0006486833 g__UBA3263 5.050541e-05 0.0005199850 g__Fructobacillus 4.163513e-05 0.0004286599 g__Clostridium 0.000000e+00 0.0000000000 g__Turicibacter 0.000000e+00 0.0000000000 5.3 Alpha diversity # Calculate Hill numbers richness &lt;- genome_counts_filt %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 0) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(richness = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) neutral &lt;- genome_counts_filt %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 1) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(neutral = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) phylogenetic &lt;- genome_counts_filt %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 1, tree = genome_tree) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(phylogenetic = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) # Aggregate basal GIFT into elements (error in this section) #Get list of present MAGs present_MAGs &lt;- genome_counts_filt %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% filter(rowSums(.[, -1]) != 0) %&gt;% rownames() #Align KEGG annotations with present MAGs and remove all-zero and all-one traits present_MAGs &lt;- present_MAGs[present_MAGs %in% rownames(genome_gifts)] genome_gifts_filt &lt;- genome_gifts[present_MAGs,] %&gt;% select_if(~!all(. == 0)) %&gt;% #remove all-zero modules select_if(~!all(. == 1)) #remove all-one modules #Filter count table to only contain present MAGs after KEGG filtering genome_counts_filt_filt &lt;- genome_counts_filt %&gt;% column_to_rownames(var = &quot;genome&quot;) genome_counts_filt_filt &lt;- genome_counts_filt_filt[present_MAGs,] dist &lt;- genome_gifts_filt %&gt;% to.elements(., GIFT_db) %&gt;% traits2dist(., method = &quot;gower&quot;) functional &lt;- genome_counts_filt_filt %&gt;% #column_to_rownames(var = &quot;genome&quot;) %&gt;% #dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 1, dist = dist) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(functional = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) %&gt;% mutate(functional = if_else(is.nan(functional), 1, functional)) # Merge all metrics alpha_div &lt;- richness %&gt;% full_join(neutral, by = join_by(sample == sample)) %&gt;% full_join(phylogenetic, by = join_by(sample == sample)) %&gt;% full_join(functional, by = join_by(sample == sample)) alpha_div %&gt;% pivot_longer(-sample, names_to = &quot;metric&quot;, values_to = &quot;value&quot;) %&gt;% left_join(., sample_metadata, by = join_by(sample == EHI_number)) %&gt;% mutate(metric=factor(metric,levels=c(&quot;richness&quot;,&quot;neutral&quot;,&quot;phylogenetic&quot;,&quot;functional&quot;))) %&gt;% ggplot(aes(y = value, x = Transect, group=Transect, color=Transect, fill=Transect)) + geom_boxplot(outlier.shape = NA) + geom_jitter(alpha=0.5) + scale_color_manual(name=&quot;Transect&quot;, breaks=c(&quot;Aisa&quot;,&quot;Aran&quot;,&quot;Sentein&quot;,&quot;Tourmalet&quot;), labels=c(&quot;Aisa&quot;,&quot;Aran&quot;,&quot;Sentein&quot;,&quot;Tourmalet&quot;), values=c(&quot;#e5bd5b&quot;, &quot;#6b7398&quot;,&quot;#e2815a&quot;, &quot;#876b96&quot;)) + scale_fill_manual(name=&quot;Transect&quot;, breaks=c(&quot;Aisa&quot;,&quot;Aran&quot;,&quot;Sentein&quot;,&quot;Tourmalet&quot;), labels=c(&quot;Aisa&quot;,&quot;Aran&quot;,&quot;Sentein&quot;,&quot;Tourmalet&quot;), values=c(&quot;#e5bd5b50&quot;, &quot;#6b739850&quot;,&quot;#e2815a50&quot;, &quot;#876b9650&quot;)) + facet_wrap(. ~ metric, scales = &quot;free&quot;, ncol=4) + coord_cartesian(xlim = c(1, NA)) + theme_classic() + theme( strip.background = element_blank(), panel.grid.minor.x = element_line(size = .1, color = &quot;grey&quot;), axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_text(angle = 45, hjust = 1) ) 5.3.1 Regression plots 5.3.1.1 Richness diversity columns &lt;- c(&quot;richness&quot;,&quot;neutral&quot;,&quot;phylo&quot;,&quot;func&quot;,&quot;mapped&quot;,&quot;total&quot;) alpha_div %&gt;% select(sample,richness) %&gt;% pivot_longer(-sample, names_to = &quot;data&quot;, values_to = &quot;value&quot;) %&gt;% mutate(data = factor(data, levels = columns)) %&gt;% left_join(sample_metadata, by = join_by(sample == EHI_number)) %&gt;% ggplot(aes(x = Elevation, y = value)) + geom_point() + geom_smooth(method = lm) + facet_wrap(~ factor(Transect))+ labs(x = &quot;Elevation (m)&quot;) 5.3.1.2 Neutral diversity alpha_div %&gt;% select(sample,neutral) %&gt;% pivot_longer(-sample, names_to = &quot;data&quot;, values_to = &quot;value&quot;) %&gt;% mutate(data = factor(data, levels = columns)) %&gt;% left_join(sample_metadata, by = join_by(sample == EHI_number)) %&gt;% ggplot(aes(x = Elevation, y = value)) + geom_point() + geom_smooth(method = lm) + facet_wrap(~ factor(Transect))+ labs(x = &quot;Elevation (m)&quot;) 5.3.1.3 Phylogenetic diversity alpha_div %&gt;% select(sample,phylogenetic) %&gt;% pivot_longer(-sample, names_to = &quot;data&quot;, values_to = &quot;value&quot;) %&gt;% mutate(data = factor(data, levels = columns)) %&gt;% left_join(sample_metadata, by = join_by(sample == EHI_number)) %&gt;% ggplot(aes(x = Elevation, y = value)) + geom_point() + geom_smooth(method = lm) + facet_wrap(~ factor(Transect))+ labs(x = &quot;Elevation (m)&quot;) 5.3.1.4 Functional diversities alpha_div %&gt;% select(sample,functional) %&gt;% pivot_longer(-sample, names_to = &quot;data&quot;, values_to = &quot;value&quot;) %&gt;% mutate(data = factor(data, levels = columns)) %&gt;% left_join(sample_metadata, by = join_by(sample == EHI_number)) %&gt;% ggplot(aes(x = Elevation, y = value)) + geom_point() + geom_smooth(method = lm) + facet_wrap(~ factor(Transect))+ labs(x = &quot;Elevation (m)&quot;) 5.3.2 Mixed models 5.3.2.1 Richness diversity alpha_div %&gt;% left_join(sample_metadata, by = join_by(sample == EHI_number)) %&gt;% lmerTest::lmer(richness ~ log(sequencing_depth) + Elevation*Transect + (1 | Sampling_point), data = ., REML = FALSE) %&gt;% broom.mixed::tidy() %&gt;% tt() 5.3.2.2 Neutral diversity alpha_div %&gt;% left_join(sample_metadata, by = join_by(sample == EHI_number)) %&gt;% lmerTest::lmer(neutral ~ log(sequencing_depth) + Elevation*Transect + (1|Sampling_point), data = ., REML = FALSE) %&gt;% broom.mixed::tidy() %&gt;% tt() 5.3.2.3 Phylogenetic diversity alpha_div %&gt;% left_join(sample_metadata, by = join_by(sample == EHI_number)) %&gt;% lmerTest::lmer(phylogenetic ~ log(sequencing_depth) + Elevation*Transect + (1 | Sampling_point), data = ., REML = FALSE) %&gt;% broom.mixed::tidy() %&gt;% tt() 5.3.2.4 Functional diversities alpha_div %&gt;% left_join(sample_metadata, by = join_by(sample == EHI_number)) %&gt;% lmerTest::lmer(functional ~ log(sequencing_depth) + Elevation*Transect + (1 | Sampling_point), data = ., REML = FALSE) %&gt;% broom.mixed::tidy() %&gt;% tt() 5.4 Beta diversity beta_q0n &lt;- genome_counts_filt %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% hillpair(., q = 0) beta_q1n &lt;- genome_counts_filt %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% hillpair(., q = 1) beta_q1p &lt;- genome_counts_filt %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% hillpair(., q = 1, tree = genome_tree) beta_q1f &lt;- genome_counts_filt_filt %&gt;% #column_to_rownames(., &quot;genome&quot;) %&gt;% hillpair(., q = 1, dist = dist) "],["data-preparatiom.html", "Chapter 6 Data preparatiom 6.1 MAG functional annotations 6.2 Wrap working objects", " Chapter 6 Data preparatiom 6.1 MAG functional annotations These are the raw annotation table generated by DRAM, which are used to generate GIFT data using either distillR or KEGG. genome_gifts_hmsc &lt;- read_tsv(&quot;data/distillr.tsv&quot;) 6.2 Wrap working objects All working objects are wrapped into a single Rdata object to facilitate downstream usage. save(sample_metadata, genome_metadata, read_counts, genome_counts, genome_counts_filt, genome_tree, genome_gifts_hmsc, phylum_colors, file = &quot;data/data_hmsc.Rdata&quot;) "],["hmsc.html", "Chapter 7 HMSC 7.1 Load data 7.2 Subsetting 7.3 Define formulas of the Hmsc model 7.4 Define and Hmsc models 7.5 Define MCMC 7.6 Generate Hmsc executables 7.7 Fit Hmsc models (in Mjolnir HPC) 7.8 Assess chain convergence 7.9 Compute variance partitioning", " Chapter 7 HMSC 7.1 Load data load(&quot;data/data_hmsc.Rdata&quot;) 7.2 Subsetting # Subset by prevalence (present in more than 5 samples) selected_genomes1 &lt;- genome_counts %&gt;% filter(rowSums(across(starts_with(&quot;EHI&quot;)) != 0) &gt;= 5) %&gt;% select(genome) %&gt;% pull() # Subset by minimum representation of 1% relative abundance in 5 samples selected_genomes2 &lt;- genome_counts %&gt;% filter(genome %in% selected_genomes1) %&gt;% column_to_rownames(var=&quot;genome&quot;) %&gt;% tss() %&gt;% as.data.frame() %&gt;% filter(rowSums(across(starts_with(&quot;EHI&quot;)) &gt;= 0.01) &gt;= 5) %&gt;% rownames() # Subset genome metadata genome_metadata_subset &lt;- genome_metadata %&gt;% filter(genome %in% selected_genomes2) # Random effects data (study design) StudyDesign &lt;- sample_metadata %&gt;% select(EHI_number,Sampling_point,Transect, Elevation) %&gt;% mutate(Sampling_point = factor(Sampling_point)) %&gt;% mutate(Transect = factor(Transect)) %&gt;% mutate(Elevation = factor(Elevation)) %&gt;% column_to_rownames(&quot;EHI_number&quot;) # Genome count table (quantitative community data) YData &lt;- read_counts %&gt;% filter(genome %in% selected_genomes2) %&gt;% #subset genomes mutate(across(where(is.numeric), ~ . +1 )) %&gt;% #add +1 pseudocount to remove zeros mutate(across(where(is.numeric), ~ . / (genome_metadata_subset$length / 150) )) %&gt;% #transform to genome counts mutate(across(where(is.numeric), ~ log(.) )) %&gt;% #log-transform column_to_rownames(&quot;genome&quot;) %&gt;% select(all_of(row.names(StudyDesign))) %&gt;% #filter only faecal samples as.data.frame() %&gt;% t() # transpose # Fixed effects data (explanatory variables) XData &lt;- sample_metadata %&gt;% select(EHI_number,Elevation,Tree_cover, Anthropization_cover) %&gt;% mutate(logseqdepth=read_counts %&gt;% #total log-sequencing depth select(all_of(row.names(StudyDesign))) %&gt;% colSums() %&gt;% log() ) %&gt;% column_to_rownames(&quot;EHI_number&quot;) # Genome trait data (not needed now, and it gives error in to.functions section) #TrData &lt;- genome_gifts %&gt;% #arrange(match(genome, colnames(YData))) %&gt;% #column_to_rownames(var=&quot;genome&quot;) %&gt;% #to.functions(.,GIFT_db) %&gt;% #as.data.frame() # Genome phylogeny PData &lt;- genome_tree 7.3 Define formulas of the Hmsc model # Fixed effects formula XFormula1 = ~Elevation + Tree_cover + Anthropization_cover + logseqdepth # Study design rL.sampling_point = HmscRandomLevel(units = levels(StudyDesign$Sampling_point)) rL.transect = HmscRandomLevel(units = levels(StudyDesign$Transect)) 7.4 Define and Hmsc models #Define models model1 = Hmsc(Y=YData, XData = XData, XFormula = XFormula1, studyDesign = StudyDesign, phyloTree = PData, ranLevels = list(&quot;Sampling_point&quot;=rL.sampling_point, &quot;Transect&quot;=rL.transect), distr = &quot;normal&quot;, YScale = TRUE) #Save list of models as an R object. model_list = list(model1=model1) if (!dir.exists(&quot;hmsc&quot;)){dir.create(&quot;hmsc&quot;)} save(model_list, file = &quot;hmsc/hmsc.Rdata&quot;) Upload hmsc/hmsc.Rdata to the HPC respecting the directory structure. 7.5 Define MCMC # How often to sample the MCMC MCMC_samples_list = 250 # The number of MCMC steps between each recording sample MCMC_thin_list = c(1, 10) # The number of MCMC chains to use nChains = 4 7.6 Generate Hmsc executables The next chunk generates shell files for every combination of model, MCMC samples and MCMM thinning, ready to be launched as SLURM jobs. modelchains &lt;- expand.grid(model = names(model_list), sample = MCMC_samples_list, thin = MCMC_thin_list) if (!dir.exists(&quot;hmsc&quot;)){dir.create(&quot;hmsc&quot;)} for(i in c(1:nrow(modelchains))){ modelname=as.character(modelchains[i,1]) sample=modelchains[i,2] thin=modelchains[i,3] executablename &lt;- paste0(&quot;hmsc/exe_&quot;,modelname,&quot;_&quot;,sample,&quot;_&quot;,thin,&quot;.sh&quot;) fitname &lt;- paste0(&quot;hmsc/fit_&quot;,modelname,&quot;_&quot;,sample,&quot;_&quot;,thin,&quot;.Rdata&quot;) convname &lt;- paste0(&quot;hmsc/conv_&quot;,modelname,&quot;_&quot;,sample,&quot;_&quot;,thin,&quot;.Rdata&quot;) model &lt;- paste0(&#39;model_list$&#39;,modelname) psrf.beta.name &lt;- paste0(&quot;psrf.beta.&quot;,modelname,&quot;_&quot;,sample,&quot;_&quot;,thin) psrf.gamma.name &lt;- paste0(&quot;psrf.gamma.&quot;,modelname,&quot;_&quot;,sample,&quot;_&quot;,thin) psrf.rho.name &lt;- paste0(&quot;psrf.rho.&quot;,modelname,&quot;_&quot;,sample,&quot;_&quot;,thin) jobname &lt;- paste0(&quot;hmsc_&quot;,modelname,&quot;_&quot;,sample,&quot;_&quot;,thin) minutes &lt;- round(sample * thin * (ncol(YData)/500), 0) code &lt;- sprintf(&quot;#!/bin/bash #SBATCH --job-name=%s # Job name #SBATCH --nodes=1 #SBATCH --ntasks=4 # Run on 4 CPUs #SBATCH --mail-user=garazi.bideguren@sund.ku.dk #SBATCH --mem=800gb # Job memory request #SBATCH --time=%d # In minutes # Activate conda environment module load mamba/1.3.1 source activate /maps/projects/mjolnir1/people/dlz554/hmsc_env # Run R script Rscript -e &#39; library(tidyverse) library(Hmsc) # Load formulas and data load(\\&quot;hmsc/hmsc.Rdata\\&quot;) # Declare placeholders modelname = \\&quot;%s\\&quot; model = %s fitname = \\&quot;%s\\&quot; convname = \\&quot;%s\\&quot; sample = %d thin = %d nchains = %d # Run model fitting m = sampleMcmc(hM = model, samples = sample, thin = thin, adaptNf=rep(ceiling(0.4*sample*thin),model$nr), transient = ceiling(0.5*sample*thin), nChains = nchains, nParallel = nchains) # Assess chain convergence mpost = convertToCodaObject(m, spNamesNumbers = c(T,F), covNamesNumbers = c(T,F), Beta = TRUE, Gamma = TRUE, V = FALSE, Sigma = FALSE, Rho = TRUE, Eta = FALSE, Lambda = FALSE, Alpha = FALSE, Omega = FALSE, Psi = FALSE, Delta = FALSE) # Convert to CODA object # Fixed effects assign(paste0(\\&quot;psrf.beta.\\&quot;, modelname,\\&quot;_\\&quot;,sample,\\&quot;_\\&quot;,thin), gelman.diag(mpost$Beta,multivariate=FALSE)$psrf) # Traits assign(paste0(\\&quot;psrf.gamma.\\&quot;, modelname,\\&quot;_\\&quot;,sample,\\&quot;_\\&quot;,thin), gelman.diag(mpost$Gamma,multivariate=FALSE)$psrf) # Phylogeny assign(paste0(\\&quot;psrf.rho.\\&quot;, modelname,\\&quot;_\\&quot;,sample,\\&quot;_\\&quot;,thin), gelman.diag(mpost$Rho,multivariate=FALSE)$psrf) # Write convergence data save(%s, %s, %s, file=convname) # Save model fit object save(m, file=fitname) &#39; &quot;, jobname, minutes, modelname, model, fitname, convname, sample, thin, nChains, psrf.beta.name, psrf.gamma.name, psrf.rho.name) writeLines(code, executablename) } Upload the produced hmsc/exe_XXXXX.sh files to the HPC respecting the directory structure. 7.7 Fit Hmsc models (in Mjolnir HPC) Launch the SLURM jobs by using: # Submit all .sh files in the hmsc folder for jobfile in hmsc/exe_*.sh; do sbatch &quot;$jobfile&quot; done #Or launch them one by one only the ones you want to launch sbatch hmsc/exe_model1_250_1.sh sbatch hmsc/exe_model1_250_10.sh 7.8 Assess chain convergence Convergence diagnostic values substantially above 1 indicate lack of convergence. Values below 1.1 are considered good enough # Load all conv file available in the hmsc folder file_paths &lt;-list.files(path = &quot;hmsc_bookdown&quot;, pattern = &quot;^conv_&quot;, full.names = TRUE, include.dirs = TRUE) for (file_path in file_paths) { load(file_path, verbose = TRUE) # Remove .GlobalEnv argument and specify verbose for each load operation } Loading objects: psrf.beta.model1_250_1 psrf.gamma.model1_250_1 psrf.rho.model1_250_1 Loading objects: psrf.beta.model1_250_10 psrf.gamma.model1_250_10 psrf.rho.model1_250_10 # Create a merged psrf.beta (genome) plot ls() %&gt;% grep(&quot;^psrf\\\\.beta&quot;, ., value = TRUE) %&gt;% map_dfr(~ { mat &lt;- get(.x) data.frame(modelchain = .x, as.data.frame(mat, , stringsAsFactors = FALSE)) %&gt;% rownames_to_column(var=&quot;parameter&quot;) %&gt;% mutate(model = str_split(modelchain, &quot;_&quot;) %&gt;% map_chr(1) %&gt;% gsub(&quot;psrf.beta.&quot;,&quot;&quot;,.)) %&gt;% mutate(sample = str_split(modelchain, &quot;_&quot;)[[1]][2]) %&gt;% #extract sample info from model name mutate(thin = str_split(modelchain, &quot;_&quot;)[[1]][3]) #extract thin info from model name }) %&gt;% ggplot(.,aes(x=reorder(modelchain,-Point.est.,fun=function(x) {quantile(x, probs = 0.9)}),y=Point.est.)) + geom_violin(fill=&quot;#b8d9e3&quot;, color=&quot;#328da8&quot;) + geom_jitter(alpha=0.3,size=0.2, color=&quot;#a8babf&quot;) + stat_summary(fun=function(x) {quantile(x, probs = 0.9)}, geom=&quot;crossbar&quot;, width=0.2, color=&quot;orange&quot;) + geom_hline(yintercept=1.1, linetype=&quot;dashed&quot;, color = &quot;red&quot;) + ylim(0.9,2)+ labs(x=&quot;Model chains&quot;,y=&quot;Parameter estimates&quot;)+ theme_classic()+ theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) 7.9 Compute variance partitioning # Select modelchain of interest load(&quot;hmsc_bookdown/fit_model1_250_10.Rdata&quot;) varpart=computeVariancePartitioning(m) plotVariancePartitioning(hM=m,VP=varpart) # Compute variance partitioning varpart=computeVariancePartitioning(m) varpart$vals %&gt;% as.data.frame() %&gt;% rownames_to_column(var=&quot;variable&quot;) %&gt;% pivot_longer(!variable, names_to = &quot;genome&quot;, values_to = &quot;value&quot;) %&gt;% mutate(variable=factor(variable, levels=c(&quot;Elevation&quot;,&quot;Tree_cover&quot;, &quot;Anthropization_cover&quot;, &quot;logseqdepth&quot;,&quot;Random: Sampling_point&quot;, &quot;Random: Transect&quot;))) %&gt;% group_by(variable) %&gt;% summarise(mean=mean(value)*100,sd=sd(value)*100) %&gt;% tt() tinytable_brwjeku0da4azq3ibaz0 .table td.tinytable_css_0rtrh80di2ufxayfcs1a, .table th.tinytable_css_0rtrh80di2ufxayfcs1a { border-bottom: solid 0.1em #d3d8dc; } variable mean sd Elevation 10.682108 9.010436 Tree_cover 6.688091 5.776789 Anthropization_cover 11.629944 5.910538 logseqdepth 27.113812 13.370533 Random: Sampling_point 26.243129 16.489348 Random: Transect 17.642915 13.088087 # Basal tree varpart_tree &lt;- genome_tree %&gt;% keep.tip(., tip=m$spNames) #Varpart table varpart_table &lt;- varpart$vals %&gt;% as.data.frame() %&gt;% rownames_to_column(var=&quot;variable&quot;) %&gt;% pivot_longer(!variable, names_to = &quot;genome&quot;, values_to = &quot;value&quot;) %&gt;% mutate(variable=factor(variable, levels=rev(c(&quot;Elevation&quot;,&quot;Tree_cover&quot;,&quot;Anthropization_cover&quot;, &quot;logseqdepth&quot;,&quot;Random: Sampling_point&quot;, &quot;Random: Transect&quot;)))) %&gt;% mutate(genome=factor(genome, levels=rev(varpart_tree$tip.label))) #Phylums phylum_colors &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% filter(genome %in% varpart_tree$tip.label) %&gt;% arrange(match(genome, varpart_tree$tip.label)) %&gt;% mutate(phylum = factor(phylum, levels = unique(phylum))) %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% select(phylum) colors_alphabetic &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% filter(genome %in% varpart_tree$tip.label) %&gt;% arrange(match(genome, varpart_tree$tip.label)) %&gt;% select(phylum, colors) %&gt;% unique() %&gt;% arrange(phylum) %&gt;% select(colors) %&gt;% pull() # Basal ggtree varpart_tree &lt;- varpart_tree %&gt;% force.ultrametric(.,method=&quot;extend&quot;) %&gt;% ggtree(., size = 0.3) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** # Add phylum colors next to the tree tips varpart_tree &lt;- gheatmap(varpart_tree, phylum_colors, offset=-0.2, width=0.1, colnames=FALSE) + scale_fill_manual(values=colors_alphabetic)+ labs(fill=&quot;Phylum&quot;) #Reset fill scale to use a different colour profile in the heatmap varpart_tree &lt;- varpart_tree + new_scale_fill() # Add variance stacked barplot vertical_tree &lt;- varpart_tree + scale_fill_manual(values=c(&quot;#34738f&quot;,&quot;#cccccc&quot;,&quot;#ed8a45&quot;,&quot;#b2b530&quot;,&quot;#be3e2b&quot;,&quot;#83bb90&quot;,&quot;#f6de6c&quot;, &quot;#122f3d&quot;))+ #scale_fill_manual(values=c(&quot;#122f3d&quot;,&quot;#34738f&quot;,&quot;#cccccc&quot;,&quot;#ed8a45&quot;,&quot;#b2b530&quot;,&quot;#be3e2b&quot;,&quot;#83bb90&quot;,&quot;#f6de6c&quot;))+ geom_fruit( data=varpart_table, geom=geom_bar, mapping = aes(x=value, y=genome, fill=variable, group=variable), pwidth = 2, offset = 0.05, width= 1, orientation=&quot;y&quot;, stat=&quot;identity&quot;)+ labs(fill=&quot;Variable&quot;) vertical_tree # Select desired support threshold support=0.9 negsupport=1-support # Basal tree postestimates_tree &lt;- genome_tree %&gt;% keep.tip(., tip=m$spNames) #plotBeta(hM=m, post=getPostEstimate(hM=m, parName=&quot;Beta&quot;), param = &quot;Support&quot;, plotTree = TRUE, covNamesNumbers=c(1,0)) # Posterior estimate table post_beta &lt;- getPostEstimate(hM=m, parName=&quot;Beta&quot;)$support %&gt;% as.data.frame() %&gt;% mutate(variable=m$covNames) %&gt;% pivot_longer(!variable, names_to = &quot;genome&quot;, values_to = &quot;value&quot;) %&gt;% mutate(genome=factor(genome, levels=rev(postestimates_tree$tip.label))) %&gt;% mutate(value = case_when( value &gt;= support ~ &quot;Positive&quot;, value &lt;= negsupport ~ &quot;Negative&quot;, TRUE ~ &quot;Neutral&quot;)) %&gt;% mutate(value=factor(value, levels=c(&quot;Positive&quot;,&quot;Neutral&quot;,&quot;Negative&quot;))) %&gt;% pivot_wider(names_from = variable, values_from = value) %&gt;% rename(intercept=2, Elevation=3, Tree_cover=4, Anthropization_cover=5, logseqdepth=6 ) %&gt;% select(genome,intercept,Elevation,Tree_cover,Anthropization_cover,logseqdepth) %&gt;% column_to_rownames(var=&quot;genome&quot;) #Phylums phylum_colors &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% filter(genome %in% postestimates_tree$tip.label) %&gt;% arrange(match(genome, postestimates_tree$tip.label)) %&gt;% mutate(phylum = factor(phylum, levels = unique(phylum))) %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% select(phylum) colors_alphabetic &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% filter(genome %in% postestimates_tree$tip.label) %&gt;% arrange(match(genome, postestimates_tree$tip.label)) %&gt;% select(phylum, colors) %&gt;% unique() %&gt;% arrange(phylum) %&gt;% select(colors) %&gt;% pull() # Basal ggtree postestimates_tree &lt;- postestimates_tree %&gt;% force.ultrametric(.,method=&quot;extend&quot;) %&gt;% ggtree(., size = 0.3) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** #Add phylum colors next to the tree tips postestimates_tree &lt;- gheatmap(postestimates_tree, phylum_colors, offset=-0.2, width=0.1, colnames=FALSE) + scale_fill_manual(values=colors_alphabetic)+ labs(fill=&quot;Phylum&quot;) #Reset fill scale to use a different colour profile in the heatmap postestimates_tree &lt;- postestimates_tree + new_scale_fill() # Add posterior significant heatmap postestimates_tree &lt;- gheatmap(postestimates_tree, post_beta, offset=0, width=0.5, colnames=TRUE, colnames_position=&quot;top&quot;,colnames_angle=90, colnames_offset_y=1, hjust=0) + scale_fill_manual(values=c(&quot;#be3e2b&quot;,&quot;#f4f4f4&quot;,&quot;#b2b530&quot;))+ labs(fill=&quot;Trend&quot;) postestimates_tree + vexpand(.25, 1) # expand top #Compute the residual correlation matrix OmegaCor = computeAssociations(m) # Refernece tree (for sorting genomes) genome_tree_subset &lt;- genome_tree %&gt;% keep.tip(., tip=m$spNames) #Co-occurrence matrix at the animal level supportLevel = 0.95 toPlot = ((OmegaCor[[1]]$support&gt;supportLevel) + (OmegaCor[[1]]$support&lt;(1-supportLevel))&gt;0)*OmegaCor[[1]]$mean matrix &lt;- toPlot %&gt;% as.data.frame() %&gt;% rownames_to_column(var=&quot;genome1&quot;) %&gt;% pivot_longer(!genome1, names_to = &quot;genome2&quot;, values_to = &quot;cor&quot;) %&gt;% mutate(genome1= factor(genome1, levels=genome_tree_subset$tip.label)) %&gt;% mutate(genome2= factor(genome2, levels=genome_tree_subset$tip.label)) %&gt;% ggplot(aes(x = genome1, y = genome2, fill = cor)) + geom_tile() + scale_fill_gradient2(low = &quot;#be3e2b&quot;, mid = &quot;#f4f4f4&quot;, high = &quot;#b2b530&quot;)+ theme_void() vtree &lt;- genome_tree_subset %&gt;% force.ultrametric(.,method=&quot;extend&quot;) %&gt;% ggtree(.) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** #create composite figure grid.arrange(grobs = list(vtree,matrix,vtree), layout_matrix = rbind(c(4,1,1,1,1,1,1,1,1,1,1,1), c(3,2,2,2,2,2,2,2,2,2,2,2), c(3,2,2,2,2,2,2,2,2,2,2,2), c(3,2,2,2,2,2,2,2,2,2,2,2), c(3,2,2,2,2,2,2,2,2,2,2,2), c(3,2,2,2,2,2,2,2,2,2,2,2), c(3,2,2,2,2,2,2,2,2,2,2,2), c(3,2,2,2,2,2,2,2,2,2,2,2), c(3,2,2,2,2,2,2,2,2,2,2,2), c(3,2,2,2,2,2,2,2,2,2,2,2), c(3,2,2,2,2,2,2,2,2,2,2,2), c(3,2,2,2,2,2,2,2,2,2,2,2))) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
